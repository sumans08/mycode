{"version":3,"file":"xterm-headless.js","mappings":"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,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAC7C,CAAC,KAAQ,MAAS,CAAC,KAAQ,MAAS,CAAC,MAAQ,OAC7C,CAAC,MAAQ,OAAS,CAAC,MAAQ,OAAS,CAAC,MAAQ,OAC7C,CAAC,MAAQ,OAAS,CAAC,MAAQ,OAAS,CAAC,MAAQ,OAC7C,CAAC,MAAQ,OAAS,CAAC,MAAQ,OAAS,CAAC,MAAQ,QAEzCC,EAAiB,CACrB,CAAC,MAAS,OAAU,CAAC,MAAS,OAAU,CAAC,MAAS,OAClD,CAAC,MAAS,OAAU,CAAC,MAAS,OAAU,CAAC,OAAS,QAClD,CAAC,OAAS,QAAU,CAAC,OAAS,QAAU,CAAC,OAAS,QAClD,CAAC,OAAS,QAAU,CAAC,OAAS,QAAU,CAAC,OAAS,QAClD,CAAC,OAAS,SA0BZ,aAGE,aAEE,GAJc,KAAAC,QAAU,KAInBH,EAAO,CACVA,EAAQ,IAAIT,WAAW,QACvB,IAAArW,MAAK8W,EAAO,GACZA,EAAM,GAAK,GAEX,IAAA9W,MAAK8W,EAAO,EAAG,EAAG,KAClB,IAAA9W,MAAK8W,EAAO,EAAG,IAAM,MAIrB,IAAA9W,MAAK8W,EAAO,EAAG,KAAQ,MACvBA,EAAM,MAAU,EAChBA,EAAM,MAAU,GAChB,IAAA9W,MAAK8W,EAAO,EAAG,MAAQ,OACvBA,EAAM,OAAU,GAEhB,IAAA9W,MAAK8W,EAAO,EAAG,MAAQ,QACvB,IAAA9W,MAAK8W,EAAO,EAAG,MAAQ,QACvB,IAAA9W,MAAK8W,EAAO,EAAG,MAAQ,QACvB,IAAA9W,MAAK8W,EAAO,EAAG,MAAQ,QACvB,IAAA9W,MAAK8W,EAAO,EAAG,MAAQ,QACvB,IAAA9W,MAAK8W,EAAO,EAAG,MAAQ,OAOvB,IAAK,IAAII,EAAI,EAAGA,EAAIH,EAAcxxB,SAAU2xB,GAC1C,IAAAlX,MAAK8W,EAAO,EAAGC,EAAcG,GAAG,GAAIH,EAAcG,GAAG,GAAK,IAalE,OARS,YAAAxZ,QAAP,SAAeyZ,GACb,OAAIA,EAAM,GAAW,EACjBA,EAAM,IAAY,EAClBA,EAAM,MAAcL,EAAMK,GA9DlC,SAAkBC,EAAatsB,GAC7B,IAEIusB,EAFA/xB,EAAM,EACN+G,EAAMvB,EAAKvF,OAAS,EAExB,GAAI6xB,EAAMtsB,EAAK,GAAG,IAAMssB,EAAMtsB,EAAKuB,GAAK,GACtC,OAAO,EAET,KAAOA,GAAO/G,GAEZ,GAAI8xB,EAAMtsB,EADVusB,EAAO/xB,EAAM+G,GAAQ,GACD,GAClB/G,EAAM+xB,EAAM,MACP,MAAID,EAAMtsB,EAAKusB,GAAK,IAGzB,OAAO,EAFPhrB,EAAMgrB,EAAM,EAKhB,OAAO,EA8CDC,CAASH,EAAKH,GAAwB,EACrCG,GAAO,QAAWA,GAAO,QAAaA,GAAO,QAAWA,GAAO,OAAiB,EAC9E,GAEX,EA/CA,GAAa,EAAAI,UAAAA,G,kFCrEb,IAkBMC,EAA2D,oBAAnBC,eAC1C,SAACC,GAAqBrc,QAAQsc,UAAUC,KAAKF,IAC7CD,eAGJ,aAQE,WAAoBI,GAAA,KAAAA,QAAAA,EAPZ,KAAAjtB,aAAwC,GACxC,KAAAktB,WAA2C,GAC3C,KAAAC,aAAe,EACf,KAAAC,cAAgB,EAChB,KAAAC,gBAAiB,EACjB,KAAAC,WAAa,EAkLvB,OA3KS,YAAAvsB,UAAP,SAAiBb,EAA2Bc,GAI1C,QAA2BlG,IAAvBkG,GAAoChH,KAAKszB,WAAatsB,EAGxDhH,KAAKszB,WAAa,OAWpB,GAPAtzB,KAAKmzB,cAAgBjtB,EAAKvF,OAC1BX,KAAKgG,aAAa7E,KAAK+E,GACvBlG,KAAKkzB,WAAW/xB,UAAKL,GAGrBd,KAAKszB,cAEDtzB,KAAKqzB,eAAT,CASA,IAAIE,EACJ,IAPAvzB,KAAKqzB,gBAAiB,EAOfE,EAAQvzB,KAAKgG,aAAa2Y,SAAS,CACxC3e,KAAKizB,QAAQM,GACb,IAAMT,EAAK9yB,KAAKkzB,WAAWvU,QACvBmU,GAAIA,IAIV9yB,KAAKmzB,aAAe,EACpBnzB,KAAKozB,cAAgB,WAGrBpzB,KAAKqzB,gBAAiB,EACtBrzB,KAAKszB,WAAa,IAGb,YAAAzsB,MAAP,SAAaX,EAA2BY,GAAxC,WACE,GAAI9G,KAAKmzB,aAhFa,IAiFpB,MAAM,IAAI7xB,MAAM,+DAIbtB,KAAKgG,aAAarF,SACrBX,KAAKozB,cAAgB,EACrBvc,YAAW,WAAM,SAAK2c,kBAGxBxzB,KAAKmzB,cAAgBjtB,EAAKvF,OAC1BX,KAAKgG,aAAa7E,KAAK+E,GACvBlG,KAAKkzB,WAAW/xB,KAAK2F,IA+Bb,YAAA0sB,YAAV,SAAsBC,EAAsBttB,GAA5C,gBAAsB,IAAAstB,IAAAA,EAAA,QAAsB,IAAAttB,IAAAA,GAAA,GAE1C,IADA,IAAMutB,EAAYD,GAAYE,KAAKC,MAC5B5zB,KAAKgG,aAAarF,OAASX,KAAKozB,eAAe,CACpD,IAAMltB,EAAOlG,KAAKgG,aAAahG,KAAKozB,eAC9Bnc,EAASjX,KAAKizB,QAAQ/sB,EAAMC,GAClC,GAAI8Q,EAmDF,YAJAA,EAAOH,OAAM,SAAAC,GAEX,OADA6b,GAAI,WAAO,MAAM7b,KACVN,QAAQsc,SAAQ,MACtBC,MA3BwC,SAACV,GAAe,OAAAqB,KAAKC,MAAQF,GA/IvD,GAgJb7c,YAAW,WAAM,SAAK2c,YAAY,EAAGlB,MACrC,EAAKkB,YAAYE,EAAWpB,MA6BlC,IAAMQ,EAAK9yB,KAAKkzB,WAAWlzB,KAAKozB,eAKhC,GAJIN,GAAIA,IACR9yB,KAAKozB,gBACLpzB,KAAKmzB,cAAgBjtB,EAAKvF,OAEtBgzB,KAAKC,MAAQF,GAnLE,GAoLjB,MAGA1zB,KAAKgG,aAAarF,OAASX,KAAKozB,eAG9BpzB,KAAKozB,cAnLuB,KAoL9BpzB,KAAKgG,aAAehG,KAAKgG,aAAa6tB,MAAM7zB,KAAKozB,eACjDpzB,KAAKkzB,WAAalzB,KAAKkzB,WAAWW,MAAM7zB,KAAKozB,eAC7CpzB,KAAKozB,cAAgB,GAEvBvc,YAAW,WAAM,SAAK2c,mBAEtBxzB,KAAKgG,aAAarF,OAAS,EAC3BX,KAAKkzB,WAAWvyB,OAAS,EACzBX,KAAKmzB,aAAe,EACpBnzB,KAAKozB,cAAgB,IAG3B,EAxLA,GAAa,EAAAntB,YAAAA,G,+FChCb,IAAM6tB,EAAU,8KAEVC,EAAW,aAiDjB,SAASC,EAAIzpB,EAAW0pB,GACtB,IAAMC,EAAI3pB,EAAE4pB,SAAS,IACfC,EAAKF,EAAEvzB,OAAS,EAAI,IAAMuzB,EAAIA,EACpC,OAAQD,GACN,KAAK,EACH,OAAOC,EAAE,GACX,KAAK,EACH,OAAOE,EACT,KAAK,GACH,OAAQA,EAAKA,GAAIP,MAAM,EAAG,GAC5B,QACE,OAAOO,EAAKA,GA/ClB,sBAA2BluB,GACzB,GAAKA,EAAL,CAEA,IAAImuB,EAAMnuB,EAAKouB,cACf,GAA4B,IAAxBD,EAAItY,QAAQ,QAAe,CAE7BsY,EAAMA,EAAIR,MAAM,GAChB,IAAMU,EAAIT,EAAQ9U,KAAKqV,GACvB,GAAIE,EAAG,CACL,IAAMC,EAAOD,EAAE,GAAK,GAAKA,EAAE,GAAK,IAAMA,EAAE,GAAK,KAAO,MACpD,MAAO,CACL9zB,KAAKg0B,MAAMxV,SAASsV,EAAE,IAAMA,EAAE,IAAMA,EAAE,IAAMA,EAAE,IAAK,IAAMC,EAAO,KAChE/zB,KAAKg0B,MAAMxV,SAASsV,EAAE,IAAMA,EAAE,IAAMA,EAAE,IAAMA,EAAE,IAAK,IAAMC,EAAO,KAChE/zB,KAAKg0B,MAAMxV,SAASsV,EAAE,IAAMA,EAAE,IAAMA,EAAE,IAAMA,EAAE,IAAK,IAAMC,EAAO,YAG/D,GAAyB,IAArBH,EAAItY,QAAQ,OAErBsY,EAAMA,EAAIR,MAAM,GACZE,EAAS/U,KAAKqV,IAAQ,CAAC,EAAG,EAAG,EAAG,IAAI/T,SAAS+T,EAAI1zB,SAAS,CAG5D,IAFA,IAAM+zB,EAAML,EAAI1zB,OAAS,EACnBsW,EAAmC,CAAC,EAAG,EAAG,GACvCzW,EAAI,EAAGA,EAAI,IAAKA,EAAG,CAC1B,IAAM+rB,EAAItN,SAASoV,EAAIR,MAAMa,EAAMl0B,EAAGk0B,EAAMl0B,EAAIk0B,GAAM,IACtDzd,EAAOzW,GAAa,IAARk0B,EAAYnI,GAAK,EAAY,IAARmI,EAAYnI,EAAY,IAARmI,EAAYnI,GAAK,EAAIA,GAAK,EAE7E,OAAOtV,KA4Bb,uBAA4B4F,EAAiCoX,QAAA,IAAAA,IAAAA,EAAA,IACpD,IAAA3B,EAAWzV,EAAK,GAAb8X,EAAQ9X,EAAK,GAAVmE,EAAKnE,EAAK,GACvB,MAAO,OAAOmX,EAAI1B,EAAG2B,GAAK,IAAID,EAAIW,EAAGV,GAAK,IAAID,EAAIhT,EAAGiT,K,oFCrB1C,EAAAW,cAAgB,K,+FClD7B,aACA,SACA,SAEMC,EAAgC,GAEtC,0BACU,KAAAC,UAA6C7K,OAAO8K,OAAO,MAC3D,KAAAC,QAAyBH,EACzB,KAAAI,OAAiB,EACjB,KAAAC,WAAqC,aACrC,KAAAC,OAA+B,CACrCjmB,QAAQ,EACRkmB,aAAc,EACdC,aAAa,GA8GjB,OA3GS,YAAA3uB,QAAP,WACE1G,KAAK80B,UAAY7K,OAAO8K,OAAO,MAC/B/0B,KAAKk1B,WAAa,aAClBl1B,KAAKg1B,QAAUH,GAGV,YAAAS,gBAAP,SAAuB1sB,EAAe2sB,QACNz0B,IAA1Bd,KAAK80B,UAAUlsB,KACjB5I,KAAK80B,UAAUlsB,GAAS,IAE1B,IAAM4sB,EAAcx1B,KAAK80B,UAAUlsB,GAEnC,OADA4sB,EAAYr0B,KAAKo0B,GACV,CACL7uB,QAAS,WACP,IAAM+uB,EAAeD,EAAYzZ,QAAQwZ,IACnB,IAAlBE,GACFD,EAAYh0B,OAAOi0B,EAAc,MAMlC,YAAAC,aAAP,SAAoB9sB,GACd5I,KAAK80B,UAAUlsB,WAAe5I,KAAK80B,UAAUlsB,IAG5C,YAAA+sB,mBAAP,SAA0BJ,GACxBv1B,KAAKk1B,WAAaK,GAGb,YAAAtsB,MAAP,WAEE,GAAIjJ,KAAKg1B,QAAQr0B,OACf,IAAK,IAAI0a,EAAIrb,KAAKm1B,OAAOjmB,OAASlP,KAAKm1B,OAAOC,aAAe,EAAIp1B,KAAKg1B,QAAQr0B,OAAS,EAAG0a,GAAK,IAAKA,EAClGrb,KAAKg1B,QAAQ3Z,GAAG5O,QAAO,GAG3BzM,KAAKm1B,OAAOjmB,QAAS,EACrBlP,KAAKg1B,QAAUH,EACf70B,KAAKi1B,OAAS,GAGT,YAAA9oB,KAAP,SAAYvD,EAAewD,GAKzB,GAHApM,KAAKiJ,QACLjJ,KAAKi1B,OAASrsB,EACd5I,KAAKg1B,QAAUh1B,KAAK80B,UAAUlsB,IAAUisB,EACnC70B,KAAKg1B,QAAQr0B,OAGhB,IAAK,IAAI0a,EAAIrb,KAAKg1B,QAAQr0B,OAAS,EAAG0a,GAAK,EAAGA,IAC5Crb,KAAKg1B,QAAQ3Z,GAAGlP,KAAKC,QAHvBpM,KAAKk1B,WAAWl1B,KAAKi1B,OAAQ,OAAQ7oB,IAQlC,YAAAC,IAAP,SAAWnG,EAAmBzE,EAAe6K,GAC3C,GAAKtM,KAAKg1B,QAAQr0B,OAGhB,IAAK,IAAI0a,EAAIrb,KAAKg1B,QAAQr0B,OAAS,EAAG0a,GAAK,EAAGA,IAC5Crb,KAAKg1B,QAAQ3Z,GAAGhP,IAAInG,EAAMzE,EAAO6K,QAHnCtM,KAAKk1B,WAAWl1B,KAAKi1B,OAAQ,OAAO,IAAAtoB,eAAczG,EAAMzE,EAAO6K,KAQ5D,YAAAG,OAAP,SAAcC,EAAkBvG,GAC9B,QAD8B,IAAAA,IAAAA,GAAA,GACzBnG,KAAKg1B,QAAQr0B,OAEX,CACL,IAAIi1B,GAA4C,EAC5Cva,EAAIrb,KAAKg1B,QAAQr0B,OAAS,EAC1B00B,GAAc,EAOlB,GANIr1B,KAAKm1B,OAAOjmB,SACdmM,EAAIrb,KAAKm1B,OAAOC,aAAe,EAC/BQ,EAAgBzvB,EAChBkvB,EAAcr1B,KAAKm1B,OAAOE,YAC1Br1B,KAAKm1B,OAAOjmB,QAAS,IAElBmmB,IAAiC,IAAlBO,EAAyB,CAC3C,KAAOva,GAAK,IAEY,KADtBua,EAAgB51B,KAAKg1B,QAAQ3Z,GAAG5O,OAAOC,IAD1B2O,IAIN,GAAIua,aAAyBnf,QAIlC,OAHAzW,KAAKm1B,OAAOjmB,QAAS,EACrBlP,KAAKm1B,OAAOC,aAAe/Z,EAC3Brb,KAAKm1B,OAAOE,aAAc,EACnBO,EAGXva,IAGF,KAAOA,GAAK,EAAGA,IAEb,IADAua,EAAgB51B,KAAKg1B,QAAQ3Z,GAAG5O,QAAO,cACVgK,QAI3B,OAHAzW,KAAKm1B,OAAOjmB,QAAS,EACrBlP,KAAKm1B,OAAOC,aAAe/Z,EAC3Brb,KAAKm1B,OAAOE,aAAc,EACnBO,OAhCX51B,KAAKk1B,WAAWl1B,KAAKi1B,OAAQ,SAAUvoB,GAoCzC1M,KAAKg1B,QAAUH,EACf70B,KAAKi1B,OAAS,GAElB,EAtHA,GAAa,EAAAY,UAAAA,EAyHb,IAAMC,EAAe,IAAI,EAAAC,OACzBD,EAAaE,SAAS,GAMtB,iBAKE,WAAoBC,GAAA,KAAAA,SAAAA,EAJZ,KAAAhqB,MAAQ,GACR,KAAAiqB,QAAmBJ,EACnB,KAAAK,WAAqB,EA+C/B,OA3CS,YAAAhqB,KAAP,SAAYC,GAKVpM,KAAKk2B,QAAW9pB,EAAOzL,OAAS,GAAKyL,EAAOA,OAAO,GAAMA,EAAOhK,QAAU0zB,EAC1E91B,KAAKiM,MAAQ,GACbjM,KAAKm2B,WAAY,GAGZ,YAAA9pB,IAAP,SAAWnG,EAAmBzE,EAAe6K,GACvCtM,KAAKm2B,YAGTn2B,KAAKiM,QAAS,IAAAU,eAAczG,EAAMzE,EAAO6K,GACrCtM,KAAKiM,MAAMtL,OAAS,EAAAi0B,gBACtB50B,KAAKiM,MAAQ,GACbjM,KAAKm2B,WAAY,KAId,YAAA1pB,OAAP,SAAcC,GAAd,WACM0pB,GAAkC,EACtC,GAAIp2B,KAAKm2B,UACPC,GAAM,OACD,GAAI1pB,IACT0pB,EAAMp2B,KAAKi2B,SAASj2B,KAAKiM,MAAOjM,KAAKk2B,oBAClBzf,QAGjB,OAAO2f,EAAIpD,MAAK,SAAArc,GAId,OAHA,EAAKuf,QAAUJ,EACf,EAAK7pB,MAAQ,GACb,EAAKkqB,WAAY,EACVxf,KAOb,OAHA3W,KAAKk2B,QAAUJ,EACf91B,KAAKiM,MAAQ,GACbjM,KAAKm2B,WAAY,EACVC,GAEX,EAlDA,GAAa,EAAApc,WAAAA,G,4mBCtIb,aAEA,SACA,SACA,SACA,SAgBA,aAGE,WAAYrZ,GACVX,KAAKkyB,MAAQ,IAAIT,WAAW9wB,GAmChC,OA3BS,YAAA01B,WAAP,SAAkBnmB,EAAsB6Z,IACtC,IAAA3O,MAAKpb,KAAKkyB,MAAOhiB,GAAU,EAAsC6Z,IAU5D,YAAAuM,IAAP,SAAWtmB,EAAcmG,EAAoBjG,EAAsB6Z,GACjE/pB,KAAKkyB,MAAM/b,GAAS,EAAgCnG,GAAQE,GAAU,EAAsC6Z,GAUvG,YAAAwM,QAAP,SAAeC,EAAiBrgB,EAAoBjG,EAAsB6Z,GACxE,IAAK,IAAIvpB,EAAI,EAAGA,EAAIg2B,EAAM71B,OAAQH,IAChCR,KAAKkyB,MAAM/b,GAAS,EAAgCqgB,EAAMh2B,IAAM0P,GAAU,EAAsC6Z,GAGtH,EAvCA,GAAa,EAAA0M,gBAAAA,EA2Cb,IAAMC,EAAsB,IAOf,EAAAC,uBAAyB,WACpC,IAAMzE,EAAyB,IAAIuE,EAAgB,MAI7CG,EAAY12B,MAAM22B,MAAM,KAAM32B,MADhB,MACoCmX,KAAI,SAACyf,EAAat2B,GAAc,OAAAA,KAClF8xB,EAAI,SAAC7wB,EAAe6K,GAA0B,OAAAsqB,EAAU/C,MAAMpyB,EAAO6K,IAGrEyqB,EAAazE,EAAE,GAAM,KACrB0E,EAAc1E,EAAE,EAAM,IAC5B0E,EAAY71B,KAAK,IACjB61B,EAAY71B,KAAK01B,MAAMG,EAAa1E,EAAE,GAAM,KAE5C,IACInc,EADE8gB,EAAmB3E,EAAE,EAAoB,IAQ/C,IAAKnc,KAJL+b,EAAMmE,WAAW,EAAD,GAEhBnE,EAAMqE,QAAQQ,EAAY,EAAF,KAEVE,EACZ/E,EAAMqE,QAAQ,CAAC,GAAM,GAAM,IAAM,KAAOpgB,EAAO,EAAF,GAC7C+b,EAAMqE,QAAQjE,EAAE,IAAM,KAAOnc,EAAO,EAAF,GAClC+b,EAAMqE,QAAQjE,EAAE,IAAM,KAAOnc,EAAO,EAAF,GAClC+b,EAAMoE,IAAI,IAAMngB,EAAO,EAAF,GACrB+b,EAAMoE,IAAI,GAAMngB,EAAO,GAAF,GACrB+b,EAAMoE,IAAI,IAAMngB,EAAO,EAAF,GACrB+b,EAAMqE,QAAQ,CAAC,IAAM,IAAM,KAAOpgB,EAAO,EAAF,GACvC+b,EAAMoE,IAAI,IAAMngB,EAAO,GAAF,GACrB+b,EAAMoE,IAAI,IAAMngB,EAAO,GAAF,GAuFvB,OApFA+b,EAAMqE,QAAQS,EAAa,EAAF,KACzB9E,EAAMqE,QAAQS,EAAa,EAAF,KACzB9E,EAAMoE,IAAI,IAAM,EAAF,KACdpE,EAAMqE,QAAQS,EAAa,EAAF,KACzB9E,EAAMqE,QAAQS,EAAa,EAAF,KACzB9E,EAAMoE,IAAI,IAAM,EAAF,KACdpE,EAAMqE,QAAQS,EAAa,EAAF,KACzB9E,EAAMoE,IAAI,IAAM,EAAF,KACdpE,EAAMqE,QAAQS,EAAa,EAAF,KACzB9E,EAAMqE,QAAQS,EAAa,EAAF,KACzB9E,EAAMoE,IAAI,IAAM,EAAF,KACdpE,EAAMqE,QAAQS,EAAa,EAAF,KACzB9E,EAAMoE,IAAI,IAAM,EAAF,KAEdpE,EAAMoE,IAAI,GAAM,EAAF,KACdpE,EAAMqE,QAAQQ,EAAY,EAAF,KACxB7E,EAAMoE,IAAI,IAAM,EAAF,KACdpE,EAAMqE,QAAQ,CAAC,IAAM,GAAM,GAAM,GAAM,GAAO,EAAF,KAC5CrE,EAAMqE,QAAQjE,EAAE,GAAM,IAAO,EAAF,KAE3BJ,EAAMqE,QAAQ,CAAC,GAAM,GAAM,IAAO,EAAF,KAChCrE,EAAMqE,QAAQQ,EAAY,EAAF,KACxB7E,EAAMqE,QAAQS,EAAa,EAAF,KACzB9E,EAAMoE,IAAI,IAAM,EAAF,KACdpE,EAAMoE,IAAI,IAAM,EAAF,KAEdpE,EAAMoE,IAAI,GAAM,EAAF,MACdpE,EAAMqE,QAAQjE,EAAE,GAAM,KAAO,EAAF,KAC3BJ,EAAMqE,QAAQjE,EAAE,GAAM,IAAO,EAAF,KAC3BJ,EAAMqE,QAAQ,CAAC,GAAM,GAAM,GAAM,IAAO,EAAF,KACtCrE,EAAMqE,QAAQjE,EAAE,GAAM,IAAO,EAAF,KAC3BJ,EAAMqE,QAAQjE,EAAE,GAAM,KAAO,EAAF,KAC3BJ,EAAMqE,QAAQ,CAAC,GAAM,GAAM,GAAM,IAAO,EAAF,KACtCrE,EAAMqE,QAAQjE,EAAE,GAAM,IAAO,EAAF,KAC3BJ,EAAMoE,IAAI,IAAM,EAAF,KACdpE,EAAMqE,QAAQjE,EAAE,GAAM,KAAO,EAAF,KAC3BJ,EAAMqE,QAAQjE,EAAE,GAAM,IAAO,EAAF,KAC3BJ,EAAMqE,QAAQjE,EAAE,GAAM,IAAO,EAAF,KAC3BJ,EAAMqE,QAAQjE,EAAE,GAAM,IAAO,EAAF,KAC3BJ,EAAMqE,QAAQjE,EAAE,GAAM,KAAO,EAAF,KAC3BJ,EAAMqE,QAAQjE,EAAE,GAAM,IAAO,EAAF,KAE3BJ,EAAMqE,QAAQjE,EAAE,GAAM,IAAO,EAAF,KAC3BJ,EAAMqE,QAAQjE,EAAE,GAAM,IAAO,EAAF,KAC3BJ,EAAMqE,QAAQjE,EAAE,GAAM,KAAO,EAAF,MAC3BJ,EAAMqE,QAAQjE,EAAE,GAAM,IAAO,EAAF,MAC3BJ,EAAMqE,QAAQjE,EAAE,GAAM,IAAO,EAAF,MAC3BJ,EAAMqE,QAAQ,CAAC,GAAM,GAAM,IAAO,EAAF,MAChCrE,EAAMqE,QAAQjE,EAAE,GAAM,KAAO,EAAF,MAE3BJ,EAAMoE,IAAI,GAAM,EAAF,MACdpE,EAAMqE,QAAQS,EAAa,EAAF,KACzB9E,EAAMoE,IAAI,IAAM,EAAF,KACdpE,EAAMqE,QAAQjE,EAAE,GAAM,IAAO,EAAF,KAC3BJ,EAAMqE,QAAQjE,EAAE,GAAM,IAAO,EAAF,MAC3BJ,EAAMqE,QAAQjE,EAAE,GAAM,IAAO,EAAF,MAC3BJ,EAAMqE,QAAQ,CAAC,GAAM,GAAM,GAAM,IAAO,EAAF,MACtCrE,EAAMqE,QAAQS,EAAa,GAAF,MACzB9E,EAAMqE,QAAQjE,EAAE,GAAM,KAAO,GAAF,MAC3BJ,EAAMqE,QAAQjE,EAAE,GAAM,IAAO,GAAF,MAC3BJ,EAAMqE,QAAQS,EAAa,GAAF,MACzB9E,EAAMoE,IAAI,IAAM,GAAF,MACdpE,EAAMqE,QAAQjE,EAAE,GAAM,IAAO,GAAF,MAC3BJ,EAAMqE,QAAQjE,EAAE,GAAM,IAAO,GAAF,MAC3BJ,EAAMqE,QAAQ,CAAC,GAAM,GAAM,GAAM,IAAO,GAAF,MACtCrE,EAAMqE,QAAQjE,EAAE,GAAM,IAAO,GAAF,MAC3BJ,EAAMqE,QAAQS,EAAa,GAAF,MACzB9E,EAAMoE,IAAI,IAAM,GAAF,MACdpE,EAAMqE,QAAQjE,EAAE,GAAM,IAAO,GAAF,MAC3BJ,EAAMqE,QAAQjE,EAAE,GAAM,IAAO,GAAF,MAC3BJ,EAAMqE,QAAQjE,EAAE,GAAM,IAAO,GAAF,MAC3BJ,EAAMqE,QAAQjE,EAAE,GAAM,KAAO,GAAF,OAC3BJ,EAAMqE,QAAQjE,EAAE,GAAM,KAAO,GAAF,OAC3BJ,EAAMqE,QAAQjE,EAAE,GAAM,KAAO,EAAF,OAC3BJ,EAAMqE,QAAQS,EAAa,GAAF,OACzB9E,EAAMqE,QAAQQ,EAAY,GAAF,OACxB7E,EAAMoE,IAAI,IAAM,GAAF,MACdpE,EAAMqE,QAAQ,CAAC,GAAM,IAAM,GAAM,IAAO,GAAF,MAEtCrE,EAAMoE,IAAII,EAAqB,EAAF,KAC7BxE,EAAMoE,IAAII,EAAqB,EAAF,KAC7BxE,EAAMoE,IAAII,EAAqB,EAAF,KAC7BxE,EAAMoE,IAAII,EAAqB,GAAF,MAC7BxE,EAAMoE,IAAII,EAAqB,GAAF,OACtBxE,EAtH6B,GAwJtC,kBAkCE,WACqBgF,QAAA,IAAAA,IAAAA,EAAgC,EAAAP,wBADrD,MAGE,cAAO,K,OAFY,EAAAO,aAAAA,EATX,EAAAjoB,YAAiC,CACzCkH,MAAO,EACPghB,SAAU,GACVC,WAAY,EACZC,WAAY,EACZC,SAAU,GAQV,EAAKC,aAAe,EACpB,EAAKC,aAAe,EAAKD,aACzB,EAAKrB,QAAU,IAAI,EAAAH,OACnB,EAAKG,QAAQF,SAAS,GACtB,EAAKyB,SAAW,EAChB,EAAK9d,mBAAqB,EAG1B,EAAK+d,gBAAkB,SAACxxB,EAAMzE,EAAO6K,KACrC,EAAKqrB,kBAAoB,SAAC3nB,KAC1B,EAAK4nB,cAAgB,SAAChvB,EAAewD,KACrC,EAAKyrB,cAAgB,SAACjvB,KACtB,EAAKkvB,gBAAkB,SAAC3hB,GAAwC,OAAAA,GAChE,EAAK4hB,cAAgB,EAAKL,gBAC1B,EAAKM,iBAAmB/N,OAAO8K,OAAO,MACtC,EAAKkD,aAAehO,OAAO8K,OAAO,MAClC,EAAKmD,aAAejO,OAAO8K,OAAO,MAClC,EAAKoD,WAAa,IAAI,EAAAC,UACtB,EAAKC,WAAa,IAAI,EAAAxC,UACtB,EAAKyC,cAAgB,EAAKR,gBAG1B,EAAKvvB,mBAAmB,CAAEa,MAAO,OAAQ,WAAM,Y,EAwfnD,OArjB0C,OAgE9B,YAAAmvB,YAAV,SAAsB/vB,EAAyBgwB,QAAA,IAAAA,IAAAA,EAAA,CAAwB,GAAM,MAC3E,IAAI7hB,EAAM,EACV,GAAInO,EAAG6I,OAAQ,CACb,GAAI7I,EAAG6I,OAAO1Q,OAAS,EACrB,MAAM,IAAIW,MAAM,qCAGlB,IADAqV,EAAMnO,EAAG6I,OAAOiG,WAAW,KAChB,GAAOX,GAAOA,EAAM,GAC7B,MAAM,IAAIrV,MAAM,wCAGpB,GAAIkH,EAAGgI,cAAe,CACpB,GAAIhI,EAAGgI,cAAc7P,OAAS,EAC5B,MAAM,IAAIW,MAAM,iDAElB,IAAK,IAAId,EAAI,EAAGA,EAAIgI,EAAGgI,cAAc7P,SAAUH,EAAG,CAChD,IAAMi4B,EAAejwB,EAAGgI,cAAc8G,WAAW9W,GACjD,GAAI,GAAOi4B,GAAgBA,EAAe,GACxC,MAAM,IAAIn3B,MAAM,8CAElBqV,IAAQ,EACRA,GAAO8hB,GAGX,GAAwB,IAApBjwB,EAAGY,MAAMzI,OACX,MAAM,IAAIW,MAAM,+BAElB,IAAMo3B,EAAYlwB,EAAGY,MAAMkO,WAAW,GACtC,GAAIkhB,EAAW,GAAKE,GAAaA,EAAYF,EAAW,GACtD,MAAM,IAAIl3B,MAAM,0BAA0Bk3B,EAAW,GAAE,OAAOA,EAAW,IAK3E,OAHA7hB,IAAQ,GACD+hB,GAKF,YAAA9oB,cAAP,SAAqBhH,GAEnB,IADA,IAAM+N,EAAgB,GACf/N,GACL+N,EAAIxV,KAAK6X,OAAOC,aAAqB,IAARrQ,IAC7BA,IAAU,EAEZ,OAAO+N,EAAIgiB,UAAUC,KAAK,KAGrB,YAAAlyB,QAAP,WACE1G,KAAKi4B,aAAehO,OAAO8K,OAAO,MAClC/0B,KAAKg4B,iBAAmB/N,OAAO8K,OAAO,MACtC/0B,KAAKk4B,aAAejO,OAAO8K,OAAO,MAClC/0B,KAAKm4B,WAAWzxB,UAChB1G,KAAKq4B,WAAW3xB,WAGX,YAAA2J,gBAAP,SAAuBklB,GACrBv1B,KAAK+3B,cAAgBxC,GAEhB,YAAAsD,kBAAP,WACE74B,KAAK+3B,cAAgB/3B,KAAK03B,iBAGrB,YAAAnvB,mBAAP,SAA0BC,EAAyB+sB,GACjD,IAAM3sB,EAAQ5I,KAAKu4B,YAAY/vB,EAAI,CAAC,GAAM,WACT1H,IAA7Bd,KAAKk4B,aAAatvB,KACpB5I,KAAKk4B,aAAatvB,GAAS,IAE7B,IAAM4sB,EAAcx1B,KAAKk4B,aAAatvB,GAEtC,OADA4sB,EAAYr0B,KAAKo0B,GACV,CACL7uB,QAAS,WACP,IAAM+uB,EAAeD,EAAYzZ,QAAQwZ,IACnB,IAAlBE,GACFD,EAAYh0B,OAAOi0B,EAAc,MAKlC,YAAAqD,gBAAP,SAAuBtwB,GACjBxI,KAAKk4B,aAAal4B,KAAKu4B,YAAY/vB,EAAI,CAAC,GAAM,eAAgBxI,KAAKk4B,aAAal4B,KAAKu4B,YAAY/vB,EAAI,CAAC,GAAM,QAE3G,YAAAsH,sBAAP,SAA6BylB,GAC3Bv1B,KAAK63B,cAAgBtC,GAGhB,YAAAjiB,kBAAP,SAAyBwC,EAAcyf,GACrCv1B,KAAKg4B,iBAAiBliB,EAAKwB,WAAW,IAAMie,GAEvC,YAAAwD,oBAAP,SAA2BjjB,GACrB9V,KAAKg4B,iBAAiBliB,EAAKwB,WAAW,YAAYtX,KAAKg4B,iBAAiBliB,EAAKwB,WAAW,KAEvF,YAAAvH,0BAAP,SAAiCwlB,GAC/Bv1B,KAAK23B,kBAAoBpC,GAGpB,YAAA7sB,mBAAP,SAA0BF,EAAyB+sB,GACjD,IAAM3sB,EAAQ5I,KAAKu4B,YAAY/vB,QACE1H,IAA7Bd,KAAKi4B,aAAarvB,KACpB5I,KAAKi4B,aAAarvB,GAAS,IAE7B,IAAM4sB,EAAcx1B,KAAKi4B,aAAarvB,GAEtC,OADA4sB,EAAYr0B,KAAKo0B,GACV,CACL7uB,QAAS,WACP,IAAM+uB,EAAeD,EAAYzZ,QAAQwZ,IACnB,IAAlBE,GACFD,EAAYh0B,OAAOi0B,EAAc,MAKlC,YAAAuD,gBAAP,SAAuBxwB,GACjBxI,KAAKi4B,aAAaj4B,KAAKu4B,YAAY/vB,YAAaxI,KAAKi4B,aAAaj4B,KAAKu4B,YAAY/vB,KAElF,YAAAkH,sBAAP,SAA6B5I,GAC3B9G,KAAK43B,cAAgB9wB,GAGhB,YAAA2B,mBAAP,SAA0BD,EAAyB+sB,GACjD,OAAOv1B,KAAKq4B,WAAW/C,gBAAgBt1B,KAAKu4B,YAAY/vB,GAAK+sB,IAExD,YAAA0D,gBAAP,SAAuBzwB,GACrBxI,KAAKq4B,WAAW3C,aAAa11B,KAAKu4B,YAAY/vB,KAEzC,YAAA2H,sBAAP,SAA6BolB,GAC3Bv1B,KAAKq4B,WAAW1C,mBAAmBJ,IAG9B,YAAA5sB,mBAAP,SAA0BC,EAAe2sB,GACvC,OAAOv1B,KAAKm4B,WAAW7C,gBAAgB1sB,EAAO2sB,IAEzC,YAAA2D,gBAAP,SAAuBtwB,GACrB5I,KAAKm4B,WAAWzC,aAAa9sB,IAExB,YAAAqH,sBAAP,SAA6BslB,GAC3Bv1B,KAAKm4B,WAAWxC,mBAAmBJ,IAG9B,YAAArf,gBAAP,SAAuBpP,GACrB9G,KAAKs4B,cAAgBxxB,GAEhB,YAAAqyB,kBAAP,WACEn5B,KAAKs4B,cAAgBt4B,KAAK83B,iBAYrB,YAAA7uB,MAAP,WACEjJ,KAAKw3B,aAAex3B,KAAKu3B,aACzBv3B,KAAKm4B,WAAWlvB,QAChBjJ,KAAKq4B,WAAWpvB,QAChBjJ,KAAKk2B,QAAQjtB,QACbjJ,KAAKk2B,QAAQF,SAAS,GACtBh2B,KAAKy3B,SAAW,EAChBz3B,KAAK2Z,mBAAqB,EAIK,IAA3B3Z,KAAKiP,YAAYkH,QACnBnW,KAAKiP,YAAYkH,MAAQ,EACzBnW,KAAKiP,YAAYkoB,SAAW,KAOtB,YAAA7gB,eAAV,SACEH,EACAghB,EACAC,EACAC,EACAC,GAEAt3B,KAAKiP,YAAYkH,MAAQA,EACzBnW,KAAKiP,YAAYkoB,SAAWA,EAC5Bn3B,KAAKiP,YAAYmoB,WAAaA,EAC9Bp3B,KAAKiP,YAAYooB,WAAaA,EAC9Br3B,KAAKiP,YAAYqoB,SAAWA,GA4CvB,YAAAlxB,MAAP,SAAaF,EAAmBvF,EAAgBwF,GAC9C,IAGIyvB,EAHA5lB,EAAO,EACPqnB,EAAa,EACb51B,EAAQ,EAIZ,GAAIzB,KAAKiP,YAAYkH,MAGnB,GAA+B,IAA3BnW,KAAKiP,YAAYkH,MACnBnW,KAAKiP,YAAYkH,MAAQ,EACzB1U,EAAQzB,KAAKiP,YAAYqoB,SAAW,MAC/B,CACL,QAAsBx2B,IAAlBqF,GAA0D,IAA3BnG,KAAKiP,YAAYkH,MAiBlD,MADAnW,KAAKiP,YAAYkH,MAAQ,EACnB,IAAI7U,MAAM,0EAMlB,IAAM61B,EAAWn3B,KAAKiP,YAAYkoB,SAC9BC,EAAap3B,KAAKiP,YAAYmoB,WAAa,EAC/C,OAAQp3B,KAAKiP,YAAYkH,OACvB,KAAK,EACH,IAAsB,IAAlBhQ,GAA2BixB,GAAc,EAC3C,KAAOA,GAAc,IAEG,KADtBxB,EAAiBuB,EAA8BC,GAAYp3B,KAAKk2B,UAD1CkB,IAIf,GAAIxB,aAAyBnf,QAElC,OADAzW,KAAKiP,YAAYmoB,WAAaA,EACvBxB,EAIb51B,KAAKiP,YAAYkoB,SAAW,GAC5B,MACF,KAAK,EACH,IAAsB,IAAlBhxB,GAA2BixB,GAAc,EAC3C,KAAOA,GAAc,IAEG,KADtBxB,EAAiBuB,EAA8BC,MADzBA,IAIf,GAAIxB,aAAyBnf,QAElC,OADAzW,KAAKiP,YAAYmoB,WAAaA,EACvBxB,EAIb51B,KAAKiP,YAAYkoB,SAAW,GAC5B,MACF,KAAK,EAGH,GAFAnnB,EAAO9J,EAAKlG,KAAKiP,YAAYqoB,UAC7B1B,EAAgB51B,KAAKq4B,WAAW5rB,OAAgB,KAATuD,GAA0B,KAATA,EAAe7J,GAErE,OAAOyvB,EAEI,KAAT5lB,IAAehQ,KAAKiP,YAAYooB,YAAc,GAClDr3B,KAAKk2B,QAAQjtB,QACbjJ,KAAKk2B,QAAQF,SAAS,GACtBh2B,KAAKy3B,SAAW,EAChB,MACF,KAAK,EAGH,GAFAznB,EAAO9J,EAAKlG,KAAKiP,YAAYqoB,UAC7B1B,EAAgB51B,KAAKm4B,WAAW7rB,IAAa,KAAT0D,GAA0B,KAATA,EAAe7J,GAElE,OAAOyvB,EAEI,KAAT5lB,IAAehQ,KAAKiP,YAAYooB,YAAc,GAClDr3B,KAAKk2B,QAAQjtB,QACbjJ,KAAKk2B,QAAQF,SAAS,GACtBh2B,KAAKy3B,SAAW,EAIpBz3B,KAAKiP,YAAYkH,MAAQ,EACzB1U,EAAQzB,KAAKiP,YAAYqoB,SAAW,EACpCt3B,KAAK2Z,mBAAqB,EAC1B3Z,KAAKw3B,aAA6C,GAA9Bx3B,KAAKiP,YAAYooB,WAOzC,IAAK,IAAI72B,EAAIiB,EAAOjB,EAAIG,IAAUH,EAAG,CAKnC,OAJAwP,EAAO9J,EAAK1F,IAGZ62B,EAAar3B,KAAKk3B,aAAahF,MAAMlyB,KAAKw3B,cAAgB,GAAiCxnB,EAAO,IAAOA,EAAO0mB,MAC1F,GACpB,KAAK,EAGH,IAAK,IAAI,EAAIl2B,EAAI,KAAO,EAAG,CACzB,GAAI,GAAKG,IAAWqP,EAAO9J,EAAK,IAAM,IAAS8J,EAAO,KAAQA,EAAO0mB,EAAsB,CACzF12B,KAAK+3B,cAAc7xB,EAAM1F,EAAG,GAC5BA,EAAI,EAAI,EACR,MAEF,KAAM,GAAKG,IAAWqP,EAAO9J,EAAK,IAAM,IAAS8J,EAAO,KAAQA,EAAO0mB,EAAsB,CAC3F12B,KAAK+3B,cAAc7xB,EAAM1F,EAAG,GAC5BA,EAAI,EAAI,EACR,MAEF,KAAM,GAAKG,IAAWqP,EAAO9J,EAAK,IAAM,IAAS8J,EAAO,KAAQA,EAAO0mB,EAAsB,CAC3F12B,KAAK+3B,cAAc7xB,EAAM1F,EAAG,GAC5BA,EAAI,EAAI,EACR,MAEF,KAAM,GAAKG,IAAWqP,EAAO9J,EAAK,IAAM,IAAS8J,EAAO,KAAQA,EAAO0mB,EAAsB,CAC3F12B,KAAK+3B,cAAc7xB,EAAM1F,EAAG,GAC5BA,EAAI,EAAI,EACR,OAGJ,MACF,KAAK,EACCR,KAAKg4B,iBAAiBhoB,GAAOhQ,KAAKg4B,iBAAiBhoB,KAClDhQ,KAAK23B,kBAAkB3nB,GAC5BhQ,KAAK2Z,mBAAqB,EAC1B,MACF,KAAK,EACH,MACF,KAAK,EAUH,GAT8B3Z,KAAKs4B,cACjC,CACE7yB,SAAUjF,EACVwP,KAAI,EACJwnB,aAAcx3B,KAAKw3B,aACnB4B,QAASp5B,KAAKy3B,SACdrrB,OAAQpM,KAAKk2B,QACbmD,OAAO,IAEAA,MAAO,OAElB,MACF,KAAK,EAIH,IAFA,IACIhe,GADE8b,EAAWn3B,KAAKi4B,aAAaj4B,KAAKy3B,UAAY,EAAIznB,IACrCmnB,EAASx2B,OAAS,GAAK,EACnC0a,GAAK,IAIY,KADtBua,EAAgBuB,EAAS9b,GAAGrb,KAAKk2B,UAHpB7a,IAMN,GAAIua,aAAyBnf,QAElC,OADAzW,KAAKsW,eAAe,EAAqB6gB,EAAU9b,EAAGgc,EAAY72B,GAC3Do1B,EAGPva,EAAI,GACNrb,KAAK43B,cAAc53B,KAAKy3B,UAAY,EAAIznB,EAAMhQ,KAAKk2B,SAErDl2B,KAAK2Z,mBAAqB,EAC1B,MACF,KAAK,EAEH,GACE,OAAQ3J,GACN,KAAK,GACHhQ,KAAKk2B,QAAQF,SAAS,GACtB,MACF,KAAK,GACHh2B,KAAKk2B,QAAQoD,aAAa,GAC1B,MACF,QACEt5B,KAAKk2B,QAAQqD,SAASvpB,EAAO,aAExBxP,EAAIG,IAAWqP,EAAO9J,EAAK1F,IAAM,IAAQwP,EAAO,IAC3DxP,IACA,MACF,KAAK,EACHR,KAAKy3B,WAAa,EAClBz3B,KAAKy3B,UAAYznB,EACjB,MACF,KAAK,GAGH,IAFA,IAAMwpB,EAAcx5B,KAAKk4B,aAAal4B,KAAKy3B,UAAY,EAAIznB,GACvDypB,EAAKD,EAAcA,EAAY74B,OAAS,GAAK,EAC1C84B,GAAM,IAIW,KADtB7D,EAAgB4D,EAAYC,MAHdA,IAMP,GAAI7D,aAAyBnf,QAElC,OADAzW,KAAKsW,eAAe,EAAqBkjB,EAAaC,EAAIpC,EAAY72B,GAC/Do1B,EAGP6D,EAAK,GACPz5B,KAAK63B,cAAc73B,KAAKy3B,UAAY,EAAIznB,GAE1ChQ,KAAK2Z,mBAAqB,EAC1B,MACF,KAAK,GACH3Z,KAAKk2B,QAAQjtB,QACbjJ,KAAKk2B,QAAQF,SAAS,GACtBh2B,KAAKy3B,SAAW,EAChB,MACF,KAAK,GACHz3B,KAAKq4B,WAAWlsB,KAAKnM,KAAKy3B,UAAY,EAAIznB,EAAMhQ,KAAKk2B,SACrD,MACF,KAAK,GAGH,IAAK,IAAI,EAAI11B,EAAI,KAAO,EACtB,GAAI,GAAKG,GAA+B,MAApBqP,EAAO9J,EAAK,KAAyB,KAAT8J,GAA0B,KAATA,GAAkBA,EAAO,KAAQA,EAAO0mB,EAAsB,CAC7H12B,KAAKq4B,WAAWhsB,IAAInG,EAAM1F,EAAG,GAC7BA,EAAI,EAAI,EACR,MAGJ,MACF,KAAK,GAEH,GADAo1B,EAAgB51B,KAAKq4B,WAAW5rB,OAAgB,KAATuD,GAA0B,KAATA,GAGtD,OADAhQ,KAAKsW,eAAe,EAAqB,GAAI,EAAG+gB,EAAY72B,GACrDo1B,EAEI,KAAT5lB,IAAeqnB,GAAc,GACjCr3B,KAAKk2B,QAAQjtB,QACbjJ,KAAKk2B,QAAQF,SAAS,GACtBh2B,KAAKy3B,SAAW,EAChBz3B,KAAK2Z,mBAAqB,EAC1B,MACF,KAAK,EACH3Z,KAAKm4B,WAAW12B,QAChB,MACF,KAAK,EAEH,IAAK,IAAI,EAAIjB,EAAI,GAAK,IACpB,GAAI,GAAKG,IAAWqP,EAAO9J,EAAK,IAAM,IAAS8J,EAAO,KAAQA,EAAO0mB,EAAsB,CACzF12B,KAAKm4B,WAAW9rB,IAAInG,EAAM1F,EAAG,GAC7BA,EAAI,EAAI,EACR,MAGJ,MACF,KAAK,EAEH,GADAo1B,EAAgB51B,KAAKm4B,WAAW7rB,IAAa,KAAT0D,GAA0B,KAATA,GAGnD,OADAhQ,KAAKsW,eAAe,EAAqB,GAAI,EAAG+gB,EAAY72B,GACrDo1B,EAEI,KAAT5lB,IAAeqnB,GAAc,GACjCr3B,KAAKk2B,QAAQjtB,QACbjJ,KAAKk2B,QAAQF,SAAS,GACtBh2B,KAAKy3B,SAAW,EAChBz3B,KAAK2Z,mBAAqB,EAG9B3Z,KAAKw3B,aAA4B,GAAbH,IAG1B,EArjBA,CAA0C,EAAAhuB,YAA7B,EAAAkE,qBAAAA,G,+FChOb,aACA,SAGMsnB,EAAgC,GAEtC,0BACU,KAAA6E,OAAS,EACT,KAAA1E,QAAUH,EACV,KAAArH,KAAO,EACP,KAAAsH,UAA6C7K,OAAO8K,OAAO,MAC3D,KAAAG,WAAqC,aACrC,KAAAC,OAA+B,CACrCjmB,QAAQ,EACRkmB,aAAc,EACdC,aAAa,GAwKjB,OArKS,YAAAC,gBAAP,SAAuB1sB,EAAe2sB,QACNz0B,IAA1Bd,KAAK80B,UAAUlsB,KACjB5I,KAAK80B,UAAUlsB,GAAS,IAE1B,IAAM4sB,EAAcx1B,KAAK80B,UAAUlsB,GAEnC,OADA4sB,EAAYr0B,KAAKo0B,GACV,CACL7uB,QAAS,WACP,IAAM+uB,EAAeD,EAAYzZ,QAAQwZ,IACnB,IAAlBE,GACFD,EAAYh0B,OAAOi0B,EAAc,MAKlC,YAAAC,aAAP,SAAoB9sB,GACd5I,KAAK80B,UAAUlsB,WAAe5I,KAAK80B,UAAUlsB,IAE5C,YAAA+sB,mBAAP,SAA0BJ,GACxBv1B,KAAKk1B,WAAaK,GAGb,YAAA7uB,QAAP,WACE1G,KAAK80B,UAAY7K,OAAO8K,OAAO,MAC/B/0B,KAAKk1B,WAAa,aAClBl1B,KAAKg1B,QAAUH,GAGV,YAAA5rB,MAAP,WAEE,GAAoB,IAAhBjJ,KAAK05B,OACP,IAAK,IAAIre,EAAIrb,KAAKm1B,OAAOjmB,OAASlP,KAAKm1B,OAAOC,aAAe,EAAIp1B,KAAKg1B,QAAQr0B,OAAS,EAAG0a,GAAK,IAAKA,EAClGrb,KAAKg1B,QAAQ3Z,GAAG/O,KAAI,GAGxBtM,KAAKm1B,OAAOjmB,QAAS,EACrBlP,KAAKg1B,QAAUH,EACf70B,KAAKwtB,KAAO,EACZxtB,KAAK05B,OAAS,GAGR,YAAAC,OAAR,WAEE,GADA35B,KAAKg1B,QAAUh1B,KAAK80B,UAAU90B,KAAKwtB,MAAQqH,EACtC70B,KAAKg1B,QAAQr0B,OAGhB,IAAK,IAAI0a,EAAIrb,KAAKg1B,QAAQr0B,OAAS,EAAG0a,GAAK,EAAGA,IAC5Crb,KAAKg1B,QAAQ3Z,GAAG5Z,aAHlBzB,KAAKk1B,WAAWl1B,KAAKwtB,IAAK,UAQtB,YAAAoM,KAAR,SAAa1zB,EAAmBzE,EAAe6K,GAC7C,GAAKtM,KAAKg1B,QAAQr0B,OAGhB,IAAK,IAAI0a,EAAIrb,KAAKg1B,QAAQr0B,OAAS,EAAG0a,GAAK,EAAGA,IAC5Crb,KAAKg1B,QAAQ3Z,GAAGhP,IAAInG,EAAMzE,EAAO6K,QAHnCtM,KAAKk1B,WAAWl1B,KAAKwtB,IAAK,OAAO,IAAA7gB,eAAczG,EAAMzE,EAAO6K,KAQzD,YAAA7K,MAAP,WAEEzB,KAAKiJ,QACLjJ,KAAK05B,OAAS,GAUT,YAAArtB,IAAP,SAAWnG,EAAmBzE,EAAe6K,GAC3C,GAAoB,IAAhBtM,KAAK05B,OAAT,CAGA,GAAoB,IAAhB15B,KAAK05B,OACP,KAAOj4B,EAAQ6K,GAAK,CAClB,IAAM0D,EAAO9J,EAAKzE,KAClB,GAAa,KAATuO,EAAe,CACjBhQ,KAAK05B,OAAS,EACd15B,KAAK25B,SACL,MAEF,GAAI3pB,EAAO,IAAQ,GAAOA,EAExB,YADAhQ,KAAK05B,OAAS,IAGE,IAAd15B,KAAKwtB,MACPxtB,KAAKwtB,IAAM,GAEbxtB,KAAKwtB,IAAiB,GAAXxtB,KAAKwtB,IAAWxd,EAAO,GAGlB,IAAhBhQ,KAAK05B,QAA+BptB,EAAM7K,EAAQ,GACpDzB,KAAK45B,KAAK1zB,EAAMzE,EAAO6K,KASpB,YAAAA,IAAP,SAAWI,EAAkBvG,GAC3B,QAD2B,IAAAA,IAAAA,GAAA,GACP,IAAhBnG,KAAK05B,OAAT,CAIA,GAAoB,IAAhB15B,KAAK05B,OAQP,GAJoB,IAAhB15B,KAAK05B,QACP15B,KAAK25B,SAGF35B,KAAKg1B,QAAQr0B,OAEX,CACL,IAAIi1B,GAA4C,EAC5Cva,EAAIrb,KAAKg1B,QAAQr0B,OAAS,EAC1B00B,GAAc,EAOlB,GANIr1B,KAAKm1B,OAAOjmB,SACdmM,EAAIrb,KAAKm1B,OAAOC,aAAe,EAC/BQ,EAAgBzvB,EAChBkvB,EAAcr1B,KAAKm1B,OAAOE,YAC1Br1B,KAAKm1B,OAAOjmB,QAAS,IAElBmmB,IAAiC,IAAlBO,EAAyB,CAC3C,KAAOva,GAAK,IAEY,KADtBua,EAAgB51B,KAAKg1B,QAAQ3Z,GAAG/O,IAAII,IADvB2O,IAIN,GAAIua,aAAyBnf,QAIlC,OAHAzW,KAAKm1B,OAAOjmB,QAAS,EACrBlP,KAAKm1B,OAAOC,aAAe/Z,EAC3Brb,KAAKm1B,OAAOE,aAAc,EACnBO,EAGXva,IAKF,KAAOA,GAAK,EAAGA,IAEb,IADAua,EAAgB51B,KAAKg1B,QAAQ3Z,GAAG/O,KAAI,cACPmK,QAI3B,OAHAzW,KAAKm1B,OAAOjmB,QAAS,EACrBlP,KAAKm1B,OAAOC,aAAe/Z,EAC3Brb,KAAKm1B,OAAOE,aAAc,EACnBO,OAlCX51B,KAAKk1B,WAAWl1B,KAAKwtB,IAAK,MAAO9gB,GAwCrC1M,KAAKg1B,QAAUH,EACf70B,KAAKwtB,KAAO,EACZxtB,KAAK05B,OAAS,IAElB,EAjLA,GAAa,EAAAtB,UAAAA,EAuLb,iBAIE,WAAoBnC,GAAA,KAAAA,SAAAA,EAHZ,KAAAhqB,MAAQ,GACR,KAAAkqB,WAAqB,EAwC/B,OApCS,YAAA10B,MAAP,WACEzB,KAAKiM,MAAQ,GACbjM,KAAKm2B,WAAY,GAGZ,YAAA9pB,IAAP,SAAWnG,EAAmBzE,EAAe6K,GACvCtM,KAAKm2B,YAGTn2B,KAAKiM,QAAS,IAAAU,eAAczG,EAAMzE,EAAO6K,GACrCtM,KAAKiM,MAAMtL,OAAS,EAAAi0B,gBACtB50B,KAAKiM,MAAQ,GACbjM,KAAKm2B,WAAY,KAId,YAAA7pB,IAAP,SAAWI,GAAX,WACM0pB,GAAkC,EACtC,GAAIp2B,KAAKm2B,UACPC,GAAM,OACD,GAAI1pB,IACT0pB,EAAMp2B,KAAKi2B,SAASj2B,KAAKiM,kBACNwK,QAGjB,OAAO2f,EAAIpD,MAAK,SAAArc,GAGd,OAFA,EAAK1K,MAAQ,GACb,EAAKkqB,WAAY,EACVxf,KAMb,OAFA3W,KAAKiM,MAAQ,GACbjM,KAAKm2B,WAAY,EACVC,GAEX,EA1CA,GAAa,EAAAvhB,WAAAA,G,6EC5Lb,IAAMglB,EAAY,WAuBlB,aAyCE,WAAmB1V,EAA+B2V,GAChD,QADiB,IAAA3V,IAAAA,EAAA,SAA+B,IAAA2V,IAAAA,EAAA,IAA/B,KAAA3V,UAAAA,EAA+B,KAAA2V,mBAAAA,EAC5CA,EA/Dc,IAgEhB,MAAM,IAAIx4B,MAAM,mDAElBtB,KAAKoM,OAAS,IAAI2tB,WAAW5V,GAC7BnkB,KAAKW,OAAS,EACdX,KAAKg6B,WAAa,IAAID,WAAWD,GACjC95B,KAAKi6B,iBAAmB,EACxBj6B,KAAKk6B,cAAgB,IAAIC,YAAYhW,GACrCnkB,KAAKo6B,eAAgB,EACrBp6B,KAAKq6B,kBAAmB,EACxBr6B,KAAKs6B,aAAc,EAkJvB,OApLgB,EAAAC,UAAd,SAAwBC,GACtB,IAAMpuB,EAAS,IAAI2pB,EACnB,IAAKyE,EAAO75B,OACV,OAAOyL,EAGT,IAAK,IAAI5L,EAAKN,MAAMsC,QAAQg4B,EAAO,IAAO,EAAI,EAAGh6B,EAAIg6B,EAAO75B,SAAUH,EAAG,CACvE,IAAMU,EAAQs5B,EAAOh6B,GACrB,GAAIN,MAAMsC,QAAQtB,GAChB,IAAK,IAAIu5B,EAAI,EAAGA,EAAIv5B,EAAMP,SAAU85B,EAClCruB,EAAOktB,YAAYp4B,EAAMu5B,SAG3BruB,EAAO4pB,SAAS90B,GAGpB,OAAOkL,GAwBF,YAAAhK,MAAP,WACE,IAAMs4B,EAAY,IAAI3E,EAAO/1B,KAAKmkB,UAAWnkB,KAAK85B,oBASlD,OARAY,EAAUtuB,OAAOnL,IAAIjB,KAAKoM,QAC1BsuB,EAAU/5B,OAASX,KAAKW,OACxB+5B,EAAUV,WAAW/4B,IAAIjB,KAAKg6B,YAC9BU,EAAUT,iBAAmBj6B,KAAKi6B,iBAClCS,EAAUR,cAAcj5B,IAAIjB,KAAKk6B,eACjCQ,EAAUN,cAAgBp6B,KAAKo6B,cAC/BM,EAAUL,iBAAmBr6B,KAAKq6B,iBAClCK,EAAUJ,YAAct6B,KAAKs6B,YACtBI,GASF,YAAA7qB,QAAP,WAEE,IADA,IAAM8G,EAAmB,GAChBnW,EAAI,EAAGA,EAAIR,KAAKW,SAAUH,EAAG,CACpCmW,EAAIxV,KAAKnB,KAAKoM,OAAO5L,IACrB,IAAMiB,EAAQzB,KAAKk6B,cAAc15B,IAAM,EACjC8L,EAA8B,IAAxBtM,KAAKk6B,cAAc15B,GAC3B8L,EAAM7K,EAAQ,GAChBkV,EAAIxV,KAAKjB,MAAMy6B,UAAU9G,MAAM9pB,KAAK/J,KAAKg6B,WAAYv4B,EAAO6K,IAGhE,OAAOqK,GAMF,YAAA1N,MAAP,WACEjJ,KAAKW,OAAS,EACdX,KAAKi6B,iBAAmB,EACxBj6B,KAAKo6B,eAAgB,EACrBp6B,KAAKq6B,kBAAmB,EACxBr6B,KAAKs6B,aAAc,GAUd,YAAAtE,SAAP,SAAgB90B,GAEd,GADAlB,KAAKs6B,aAAc,EACft6B,KAAKW,QAAUX,KAAKmkB,UACtBnkB,KAAKo6B,eAAgB,MADvB,CAIA,GAAIl5B,GAAS,EACX,MAAM,IAAII,MAAM,yCAElBtB,KAAKk6B,cAAcl6B,KAAKW,QAAUX,KAAKi6B,kBAAoB,EAAIj6B,KAAKi6B,iBACpEj6B,KAAKoM,OAAOpM,KAAKW,UAAYO,EAAQ24B,EAAYA,EAAY34B,IAUxD,YAAAo4B,YAAP,SAAmBp4B,GAEjB,GADAlB,KAAKs6B,aAAc,EACdt6B,KAAKW,OAGV,GAAIX,KAAKo6B,eAAiBp6B,KAAKi6B,kBAAoBj6B,KAAK85B,mBACtD95B,KAAKq6B,kBAAmB,MAD1B,CAIA,GAAIn5B,GAAS,EACX,MAAM,IAAII,MAAM,yCAElBtB,KAAKg6B,WAAWh6B,KAAKi6B,oBAAsB/4B,EAAQ24B,EAAYA,EAAY34B,EAC3ElB,KAAKk6B,cAAcl6B,KAAKW,OAAS,OAM5B,YAAA8c,aAAP,SAAoBqB,GAClB,OAAmC,IAA1B9e,KAAKk6B,cAAcpb,KAAgB9e,KAAKk6B,cAAcpb,IAAQ,GAAK,GAQvE,YAAAnB,aAAP,SAAoBmB,GAClB,IAAMrd,EAAQzB,KAAKk6B,cAAcpb,IAAQ,EACnCxS,EAAgC,IAA1BtM,KAAKk6B,cAAcpb,GAC/B,OAAIxS,EAAM7K,EAAQ,EACTzB,KAAKg6B,WAAWxtB,SAAS/K,EAAO6K,GAElC,MAOF,YAAAsuB,gBAAP,WAEE,IADA,IAAM3jB,EAAsC,GACnCzW,EAAI,EAAGA,EAAIR,KAAKW,SAAUH,EAAG,CACpC,IAAMiB,EAAQzB,KAAKk6B,cAAc15B,IAAM,EACjC8L,EAA8B,IAAxBtM,KAAKk6B,cAAc15B,GAC3B8L,EAAM7K,EAAQ,IAChBwV,EAAOzW,GAAKR,KAAKg6B,WAAWnG,MAAMpyB,EAAO6K,IAG7C,OAAO2K,GAOF,YAAAsiB,SAAP,SAAgBr4B,GACd,IAAIP,EACJ,KAAIX,KAAKo6B,iBACFz5B,EAASX,KAAKs6B,YAAct6B,KAAKi6B,iBAAmBj6B,KAAKW,SAC1DX,KAAKs6B,aAAet6B,KAAKq6B,kBAF/B,CAOA,IAAMQ,EAAQ76B,KAAKs6B,YAAct6B,KAAKg6B,WAAah6B,KAAKoM,OAClD0uB,EAAMD,EAAMl6B,EAAS,GAC3Bk6B,EAAMl6B,EAAS,IAAMm6B,EAAMr6B,KAAKC,IAAU,GAANo6B,EAAW55B,EAAO24B,GAAa34B,IAEvE,EAtMA,GAAa,EAAA60B,OAAAA,G,mFCjBb,iBAGE,aAFU,KAAAgF,QAA0B,GAyCtC,OApCS,YAAAr0B,QAAP,WACE,IAAK,IAAIlG,EAAIR,KAAK+6B,QAAQp6B,OAAS,EAAGH,GAAK,EAAGA,IAC5CR,KAAK+6B,QAAQv6B,GAAGw6B,SAASt0B,WAItB,YAAAu0B,UAAP,SAAiBC,EAAoBF,GAArC,WACQG,EAA4B,CAChCH,SAAQ,EACRt0B,QAASs0B,EAASt0B,QAClBgnB,YAAY,GAEd1tB,KAAK+6B,QAAQ55B,KAAKg6B,GAClBH,EAASt0B,QAAU,WAAM,SAAK00B,qBAAqBD,IACnDH,EAASK,SAASH,IAGZ,YAAAE,qBAAR,SAA6BD,GAC3B,IAAIA,EAAYzN,WAAhB,CAKA,IADA,IAAI1sB,GAAS,EACJR,EAAI,EAAGA,EAAIR,KAAK+6B,QAAQp6B,OAAQH,IACvC,GAAIR,KAAK+6B,QAAQv6B,KAAO26B,EAAa,CACnCn6B,EAAQR,EACR,MAGJ,IAAe,IAAXQ,EACF,MAAM,IAAIM,MAAM,uDAElB65B,EAAYzN,YAAa,EACzByN,EAAYz0B,QAAQmwB,MAAMsE,EAAYH,UACtCh7B,KAAK+6B,QAAQv5B,OAAOR,EAAO,KAE/B,EA1CA,GAAa,EAAAs6B,aAAAA,G,sFCNb,aACA,SAEA,aACE,WACU9R,EACQtK,GADR,KAAAsK,QAAAA,EACQ,KAAAtK,KAAAA,EAqBpB,OAlBS,YAAAqc,KAAP,SAAY71B,GAEV,OADA1F,KAAKwpB,QAAU9jB,EACR1F,MAGT,sBAAW,sBAAO,C,IAAlB,WAA+B,OAAOA,KAAKwpB,QAAQjiB,G,gCACnD,sBAAW,sBAAO,C,IAAlB,WAA+B,OAAOvH,KAAKwpB,QAAQliB,G,gCACnD,sBAAW,wBAAS,C,IAApB,WAAiC,OAAOtH,KAAKwpB,QAAQ7jB,O,gCACrD,sBAAW,oBAAK,C,IAAhB,WAA6B,OAAO3F,KAAKwpB,QAAQlR,O,gCACjD,sBAAW,qBAAM,C,IAAjB,WAA8B,OAAOtY,KAAKwpB,QAAQnR,MAAM1X,Q,gCACjD,YAAA66B,QAAP,SAAej0B,GACb,IAAMe,EAAOtI,KAAKwpB,QAAQnR,MAAMtX,IAAIwG,GACpC,GAAKe,EAGL,OAAO,IAAI,EAAAmzB,kBAAkBnzB,IAExB,YAAA+Q,YAAP,WAAuC,OAAO,IAAI,EAAAvL,UACpD,EAxBA,GAAa,EAAA4tB,cAAAA,G,0FCLb,aAIA,aACE,WAAoBC,GAAA,KAAAA,MAAAA,EAkBtB,OAhBE,sBAAW,wBAAS,C,IAApB,WAAkC,OAAO37B,KAAK27B,MAAM7zB,W,gCACpD,sBAAW,qBAAM,C,IAAjB,WAA8B,OAAO9H,KAAK27B,MAAMh7B,Q,gCACzC,YAAAi7B,QAAP,SAAet0B,EAAWkY,GACxB,KAAIlY,EAAI,GAAKA,GAAKtH,KAAK27B,MAAMh7B,QAI7B,OAAI6e,GACFxf,KAAK27B,MAAMliB,SAASnS,EAAGkY,GAChBA,GAEFxf,KAAK27B,MAAMliB,SAASnS,EAAG,IAAI,EAAAwG,WAE7B,YAAAsa,kBAAP,SAAyBN,EAAqB+T,EAAsBC,GAClE,OAAO97B,KAAK27B,MAAMvT,kBAAkBN,EAAW+T,EAAaC,IAEhE,EAnBA,GAAa,EAAAL,kBAAAA,G,2FCHb,aACA,SAGA,aAME,WAAoBM,GAApB,WAAoB,KAAAA,MAAAA,EAHZ,KAAAC,gBAAkB,IAAI,EAAAn8B,aAI5BG,KAAK8sB,QAAU,IAAI,EAAA4O,cAAc17B,KAAK+7B,MAAMt1B,QAAQw1B,OAAQ,UAC5Dj8B,KAAKk8B,WAAa,IAAI,EAAAR,cAAc17B,KAAK+7B,MAAMt1B,QAAQ01B,IAAK,aAC5Dn8B,KAAK+7B,MAAMt1B,QAAQ+I,kBAAiB,WAAM,SAAKwsB,gBAAgB56B,KAAK,EAAKg7B,WAa7E,OAlBE,sBAAW,6BAAc,C,IAAzB,WAAkD,OAAOp8B,KAAKg8B,gBAAgB37B,O,gCAO9E,sBAAW,qBAAM,C,IAAjB,WACE,GAAIL,KAAK+7B,MAAMt1B,QAAQ21B,SAAWp8B,KAAK+7B,MAAMt1B,QAAQw1B,OAAU,OAAOj8B,KAAKi8B,OAC3E,GAAIj8B,KAAK+7B,MAAMt1B,QAAQ21B,SAAWp8B,KAAK+7B,MAAMt1B,QAAQ01B,IAAO,OAAOn8B,KAAKq8B,UACxE,MAAM,IAAI/6B,MAAM,kD,gCAElB,sBAAW,qBAAM,C,IAAjB,WACE,OAAOtB,KAAK8sB,QAAQyO,KAAKv7B,KAAK+7B,MAAMt1B,QAAQw1B,S,gCAE9C,sBAAW,wBAAS,C,IAApB,WACE,OAAOj8B,KAAKk8B,WAAWX,KAAKv7B,KAAK+7B,MAAMt1B,QAAQ01B,M,gCAEnD,EAtBA,GAAa,EAAAG,mBAAAA,G,gFCDb,iBACE,WAAoBP,GAAA,KAAAA,MAAAA,EA0BtB,OAxBS,YAAArzB,mBAAP,SAA0BF,EAAyB1B,GACjD,OAAO9G,KAAK+7B,MAAMrzB,mBAAmBF,GAAI,SAAC4D,GAAoB,OAAAtF,EAASsF,EAAOyD,eAEzE,YAAA0sB,cAAP,SAAqB/zB,EAAyB1B,GAC5C,OAAO9G,KAAK0I,mBAAmBF,EAAI1B,IAE9B,YAAA2B,mBAAP,SAA0BD,EAAyB1B,GACjD,OAAO9G,KAAK+7B,MAAMtzB,mBAAmBD,GAAI,SAACtC,EAAckG,GAAoB,OAAAtF,EAASZ,EAAMkG,EAAOyD,eAE7F,YAAA2sB,cAAP,SAAqBh0B,EAAyB1B,GAC5C,OAAO9G,KAAKyI,mBAAmBD,EAAI1B,IAE9B,YAAAyB,mBAAP,SAA0BC,EAAyB+sB,GACjD,OAAOv1B,KAAK+7B,MAAMxzB,mBAAmBC,EAAI+sB,IAEpC,YAAAkH,cAAP,SAAqBj0B,EAAyB+sB,GAC5C,OAAOv1B,KAAKuI,mBAAmBC,EAAI+sB,IAE9B,YAAA5sB,mBAAP,SAA0BC,EAAe9B,GACvC,OAAO9G,KAAK+7B,MAAMpzB,mBAAmBC,EAAO9B,IAEvC,YAAA41B,cAAP,SAAqB9zB,EAAe9B,GAClC,OAAO9G,KAAK2I,mBAAmBC,EAAO9B,IAE1C,EA3BA,GAAa,EAAA61B,UAAAA,G,gFCDb,iBACE,WAAoBZ,GAAA,KAAAA,MAAAA,EAiBtB,OAfS,YAAAv4B,SAAP,SAAgBo5B,GACd58B,KAAK+7B,MAAMt3B,eAAejB,SAASo5B,IAGrC,sBAAW,uBAAQ,C,IAAnB,WACE,OAAO58B,KAAK+7B,MAAMt3B,eAAeo4B,U,gCAGnC,sBAAW,4BAAa,C,IAAxB,WACE,OAAO78B,KAAK+7B,MAAMt3B,eAAeq4B,e,IAGnC,SAAyBzK,GACvBryB,KAAK+7B,MAAMt3B,eAAeq4B,cAAgBzK,G,gCAE9C,EAlBA,GAAa,EAAA0K,WAAAA,G,0/BCHb,aACA,SAEA,SACA,SAGa,EAAAr1B,aAAe,EACf,EAAAC,aAAe,EAE5B,kBAmBE,WAC2BqE,GAD3B,MAGE,cAAO,K,OAFkB,EAAAA,gBAAAA,EAbpB,EAAAgxB,iBAA2B,EAE1B,EAAAj6B,UAAY,IAAI,EAAAlD,aAEhB,EAAAmD,UAAY,IAAI,EAAAnD,aAYtB,EAAK0G,KAAO9F,KAAKgH,IAAIuE,EAAgBlD,WAAWvC,MAAQ,EAAG,EAAAmB,cAC3D,EAAKlB,KAAO/F,KAAKgH,IAAIuE,EAAgBlD,WAAWtC,MAAQ,EAAG,EAAAmB,cAC3D,EAAKlB,QAAU,IAAI,EAAAwmB,UAAUjhB,EAAiB,G,EAgJlD,OAzKmC,OAUjC,sBAAW,uBAAQ,C,IAAnB,WAAgE,OAAOhM,KAAK+C,UAAU1C,O,gCAEtF,sBAAW,uBAAQ,C,IAAnB,WAAwC,OAAOL,KAAKgD,UAAU3C,O,gCAE9D,sBAAW,qBAAM,C,IAAjB,WAA+B,OAAOL,KAAKyG,QAAQ21B,Q,gCAc5C,YAAA11B,QAAP,WACE,YAAMA,QAAO,WACb1G,KAAKyG,QAAQC,WAGR,YAAAW,OAAP,SAAcd,EAAcC,GAC1BxG,KAAKuG,KAAOA,EACZvG,KAAKwG,KAAOA,EACZxG,KAAKyG,QAAQY,OAAOd,EAAMC,GAC1BxG,KAAKyG,QAAQud,cAAchkB,KAAKuG,MAChCvG,KAAK+C,UAAU3B,KAAK,CAAEmF,KAAI,EAAEC,KAAI,KAG3B,YAAAyC,MAAP,WACEjJ,KAAKyG,QAAQwC,QACbjJ,KAAKg9B,iBAAkB,GAOlB,YAAAp1B,OAAP,SAAcC,EAA2BC,QAAA,IAAAA,IAAAA,GAAA,GACvC,IAEI0e,EAFE9gB,EAAS1F,KAAK0F,QAGpB8gB,EAAUxmB,KAAKi9B,mBACCzW,EAAQ7lB,SAAWX,KAAKuG,MAAQigB,EAAQgE,MAAM,KAAO3iB,EAAU6Q,IAAM8N,EAAQiE,MAAM,KAAO5iB,EAAU8Q,KAClH6N,EAAU9gB,EAAOgW,aAAa7T,EAAWC,GACzC9H,KAAKi9B,iBAAmBzW,GAE1BA,EAAQ1e,UAAYA,EAEpB,IAAMo1B,EAASx3B,EAAO4S,MAAQ5S,EAAOI,UAC/Bq3B,EAAYz3B,EAAO4S,MAAQ5S,EAAOK,aAExC,GAAyB,IAArBL,EAAOI,UAAiB,CAE1B,IAAMs3B,EAAsB13B,EAAO2S,MAAMglB,OAGrCF,IAAcz3B,EAAO2S,MAAM1X,OAAS,EAClCy8B,EACF13B,EAAO2S,MAAMhX,UAAU4pB,SAASzE,GAEhC9gB,EAAO2S,MAAMlX,KAAKqlB,EAAQpkB,SAG5BsD,EAAO2S,MAAM7W,OAAO27B,EAAY,EAAG,EAAG3W,EAAQpkB,SAI3Cg7B,EASCp9B,KAAKg9B,kBACPt3B,EAAOC,MAAQlF,KAAKgH,IAAI/B,EAAOC,MAAQ,EAAG,KAT5CD,EAAO4S,QAEFtY,KAAKg9B,iBACRt3B,EAAOC,aASN,CAGL,IAAM2Z,EAAqB6d,EAAYD,EAAS,EAChDx3B,EAAO2S,MAAMrW,cAAck7B,EAAS,EAAG5d,EAAqB,GAAI,GAChE5Z,EAAO2S,MAAMpX,IAAIk8B,EAAW3W,EAAQpkB,SAKjCpC,KAAKg9B,kBACRt3B,EAAOC,MAAQD,EAAO4S,OAGxBtY,KAAKgD,UAAU5B,KAAKsE,EAAOC,QAUtB,YAAAoC,YAAP,SAAmBC,EAAcC,EAA+BrC,GAC9D,IAAMF,EAAS1F,KAAK0F,OACpB,GAAIsC,EAAO,EAAG,CACZ,GAAqB,IAAjBtC,EAAOC,MACT,OAEF3F,KAAKg9B,iBAAkB,OACdh1B,EAAOtC,EAAOC,OAASD,EAAO4S,QACvCtY,KAAKg9B,iBAAkB,GAGzB,IAAMM,EAAW53B,EAAOC,MACxBD,EAAOC,MAAQlF,KAAKgH,IAAIhH,KAAKC,IAAIgF,EAAOC,MAAQqC,EAAMtC,EAAO4S,OAAQ,GAGjEglB,IAAa53B,EAAOC,QAInBsC,GACHjI,KAAKgD,UAAU5B,KAAKsE,EAAOC,SAQxB,YAAAuC,YAAP,SAAmBC,GACjBnI,KAAK+H,YAAYI,GAAanI,KAAKwG,KAAO,KAMrC,YAAA4B,YAAP,WACEpI,KAAK+H,aAAa/H,KAAK0F,OAAOC,QAMzB,YAAA1B,eAAP,WACEjE,KAAK+H,YAAY/H,KAAK0F,OAAO4S,MAAQtY,KAAK0F,OAAOC,QAG5C,YAAA0C,aAAP,SAAoBC,GAClB,IAAMi1B,EAAej1B,EAAOtI,KAAK0F,OAAOC,MACnB,IAAjB43B,GACFv9B,KAAK+H,YAAYw1B,IAtKG,GAoBrB,MAAAj6B,kBApBQI,GAAb,CAAmC,EAAA2F,YAAtB,EAAA3F,cAAAA,G,qFCPb,8BAIS,KAAA85B,OAAiB,EAEhB,KAAAC,UAAsC,GAmBhD,OAjBS,YAAAx0B,MAAP,WACEjJ,KAAK4X,aAAU9W,EACfd,KAAKy9B,UAAY,GACjBz9B,KAAKw9B,OAAS,GAGT,YAAA5nB,UAAP,SAAiB+e,GACf30B,KAAKw9B,OAAS7I,EACd30B,KAAK4X,QAAU5X,KAAKy9B,UAAU9I,IAGzB,YAAA1Y,YAAP,SAAmB0Y,EAAW/c,GAC5B5X,KAAKy9B,UAAU9I,GAAK/c,EAChB5X,KAAKw9B,SAAW7I,IAClB30B,KAAK4X,QAAUA,IAGrB,EAzBA,GAAa,EAAA/S,eAAAA,G,ogBCJb,aACA,SAMM64B,EAAyD,CAM7DC,KAAM,CACJC,OAAQ,EACRC,SAAU,WAAM,WAOlBC,IAAK,CACHF,OAAQ,EACRC,SAAU,SAAC3zB,GAET,OAAiB,IAAbA,EAAE6zB,QAAiD,IAAb7zB,EAAEgG,SAI5ChG,EAAE8zB,MAAO,EACT9zB,EAAEiyB,KAAM,EACRjyB,EAAEyU,OAAQ,GACH,KAQXsf,MAAO,CACLL,OAAQ,GACRC,SAAU,SAAC3zB,GAET,OAAiB,KAAbA,EAAEgG,SAWVguB,KAAM,CACJN,OAAQ,GACRC,SAAU,SAAC3zB,GAET,OAAiB,KAAbA,EAAEgG,QAAgD,IAAbhG,EAAE6zB,SAW/CI,IAAK,CACHP,OACE,GAEFC,SAAU,SAAC3zB,GAAuB,YAWtC,SAASk0B,EAAUl0B,EAAoBm0B,GACrC,IAAIruB,GAAQ9F,EAAE8zB,KAAO,GAAiB,IAAM9zB,EAAEyU,MAAQ,EAAkB,IAAMzU,EAAEiyB,IAAM,EAAgB,GAoBtG,OAnBiB,IAAbjyB,EAAE6zB,QACJ/tB,GAAQ,GACRA,GAAQ9F,EAAEgG,SAEVF,GAAmB,EAAX9F,EAAE6zB,OACK,EAAX7zB,EAAE6zB,SACJ/tB,GAAQ,IAEK,EAAX9F,EAAE6zB,SACJ/tB,GAAQ,KAEO,KAAb9F,EAAEgG,OACJF,GAAQ,GACc,IAAb9F,EAAEgG,QAAkCmuB,IAG7CruB,GAAQ,IAGLA,EAGT,IAAMsuB,EAAItlB,OAAOC,aAKXslB,EAAwD,CAM5DC,QAAS,SAACt0B,GACR,IAAMkC,EAAS,CAACgyB,EAAUl0B,GAAG,GAAS,GAAIA,EAAEu0B,IAAM,GAAIv0B,EAAEqR,IAAM,IAK9D,OAAInP,EAAO,GAAK,KAAOA,EAAO,GAAK,KAAOA,EAAO,GAAK,IAC7C,GAEF,MAASkyB,EAAElyB,EAAO,IAAMkyB,EAAElyB,EAAO,IAAMkyB,EAAElyB,EAAO,KAOzDsyB,IAAK,SAACx0B,GACJ,IAAMd,EAAsB,IAAbc,EAAEgG,QAA8C,IAAbhG,EAAE6zB,OAAoC,IAAM,IAC9F,MAAO,MAASK,EAAUl0B,GAAG,GAAK,IAAIA,EAAEu0B,IAAG,IAAIv0B,EAAEqR,IAAMnS,IAoB3D,aAQE,WACmC7F,EACFwI,GADE,KAAAxI,eAAAA,EACF,KAAAwI,aAAAA,EATzB,KAAA4yB,WAAmD,GACnD,KAAAC,WAAkD,GAClD,KAAAC,gBAA0B,GAC1B,KAAAC,gBAA0B,GAC1B,KAAAC,kBAAoB,IAAI,EAAAl/B,aACxB,KAAAm/B,WAAqC,KAO3C,IAAmB,UAAA/U,OAAOe,KAAK0S,GAAZ,eAAgC,CAA9C,IAAM,EAAI,KAAoC19B,KAAKi/B,YAAY,EAAMvB,EAAkB,IAC5F,IAAmB,UAAAzT,OAAOe,KAAKuT,GAAZ,eAAgC,CAA9C,IAAM,EAAI,KAAoCv+B,KAAKk/B,YAAY,EAAMX,EAAkB,IAE5Fv+B,KAAKiJ,QAiIT,OA9HS,YAAAg2B,YAAP,SAAmBE,EAAcC,GAC/Bp/B,KAAK2+B,WAAWQ,GAAQC,GAGnB,YAAAF,YAAP,SAAmBC,EAAcE,GAC/Br/B,KAAK4+B,WAAWO,GAAQE,GAG1B,sBAAW,6BAAc,C,IAAzB,WACE,OAAOr/B,KAAK6+B,iB,IAOd,SAA0BM,GACxB,IAAKn/B,KAAK2+B,WAAWQ,GACnB,MAAM,IAAI79B,MAAM,qBAAqB69B,EAAI,KAE3Cn/B,KAAK6+B,gBAAkBM,EACvBn/B,KAAK++B,kBAAkB39B,KAAKpB,KAAK2+B,WAAWQ,GAAMvB,S,gCATpD,sBAAW,mCAAoB,C,IAA/B,WACE,OAAwD,IAAjD59B,KAAK2+B,WAAW3+B,KAAK6+B,iBAAiBjB,Q,gCAW/C,sBAAW,6BAAc,C,IAAzB,WACE,OAAO59B,KAAK8+B,iB,IAGd,SAA0BK,GACxB,IAAKn/B,KAAK4+B,WAAWO,GACnB,MAAM,IAAI79B,MAAM,qBAAqB69B,EAAI,KAE3Cn/B,KAAK8+B,gBAAkBK,G,gCAGlB,YAAAl2B,MAAP,WACEjJ,KAAKoc,eAAiB,OACtBpc,KAAKsc,eAAiB,UACtBtc,KAAKg/B,WAAa,MAMpB,sBAAW,+BAAgB,C,IAA3B,WACE,OAAOh/B,KAAK++B,kBAAkB1+B,O,gCAazB,YAAAi/B,kBAAP,SAAyBp1B,GAEvB,GAAIA,EAAEu0B,IAAM,GAAKv0B,EAAEu0B,KAAOz+B,KAAKuD,eAAegD,MACvC2D,EAAEqR,IAAM,GAAKrR,EAAEqR,KAAOvb,KAAKuD,eAAeiD,KAC/C,OAAO,EAIT,GAAiB,IAAb0D,EAAE6zB,QAAiD,KAAb7zB,EAAEgG,OAC1C,OAAO,EAET,GAAiB,IAAbhG,EAAE6zB,QAAgD,KAAb7zB,EAAEgG,OACzC,OAAO,EAET,GAAiB,IAAbhG,EAAE6zB,SAAkD,IAAb7zB,EAAEgG,QAAgD,IAAbhG,EAAEgG,QAChF,OAAO,EAQT,GAJAhG,EAAEu0B,MACFv0B,EAAEqR,MAGe,KAAbrR,EAAEgG,QAAmClQ,KAAKg/B,YAAch/B,KAAKu/B,eAAev/B,KAAKg/B,WAAY90B,GAC/F,OAAO,EAIT,IAAKlK,KAAK2+B,WAAW3+B,KAAK6+B,iBAAiBhB,SAAS3zB,GAClD,OAAO,EAIT,IAAMs1B,EAASx/B,KAAK4+B,WAAW5+B,KAAK8+B,iBAAiB50B,GAYrD,OAXIs1B,IAE2B,YAAzBx/B,KAAK8+B,gBACP9+B,KAAK+L,aAAa0zB,mBAAmBD,GAErCx/B,KAAK+L,aAAaa,iBAAiB4yB,GAAQ,IAI/Cx/B,KAAKg/B,WAAa90B,GAEX,GAGF,YAAAw1B,cAAP,SAAqB9B,GACnB,MAAO,CACL+B,QAAkB,EAAT/B,GACTgC,MAAgB,EAAThC,GACPiC,QAAkB,EAATjC,GACTkC,QAAkB,EAATlC,GACTmC,SAAmB,GAATnC,KAIN,YAAA2B,eAAR,SAAuBS,EAAqBC,GAC1C,OAAID,EAAGvB,MAAQwB,EAAGxB,KACduB,EAAGzkB,MAAQ0kB,EAAG1kB,KACdykB,EAAGjC,SAAWkC,EAAGlC,QACjBiC,EAAG9vB,SAAW+vB,EAAG/vB,QACjB8vB,EAAGhC,OAASiC,EAAGjC,MACfgC,EAAG7D,MAAQ8D,EAAG9D,KACd6D,EAAGrhB,QAAUshB,EAAGthB,OA9IK,GASxB,MAAAhb,gBACA,MAAAO,eAVQE,GAAb,GAAa,EAAAA,iBAAAA,G,y9BC9Jb,aACA,SAEA,SACA,SAEM87B,EAAwBjW,OAAOC,OAAO,CAC1CjS,YAAY,IAGRkoB,EAA8ClW,OAAOC,OAAO,CAChElO,uBAAuB,EACvBG,mBAAmB,EACnBO,oBAAoB,EACpBlC,QAAQ,EACRN,mBAAmB,EACnBmC,WAAW,EACXrE,YAAY,IAGd,cAkBE,WAEE/T,EACiCV,EACHK,EACIoI,GALpC,MAOE,cAAO,K,OAJ0B,EAAAzI,eAAAA,EACH,EAAAK,YAAAA,EACI,EAAAoI,gBAAAA,EApB7B,EAAAyQ,qBAA+B,EAC/B,EAAAF,gBAA0B,EAOzB,EAAA1Z,QAAU,EAAKW,SAAS,IAAI,EAAA3D,cAE5B,EAAAugC,aAAe,EAAK58B,SAAS,IAAI,EAAA3D,cAEjC,EAAA+C,UAAY,EAAKY,SAAS,IAAI,EAAA3D,cAWpC,EAAKwgC,gBAAkBp8B,EACvB,EAAKT,SAAS,CAAEkD,QAAS,WAAM,SAAK25B,qBAAkBv/B,KACtD,EAAKoX,OAAQ,IAAA9V,OAAM89B,GACnB,EAAKnoB,iBAAkB,IAAA3V,OAAM+9B,G,EAqCjC,OAlEiC,OAY/B,sBAAW,qBAAM,C,IAAjB,WAAsC,OAAOngC,KAAK6C,QAAQxC,O,gCAE1D,sBAAW,0BAAW,C,IAAtB,WAAyC,OAAOL,KAAKogC,aAAa//B,O,gCAElE,sBAAW,uBAAQ,C,IAAnB,WAAwC,OAAOL,KAAK4C,UAAUvC,O,gCAgBvD,YAAA4I,MAAP,WACEjJ,KAAKkY,OAAQ,IAAA9V,OAAM89B,GACnBlgC,KAAK+X,iBAAkB,IAAA3V,OAAM+9B,IAGxB,YAAAvzB,iBAAP,SAAwB1G,EAAco6B,GAEpC,QAFoC,IAAAA,IAAAA,GAAA,IAEhCtgC,KAAKgM,gBAAgBlD,WAAWy3B,aAApC,CAKA,IAAM76B,EAAS1F,KAAKuD,eAAemC,OAC/BA,EAAO4S,QAAU5S,EAAOC,OAC1B3F,KAAKqgC,kBAIHC,GACFtgC,KAAKogC,aAAah/B,OAIpBpB,KAAK4D,YAAYuJ,MAAM,iBAAiBjH,EAAI,KAAK,WAAM,OAAAA,EAAKkR,MAAM,IAAIC,KAAI,SAAAnN,GAAK,OAAAA,EAAEoN,WAAW,SAC5FtX,KAAK6C,QAAQzB,KAAK8E,KAGb,YAAAu5B,mBAAP,SAA0Bv5B,GACpBlG,KAAKgM,gBAAgBlD,WAAWy3B,eAGpCvgC,KAAK4D,YAAYuJ,MAAM,mBAAmBjH,EAAI,KAAK,WAAM,OAAAA,EAAKkR,MAAM,IAAIC,KAAI,SAAAnN,GAAK,OAAAA,EAAEoN,WAAW,SAC9FtX,KAAK4C,UAAUxB,KAAK8E,KAhEA,GAqBnB,MAAAvC,gBACA,MAAAG,aACA,MAAAR,kBAvBQU,GAAb,CAAiC,EAAAqF,YAApB,EAAArF,YAAAA,G,mgBCpBb,aAEA,aASE,WACmCT,GAAA,KAAAA,eAAAA,EAEjCvD,KAAKuX,aAiCT,OAvCE,sBAAW,oBAAK,C,IAAhB,WAA6B,OAAOvX,KAAK25B,Q,gCACzC,sBAAW,kBAAG,C,IAAd,WAA2B,OAAO35B,KAAKwgC,M,gCAQhC,YAAAjpB,WAAP,WACEvX,KAAK25B,OAAS35B,KAAKuD,eAAemC,OAAO6B,EACzCvH,KAAKwgC,KAAOxgC,KAAKuD,eAAemC,OAAO6B,GAGlC,YAAAgR,UAAP,SAAiBhR,GACXA,EAAIvH,KAAK25B,OACX35B,KAAK25B,OAASpyB,EACLA,EAAIvH,KAAKwgC,OAClBxgC,KAAKwgC,KAAOj5B,IAIT,YAAA1B,eAAP,SAAsB46B,EAAYC,GAChC,GAAID,EAAKC,EAAI,CACX,IAAMC,EAAOF,EACbA,EAAKC,EACLA,EAAKC,EAEHF,EAAKzgC,KAAK25B,SACZ35B,KAAK25B,OAAS8G,GAEZC,EAAK1gC,KAAKwgC,OACZxgC,KAAKwgC,KAAOE,IAIT,YAAAhhB,aAAP,WACE1f,KAAK6F,eAAe,EAAG7F,KAAKuD,eAAeiD,KAAO,IA3C1B,GAUvB,MAAA7C,iBAVQY,GAAb,GAAa,EAAAA,gBAAAA,G,uVCIb,aACA,SAEA,aAIE,a,IAAY,sDAFJ,KAAAq8B,SAAW,IAAIC,IAGrB,IAA4B,UAAAC,EAAA,eAAS,CAA1B,WAACt4B,EAAE,KAAEu4B,EAAO,KACrB/gC,KAAKiB,IAAIuH,EAAIu4B,IAqBnB,OAjBS,YAAA9/B,IAAP,SAAcuH,EAA2BwyB,GACvC,IAAM/jB,EAASjX,KAAK4gC,SAAS7/B,IAAIyH,GAEjC,OADAxI,KAAK4gC,SAAS3/B,IAAIuH,EAAIwyB,GACf/jB,GAGF,YAAA+pB,QAAP,SAAel6B,GACb9G,KAAK4gC,SAASI,SAAQ,SAAC9/B,EAAOuB,GAAQ,OAAAqE,EAASrE,EAAKvB,OAG/C,YAAA+/B,IAAP,SAAWz4B,GACT,OAAOxI,KAAK4gC,SAASK,IAAIz4B,IAGpB,YAAAzH,IAAP,SAAcyH,GACZ,OAAOxI,KAAK4gC,SAAS7/B,IAAIyH,IAE7B,EA3BA,GAAa,EAAA04B,kBAAAA,EA6Bb,iBAKE,aAFiB,KAAAC,UAA+B,IAAID,EAGlDlhC,KAAKmhC,UAAUlgC,IAAI,EAAAmgC,sBAAuBphC,MAiC9C,OA9BS,YAAAqD,WAAP,SAAqBmF,EAA2BwyB,GAC9Ch7B,KAAKmhC,UAAUlgC,IAAIuH,EAAIwyB,IAGlB,YAAAqG,WAAP,SAAqB74B,GACnB,OAAOxI,KAAKmhC,UAAUpgC,IAAIyH,IAGrB,YAAA/E,eAAP,SAAyB69B,G,IAAW,wDAIlC,IAHA,IAAMC,GAAsB,IAAAC,wBAAuBF,GAAMG,MAAK,SAAC1gB,EAAGC,GAAM,OAAAD,EAAE/f,MAAQggB,EAAEhgB,SAE9E0gC,EAAqB,GACF,MAAAH,EAAA,eAAqB,CAAzC,IAAMI,EAAU,KACbZ,EAAU/gC,KAAKmhC,UAAUpgC,IAAI4gC,EAAWn5B,IAC9C,IAAKu4B,EACH,MAAM,IAAIz/B,MAAM,oBAAoBggC,EAAKnC,KAAI,+BAA+BwC,EAAWn5B,GAAE,KAE3Fk5B,EAAYvgC,KAAK4/B,GAGnB,IAAMa,EAAqBL,EAAoB5gC,OAAS,EAAI4gC,EAAoB,GAAGvgC,MAAQ6gC,EAAKlhC,OAGhG,GAAIkhC,EAAKlhC,SAAWihC,EAClB,MAAM,IAAItgC,MAAM,gDAAgDggC,EAAKnC,KAAI,iBAAgByC,EAAqB,GAAC,mBAAmBC,EAAKlhC,OAAM,qBAI/I,OAAO,IAAI2gC,EAAI,WAAJA,EAAI,kBAAQO,GAAM,GAAGH,GAAW,UAE/C,EAvCA,GAAa,EAAAx+B,qBAAAA,G,0tBCtCb,aAgBM4+B,EAAwD,CAC5D30B,MAAO,EAAAjG,aAAaiQ,MACpB4qB,KAAM,EAAA76B,aAAa86B,KACnB56B,KAAM,EAAAF,aAAaC,KACnBiP,MAAO,EAAAlP,aAAa+6B,MACpBC,IAAK,EAAAh7B,aAAai7B,KAKpB,aAKE,WACoCn2B,GADpC,WACoC,KAAAA,gBAAAA,EAH7B,KAAA/E,SAAyB,EAAAC,aAAai7B,IAK3CniC,KAAKoiC,kBACLpiC,KAAKgM,gBAAgB1G,gBAAe,SAAA7C,GACtB,aAARA,GACF,EAAK2/B,qBA6Cb,OAxCU,YAAAA,gBAAR,WACEpiC,KAAKiH,SAAW66B,EAAqB9hC,KAAKgM,gBAAgBlD,WAAW7B,WAG/D,YAAAo7B,wBAAR,SAAgCC,GAC9B,IAAK,IAAI9hC,EAAI,EAAGA,EAAI8hC,EAAe3hC,OAAQH,IACR,mBAAtB8hC,EAAe9hC,KACxB8hC,EAAe9hC,GAAK8hC,EAAe9hC,OAKjC,YAAA+hC,KAAR,SAAarjB,EAAesjB,EAAiBF,GAC3CtiC,KAAKqiC,wBAAwBC,GAC7BpjB,EAAKnV,KAAI,MAATmV,EAAI,GAAMlI,QAhCK,aAgCiBwrB,GAAYF,GAAc,KAGrD,YAAAn1B,MAAP,SAAaq1B,G,IAAiB,wDACxBxiC,KAAKiH,UAAY,EAAAC,aAAaiQ,OAChCnX,KAAKuiC,KAAKvrB,QAAQyrB,IAAKD,EAASF,IAI7B,YAAAP,KAAP,SAAYS,G,IAAiB,wDACvBxiC,KAAKiH,UAAY,EAAAC,aAAa86B,MAChChiC,KAAKuiC,KAAKvrB,QAAQ+qB,KAAMS,EAASF,IAI9B,YAAAl7B,KAAP,SAAYo7B,G,IAAiB,wDACvBxiC,KAAKiH,UAAY,EAAAC,aAAaC,MAChCnH,KAAKuiC,KAAKvrB,QAAQ5P,KAAMo7B,EAASF,IAI9B,YAAAlsB,MAAP,SAAaosB,G,IAAiB,wDACxBxiC,KAAKiH,UAAY,EAAAC,aAAa+6B,OAChCjiC,KAAKuiC,KAAKvrB,QAAQZ,MAAOosB,EAASF,IArDjB,GAMlB,MAAAh/B,kBANQO,GAAb,GAAa,EAAAA,WAAAA,G,6WCzBb,aACA,SAMa,EAAA6+B,mBAAqB,ioBAErB,EAAAC,gBAA8C,CACzDp8B,KAAM,GACNC,KAAM,GACN0G,aAAa,EACbD,YAAa,QACb21B,YAAa,EACbC,cAAc,EACdC,UAAW,EAAAJ,mBACXK,UAAW,OACXC,4BAA4B,EAC5BC,mBAAoB,MACpBC,sBAAuB,EACvBC,WAAY,kCACZC,SAAU,GACVC,WAAY,SACZC,eAAgB,OAChBC,WAAY,EACZC,yBAA0B,IAC1BC,cAAe,EACfx8B,SAAU,OACVqd,WAAY,IACZof,kBAAmB,EACnB7rB,kBAAkB,EAClB8rB,iBAAiB,EACjBC,+BAA+B,EAC/BC,qBAAsB,EACtBtD,cAAc,EACduD,kBAAkB,EAClBC,mBAAmB,EACnBvb,aAAc,EACdwb,MAAO,GACPC,sBAAuB,EAAAxjB,MACvByjB,aAAc,SACdhxB,cAAe,GACfnK,aAAa,EACbo7B,cAAe,eACfC,qBAAqB,EACrBnqB,YAAY,EACZ6B,SAAU,QACVuoB,cAAc,GAGhB,IAAMC,EAAqD,CAAC,SAAU,OAAQ,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtI,aASE,WAAY3hC,GAHJ,KAAA4hC,gBAAkB,IAAI,EAAA1kC,aAK5B,IAAM2kC,EAAiB,EAAH,GAAQ,EAAA7B,iBAC5B,IAAK,IAAMlgC,KAAOE,EAChB,GAAIF,KAAO+hC,EACT,IACE,IAAMC,EAAW9hC,EAAQF,GACzB+hC,EAAe/hC,GAAOzC,KAAK0kC,2BAA2BjiC,EAAKgiC,GAC3D,MAAOv6B,GACP8M,QAAQZ,MAAMlM,GAMpBlK,KAAK8I,WAAa07B,EAClBxkC,KAAK2C,QAAU,EAAH,GAAS6hC,GACrBxkC,KAAK2kC,gBA2FT,OA9GE,sBAAW,6BAAc,C,IAAzB,WAA8C,OAAO3kC,KAAKukC,gBAAgBlkC,O,gCAsBlE,YAAAskC,cAAR,sBACQC,EAAS,SAACC,GACd,KAAMA,KAAY,EAAAlC,iBAChB,MAAM,IAAIrhC,MAAM,uBAAuBujC,EAAQ,KAEjD,OAAO,EAAK/7B,WAAW+7B,IAGnBC,EAAS,SAACD,EAAkB3jC,GAChC,KAAM2jC,KAAY,EAAAlC,iBAChB,MAAM,IAAIrhC,MAAM,uBAAuBujC,EAAQ,KAGjD3jC,EAAQ,EAAKwjC,2BAA2BG,EAAU3jC,GAE9C,EAAK4H,WAAW+7B,KAAc3jC,IAChC,EAAK4H,WAAW+7B,GAAY3jC,EAC5B,EAAKqjC,gBAAgBnjC,KAAKyjC,KAI9B,IAAK,IAAMA,KAAY7kC,KAAK8I,WAAY,CACtC,IAAMi8B,EAAO,CACXhkC,IAAK6jC,EAAOz7B,KAAKnJ,KAAM6kC,GACvB5jC,IAAK6jC,EAAO37B,KAAKnJ,KAAM6kC,IAEzB5a,OAAO+a,eAAehlC,KAAK2C,QAASkiC,EAAUE,KAI3C,YAAAE,UAAP,SAAiBxiC,EAAavB,GAC5BlB,KAAK2C,QAAQF,GAAOvB,GAGd,YAAAwjC,2BAAR,SAAmCjiC,EAAavB,GAC9C,OAAQuB,GACN,IAAK,YACL,IAAK,cACL,IAAK,eACL,IAAK,gBACEvB,IACHA,EAAQ,EAAAyhC,gBAAgBlgC,IAE1B,MACF,IAAK,aACL,IAAK,iBACH,GAAqB,iBAAVvB,GAAsB,GAAKA,GAASA,GAAS,IAEtD,MAEFA,EAAQojC,EAAoBhkB,SAASpf,GAASA,EAAQ,EAAAyhC,gBAAgBlgC,GACtE,MACF,IAAK,cACHvB,EAAQT,KAAKykC,MAAMhkC,GAErB,IAAK,aACL,IAAK,eACH,GAAIA,EAAQ,EACV,MAAM,IAAII,MAASmB,EAAG,kCAAkCvB,GAE1D,MACF,IAAK,uBACHA,EAAQT,KAAKgH,IAAI,EAAGhH,KAAKC,IAAI,GAAID,KAAKg0B,MAAc,GAARvzB,GAAc,KAC1D,MACF,IAAK,aAEH,IADAA,EAAQT,KAAKC,IAAIQ,EAAO,aACZ,EACV,MAAM,IAAII,MAASmB,EAAG,kCAAkCvB,GAE1D,MACF,IAAK,wBACL,IAAK,oBACH,GAAIA,GAAS,EACX,MAAM,IAAII,MAASmB,EAAG,8CAA8CvB,GAExE,IAAK,OACL,IAAK,OACH,IAAKA,GAAmB,IAAVA,EACZ,MAAM,IAAII,MAASmB,EAAG,4BAA4BvB,GAIxD,OAAOA,GAGF,YAAAikC,UAAP,SAAiB1iC,GACf,OAAOzC,KAAK2C,QAAQF,IAExB,EArHA,GAAa,EAAAW,eAAAA,G,YClBb,SAASgiC,EAAuB58B,EAAc6oB,EAAkBrwB,GACzDqwB,EAAwB,YAAMA,EAChCA,EAA8B,gBAAElwB,KAAK,CAAEqH,GAAE,EAAExH,MAAK,KAEhDqwB,EAA8B,gBAAI,CAAC,CAAE7oB,GAAE,EAAExH,MAAK,IAC9CqwB,EAAwB,UAAIA,G,qHA9BpB,EAAAgU,gBAAwD,IAAIxE,IAEzE,kCAAuCS,GACrC,OAAOA,EAAoB,iBAAK,IAGlC,2BAAmC94B,GACjC,GAAI,EAAA68B,gBAAgBpE,IAAIz4B,GACtB,OAAO,EAAA68B,gBAAgBtkC,IAAIyH,GAG7B,IAAM88B,EAAiB,SAAUjU,EAAkB5uB,EAAazB,GAC9D,GAAyB,IAArBukC,UAAU5kC,OACZ,MAAM,IAAIW,MAAM,oEAGlB8jC,EAAuBE,EAAWjU,EAAQrwB,IAM5C,OAHAskC,EAAUnR,SAAW,WAAM,OAAA3rB,GAE3B,EAAA68B,gBAAgBpkC,IAAIuH,EAAI88B,GACjBA,I,wPC9BT,IA8JYp+B,EA9JZ,SAEa,EAAAvD,gBAAiB,IAAA6hC,iBAAgC,iBAqBjD,EAAAnhC,mBAAoB,IAAAmhC,iBAAmC,oBAgCvD,EAAAthC,cAAe,IAAAshC,iBAA8B,eAqC7C,EAAA1gC,iBAAkB,IAAA0gC,iBAAiC,kBAuBnD,EAAAhhC,kBAAmB,IAAAghC,iBAAkC,mBAkCrD,EAAApE,uBAAwB,IAAAoE,iBAAuC,yBAShEt+B,EAAA,EAAAA,eAAA,EAAAA,aAAY,KACtB,mBACA,mBACA,mBACA,qBACA,iBAGW,EAAApD,aAAc,IAAA0hC,iBAA6B,cAY3C,EAAAliC,iBAAkB,IAAAkiC,iBAAiC,kBA2FnD,EAAA7gC,iBAAkB,IAAA6gC,iBAAiC,mB,uFChRhE,aACA,SAGA,aASE,aANQ,KAAAC,WAAuDxb,OAAO8K,OAAO,MACrE,KAAAC,QAAkB,GAElB,KAAA0Q,UAAY,IAAI,EAAA7lC,aAItB,IAAM8lC,EAAkB,IAAI,EAAAhT,UAC5B3yB,KAAKwD,SAASmiC,GACd3lC,KAAKg1B,QAAU2Q,EAAgBtT,QAC/BryB,KAAK4lC,gBAAkBD,EA2D3B,OAjEE,sBAAW,uBAAQ,C,IAAnB,WAAwC,OAAO3lC,KAAK0lC,UAAUrlC,O,gCAS9D,sBAAW,uBAAQ,C,IAAnB,WACE,OAAO4pB,OAAOe,KAAKhrB,KAAKylC,a,gCAG1B,sBAAW,4BAAa,C,IAAxB,WACE,OAAOzlC,KAAKg1B,S,IAGd,SAAyB3C,GACvB,IAAKryB,KAAKylC,WAAWpT,GACnB,MAAM,IAAI/wB,MAAM,4BAA4B+wB,EAAO,KAErDryB,KAAKg1B,QAAU3C,EACfryB,KAAK4lC,gBAAkB5lC,KAAKylC,WAAWpT,GACvCryB,KAAK0lC,UAAUtkC,KAAKixB,I,gCAGf,YAAA7uB,SAAP,SAAgBo5B,GACd58B,KAAKylC,WAAW7I,EAASvK,SAAWuK,GAM/B,YAAA9jB,QAAP,SAAeyZ,GACb,OAAOvyB,KAAK4lC,gBAAgB9sB,QAAQyZ,IAG/B,YAAAsT,mBAAP,SAA0B3R,GAGxB,IAFA,IAAIjd,EAAS,EACPtW,EAASuzB,EAAEvzB,OACRH,EAAI,EAAGA,EAAIG,IAAUH,EAAG,CAC/B,IAAIwP,EAAOkkB,EAAE5c,WAAW9W,GAExB,GAAI,OAAUwP,GAAQA,GAAQ,MAAQ,CACpC,KAAMxP,GAAKG,EAMT,OAAOsW,EAASjX,KAAK8Y,QAAQ9I,GAE/B,IAAMwO,EAAS0V,EAAE5c,WAAW9W,GAGxB,OAAUge,GAAUA,GAAU,MAChCxO,EAAyB,MAAjBA,EAAO,OAAkBwO,EAAS,MAAS,MAEnDvH,GAAUjX,KAAK8Y,QAAQ0F,GAG3BvH,GAAUjX,KAAK8Y,QAAQ9I,GAEzB,OAAOiH,GAEX,EAxEA,GAAa,EAAAvS,eAAAA,G,sjBCcb,aAEA,SACA,SAIA,cA4BE,WACE/B,QAAA,IAAAA,IAAAA,EAAA,IADF,MAGE,YAAMA,IAAQ,K,OA3BR,EAAAmjC,QAAU,IAAI,EAAAjmC,aAEd,EAAAiP,cAAgB,IAAI,EAAAjP,aAEpB,EAAAkP,eAAiB,IAAI,EAAAlP,aAGrB,EAAAkmC,mBAAqB,IAAI,EAAAlmC,aAEzB,EAAAmmC,kBAAoB,IAAI,EAAAnmC,aAoB9B,EAAKgJ,SAGL,EAAKrF,SAAS,EAAKuB,cAAckhC,eAAc,WAAM,SAAKzyB,WAC1D,EAAKhQ,SAAS,EAAKuB,cAAcmhC,gBAAe,WAAM,SAAKj9B,YAC3D,EAAKzF,UAAS,IAAAyB,cAAa,EAAKF,cAAcohC,aAAc,EAAKr3B,gBACjE,EAAKtL,UAAS,IAAAyB,cAAa,EAAKF,cAAcqhC,cAAe,EAAKr3B,iBAClE,EAAKvL,UAAS,IAAAyB,cAAa,EAAKF,cAAcshC,WAAY,EAAKN,qBAC/D,EAAKviC,UAAS,IAAAyB,cAAa,EAAKF,cAAcuhC,UAAW,EAAKN,oB,EAkGlE,OA3I8B,OAE5B,sBAAW,sBAAO,C,IAAlB,WAAoD,OAAOhmC,KAAKmD,eAAeR,S,gCAG/E,sBAAW,qBAAM,C,IAAjB,WAAoC,OAAO3C,KAAK8lC,QAAQzlC,O,gCAExD,sBAAW,2BAAY,C,IAAvB,WAA0C,OAAOL,KAAK8O,cAAczO,O,gCAEpE,sBAAW,4BAAa,C,IAAxB,WAA6C,OAAOL,KAAK+O,eAAe1O,O,gCAGxE,sBAAW,yBAAU,C,IAArB,WAA0C,OAAOL,KAAK+lC,mBAAmB1lC,O,gCAEzE,sBAAW,wBAAS,C,IAApB,WAAyC,OAAOL,KAAKgmC,kBAAkB3lC,O,gCA8BhE,YAAAqG,QAAP,WACM1G,KAAK2G,cAGT,YAAMD,QAAO,WACb1G,KAAK6G,MAAQ,eAMf,sBAAW,qBAAM,C,IAAjB,WACE,OAAO7G,KAAKyG,QAAQ21B,Q,gCAGZ,YAAA72B,eAAV,SAAyB9C,GACvB,YAAM8C,eAAc,UAAC9C,GAId,iBADCA,GACezC,KAAKyG,QAAQud,iBAMtC,sBAAW,sBAAO,C,IAAlB,WACE,OAAOhkB,KAAK0F,OAAO4d,S,gCAGd,YAAAmF,UAAP,SAAiB8d,GAEf,GAAIvmC,KAAK0F,SAAW1F,KAAKyG,QAAQw1B,OAIjC,OAAOj8B,KAAK0F,OAAO+iB,UAAUzoB,KAAK0F,OAAO4S,MAAQtY,KAAK0F,OAAO6B,EAAIg/B,IAG5D,YAAA/yB,KAAP,WACExT,KAAK8lC,QAAQ1kC,QASR,YAAAiG,OAAP,SAAcC,EAAWC,GACnBD,IAAMtH,KAAKuG,MAAQgB,IAAMvH,KAAKwG,MAIlC,YAAMa,OAAM,UAACC,EAAGC,IAMX,YAAAkd,MAAP,WACE,GAA0B,IAAtBzkB,KAAK0F,OAAO4S,OAAiC,IAAlBtY,KAAK0F,OAAO6B,EAA3C,CAIAvH,KAAK0F,OAAO2S,MAAMpX,IAAI,EAAGjB,KAAK0F,OAAO2S,MAAMtX,IAAIf,KAAK0F,OAAO4S,MAAQtY,KAAK0F,OAAO6B,IAC/EvH,KAAK0F,OAAO2S,MAAM1X,OAAS,EAC3BX,KAAK0F,OAAOC,MAAQ,EACpB3F,KAAK0F,OAAO4S,MAAQ,EACpBtY,KAAK0F,OAAO6B,EAAI,EAChB,IAAK,IAAI/G,EAAI,EAAGA,EAAIR,KAAKwG,KAAMhG,IAC7BR,KAAK0F,OAAO2S,MAAMlX,KAAKnB,KAAK0F,OAAOgW,aAAa,EAAAtN,oBAElDpO,KAAKgD,UAAU5B,KAAK,CAAEqE,SAAUzF,KAAK0F,OAAOC,MAAOC,OAAQ,MAWtD,YAAAqD,MAAP,WAKEjJ,KAAK2C,QAAQ6D,KAAOxG,KAAKwG,KACzBxG,KAAK2C,QAAQ4D,KAAOvG,KAAKuG,KAEzBvG,KAAK6I,SACL,YAAMI,MAAK,YAEf,EA3IA,CAA8B,EAAAK,cAAjB,EAAAk9B,SAAAA,G,gUCxBb,aACA,SACA,QAEA,SACA,SAMMC,EAA2B,CAAC,OAAQ,QAE1C,aAOE,WAAY9jC,GAAZ,WACE3C,KAAK+7B,MAAQ,IAAI,EAAAyK,SAAa7jC,GAC9B3C,KAAK0mC,cAAgB,IAAI,EAAApL,aAEzBt7B,KAAK2mC,eAAiB,EAAH,GAAS3mC,KAAK+7B,MAAMp5B,SACvC,IAAMiiC,EAAS,SAACC,GACd,OAAO,EAAK9I,MAAMp5B,QAAQkiC,IAEtBC,EAAS,SAACD,EAAkB3jC,GAChC,EAAK0lC,sBAAsB/B,GAC3B,EAAK9I,MAAMp5B,QAAQkiC,GAAY3jC,G,WAGtB2jC,GACT5a,OAAO+a,eAAe,EAAK2B,eAAgB9B,EAAU,CACnD9jC,IAAK,WACH,OAAO,EAAKg7B,MAAMp5B,QAAQkiC,IAE5B5jC,IAAK,SAACC,GACJ,EAAK0lC,sBAAsB/B,GAC3B,EAAK9I,MAAMp5B,QAAQkiC,GAAY3jC,KAGnC,IAAM6jC,EAAO,CACXhkC,IAAK6jC,EAAOz7B,KAAK,EAAM07B,GACvB5jC,IAAK6jC,EAAO37B,KAAK,EAAM07B,IAEzB5a,OAAO+a,eAAe,EAAK2B,eAAgB9B,EAAUE,I,OAdvD,IAAK,IAAMF,KAAY7kC,KAAK+7B,MAAMp5B,Q,EAAvBkiC,GAgLf,OA9JU,YAAA+B,sBAAR,SAA8B/B,GAI5B,GAAI4B,EAAyBnmB,SAASukB,GACpC,MAAM,IAAIvjC,MAAM,WAAWujC,EAAQ,yCAI/B,YAAAgC,kBAAR,WACE,IAAK7mC,KAAK+7B,MAAM54B,eAAeR,QAAQmhC,iBACrC,MAAM,IAAIxiC,MAAM,yEAIpB,sBAAW,qBAAM,C,IAAjB,WAAoC,OAAOtB,KAAK+7B,MAAM+K,Q,gCACtD,sBAAW,uBAAQ,C,IAAnB,WAAwC,OAAO9mC,KAAK+7B,MAAM12B,U,gCAC1D,sBAAW,2BAAY,C,IAAvB,WAA0C,OAAOrF,KAAK+7B,MAAMoK,c,gCAC5D,sBAAW,qBAAM,C,IAAjB,WAAsC,OAAOnmC,KAAK+7B,MAAM32B,Q,gCACxD,sBAAW,yBAAU,C,IAArB,WAAwC,OAAOpF,KAAK+7B,MAAM72B,Y,gCAC1D,sBAAW,uBAAQ,C,IAAnB,WAAgE,OAAOlF,KAAK+7B,MAAM52B,U,gCAClF,sBAAW,uBAAQ,C,IAAnB,WAAwC,OAAOnF,KAAK+7B,MAAMv2B,U,gCAC1D,sBAAW,4BAAa,C,IAAxB,WAA6C,OAAOxF,KAAK+7B,MAAMqK,e,gCAE/D,sBAAW,qBAAM,C,IAAjB,WAKE,OAJApmC,KAAK6mC,oBACA7mC,KAAKsN,UACRtN,KAAKsN,QAAU,IAAI,EAAAqvB,UAAU38B,KAAK+7B,QAE7B/7B,KAAKsN,S,gCAEd,sBAAW,sBAAO,C,IAAlB,WAEE,OADAtN,KAAK6mC,oBACE,IAAI,EAAA9J,WAAW/8B,KAAK+7B,Q,gCAE7B,sBAAW,mBAAI,C,IAAf,WAA4B,OAAO/7B,KAAK+7B,MAAMv1B,M,gCAC9C,sBAAW,mBAAI,C,IAAf,WAA4B,OAAOxG,KAAK+7B,MAAMx1B,M,gCAC9C,sBAAW,qBAAM,C,IAAjB,WAKE,OAJAvG,KAAK6mC,oBACA7mC,KAAKwpB,UACRxpB,KAAKwpB,QAAU,IAAI,EAAA8S,mBAAmBt8B,KAAK+7B,QAEtC/7B,KAAKwpB,S,gCAEd,sBAAW,sBAAO,C,IAAlB,WAEE,OADAxpB,KAAK6mC,oBACE7mC,KAAK+7B,MAAMzY,S,gCAEpB,sBAAW,oBAAK,C,IAAhB,WACE,IAAMiR,EAAIv0B,KAAK+7B,MAAMh4B,YAAYgU,gBAC7BgvB,EAA+D,OACnE,OAAQ/mC,KAAK+7B,MAAM53B,iBAAiBiY,gBAClC,IAAK,MAAO2qB,EAAoB,MAAO,MACvC,IAAK,QAASA,EAAoB,QAAS,MAC3C,IAAK,OAAQA,EAAoB,OAAQ,MACzC,IAAK,MAAOA,EAAoB,MAElC,MAAO,CACLC,0BAA2BzS,EAAEvY,sBAC7BirB,sBAAuB1S,EAAEpY,kBACzBO,mBAAoB6X,EAAE7X,mBACtBzE,WAAYjY,KAAK+7B,MAAMh4B,YAAYmU,MAAMD,WACzC8uB,kBAAmBA,EACnBG,WAAY3S,EAAE/Z,OACd2sB,sBAAuB5S,EAAEra,kBACzBktB,cAAe7S,EAAElY,UACjBvE,eAAgByc,EAAEvc,a,gCAGtB,sBAAW,sBAAO,C,IAAlB,WACE,OAAOhY,KAAK2mC,gB,IAEd,SAAmBhkC,GACjB,IAAK,IAAMkiC,KAAYliC,EACrB3C,KAAK2mC,eAAe9B,GAAYliC,EAAQkiC,I,gCAGrC,YAAAx9B,OAAP,SAAcggC,EAAiB7gC,GAC7BxG,KAAKsnC,gBAAgBD,EAAS7gC,GAC9BxG,KAAK+7B,MAAM10B,OAAOggC,EAAS7gC,IAEtB,YAAA+gC,eAAP,SAAsBhB,GAGpB,OAFAvmC,KAAK6mC,oBACL7mC,KAAKsnC,gBAAgBf,GACdvmC,KAAK+7B,MAAMtT,UAAU8d,IAEvB,YAAA9d,UAAP,SAAiB8d,GACf,OAAOvmC,KAAKunC,eAAehB,IAEtB,YAAA7/B,QAAP,WACE1G,KAAK0mC,cAAchgC,UACnB1G,KAAK+7B,MAAMr1B,WAEN,YAAAqB,YAAP,SAAmBpG,GACjB3B,KAAKsnC,gBAAgB3lC,GACrB3B,KAAK+7B,MAAMh0B,YAAYpG,IAElB,YAAAuG,YAAP,SAAmBC,GACjBnI,KAAKsnC,gBAAgBn/B,GACrBnI,KAAK+7B,MAAM7zB,YAAYC,IAElB,YAAAC,YAAP,WACEpI,KAAK+7B,MAAM3zB,eAEN,YAAAnE,eAAP,WACEjE,KAAK+7B,MAAM93B,kBAEN,YAAAoE,aAAP,SAAoBC,GAClBtI,KAAKsnC,gBAAgBh/B,GACrBtI,KAAK+7B,MAAM1zB,aAAaC,IAEnB,YAAAmc,MAAP,WACEzkB,KAAK+7B,MAAMtX,SAEN,YAAA5d,MAAP,SAAaX,EAA2BY,GACtC9G,KAAK+7B,MAAMl1B,MAAMX,EAAMY,IAElB,YAAA0gC,UAAP,SAAiBthC,EAAkBY,GACjC9G,KAAK+7B,MAAMl1B,MAAMX,EAAMY,IAElB,YAAA2gC,QAAP,SAAevhC,EAA2BY,GACxC9G,KAAK+7B,MAAMl1B,MAAMX,GACjBlG,KAAK+7B,MAAMl1B,MAAM,OAAQC,IAMpB,YAAAq+B,UAAP,SAAiB1iC,GACf,OAAOzC,KAAK+7B,MAAM54B,eAAegiC,UAAU1iC,IAWtC,YAAAwiC,UAAP,SAAiBxiC,EAAUvB,GACzBlB,KAAK+7B,MAAM54B,eAAe8hC,UAAUxiC,EAAKvB,IAEpC,YAAA+H,MAAP,WACEjJ,KAAK+7B,MAAM9yB,SAEN,YAAAgyB,UAAP,SAAiByM,GAEf,OAAO1nC,KAAK0mC,cAAczL,UAAUj7B,KAAa0nC,IAG3C,YAAAJ,gBAAR,W,IAAwB,sDACtB,IAAoB,UAAA9M,EAAA,eAAQ,CAAvB,IAAMt5B,EAAK,KACd,GAAIA,IAAUymC,EAAAA,GAAYngC,MAAMtG,IAAUA,EAAQ,GAAM,EACtD,MAAM,IAAII,MAAM,oCAIxB,EApMA,GAAa,EAAAklC,SAAAA,IClBToB,EAA2B,GCE3BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBjnC,IAAjBknC,EACH,OAAOA,EAAaC,QAGrB,IAAIC,EAASN,EAAyBG,GAAY,CAGjDE,QAAS,IAOV,OAHAE,EAAoBJ,GAAUh+B,KAAKm+B,EAAOD,QAASC,EAAQA,EAAOD,QAASH,GAGpEI,EAAOD,QClBWH,CAAoB,K","sources":["webpack://xterm/./src/common/CircularList.ts","webpack://xterm/./src/common/Clone.ts","webpack://xterm/./src/common/CoreTerminal.ts","webpack://xterm/./src/common/EventEmitter.ts","webpack://xterm/./src/common/InputHandler.ts","webpack://xterm/./src/common/Lifecycle.ts","webpack://xterm/./src/common/Platform.ts","webpack://xterm/./src/common/TypedArrayUtils.ts","webpack://xterm/./src/common/WindowsMode.ts","webpack://xterm/./src/common/buffer/AttributeData.ts","webpack://xterm/./src/common/buffer/Buffer.ts","webpack://xterm/./src/common/buffer/BufferLine.ts","webpack://xterm/./src/common/buffer/BufferReflow.ts","webpack://xterm/./src/common/buffer/BufferSet.ts","webpack://xterm/./src/common/buffer/CellData.ts","webpack://xterm/./src/common/buffer/Constants.ts","webpack://xterm/./src/common/buffer/Marker.ts","webpack://xterm/./src/common/data/Charsets.ts","webpack://xterm/./src/common/data/EscapeSequences.ts","webpack://xterm/./src/common/input/TextDecoder.ts","webpack://xterm/./src/common/input/UnicodeV6.ts","webpack://xterm/./src/common/input/WriteBuffer.ts","webpack://xterm/./src/common/input/XParseColor.ts","webpack://xterm/./src/common/parser/Constants.ts","webpack://xterm/./src/common/parser/DcsParser.ts","webpack://xterm/./src/common/parser/EscapeSequenceParser.ts","webpack://xterm/./src/common/parser/OscParser.ts","webpack://xterm/./src/common/parser/Params.ts","webpack://xterm/./src/common/public/AddonManager.ts","webpack://xterm/./src/common/public/BufferApiView.ts","webpack://xterm/./src/common/public/BufferLineApiView.ts","webpack://xterm/./src/common/public/BufferNamespaceApi.ts","webpack://xterm/./src/common/public/ParserApi.ts","webpack://xterm/./src/common/public/UnicodeApi.ts","webpack://xterm/./src/common/services/BufferService.ts","webpack://xterm/./src/common/services/CharsetService.ts","webpack://xterm/./src/common/services/CoreMouseService.ts","webpack://xterm/./src/common/services/CoreService.ts","webpack://xterm/./src/common/services/DirtyRowService.ts","webpack://xterm/./src/common/services/InstantiationService.ts","webpack://xterm/./src/common/services/LogService.ts","webpack://xterm/./src/common/services/OptionsService.ts","webpack://xterm/./src/common/services/ServiceRegistry.ts","webpack://xterm/./src/common/services/Services.ts","webpack://xterm/./src/common/services/UnicodeService.ts","webpack://xterm/./src/headless/Terminal.ts","webpack://xterm/./src/headless/public/Terminal.ts","webpack://xterm/webpack/bootstrap","webpack://xterm/webpack/startup"],"sourcesContent":["/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICircularList } from 'common/Types';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\n\nexport interface IInsertEvent {\n  index: number;\n  amount: number;\n}\n\nexport interface IDeleteEvent {\n  index: number;\n  amount: number;\n}\n\n/**\n * Represents a circular list; a list with a maximum size that wraps around when push is called,\n * overriding values at the start of the list.\n */\nexport class CircularList<T> implements ICircularList<T> {\n  protected _array: (T | undefined)[];\n  private _startIndex: number;\n  private _length: number;\n\n  public onDeleteEmitter = new EventEmitter<IDeleteEvent>();\n  public get onDelete(): IEvent<IDeleteEvent> { return this.onDeleteEmitter.event; }\n  public onInsertEmitter = new EventEmitter<IInsertEvent>();\n  public get onInsert(): IEvent<IInsertEvent> { return this.onInsertEmitter.event; }\n  public onTrimEmitter = new EventEmitter<number>();\n  public get onTrim(): IEvent<number> { return this.onTrimEmitter.event; }\n\n  constructor(\n    private _maxLength: number\n  ) {\n    this._array = new Array<T>(this._maxLength);\n    this._startIndex = 0;\n    this._length = 0;\n  }\n\n  public get maxLength(): number {\n    return this._maxLength;\n  }\n\n  public set maxLength(newMaxLength: number) {\n    // There was no change in maxLength, return early.\n    if (this._maxLength === newMaxLength) {\n      return;\n    }\n\n    // Reconstruct array, starting at index 0. Only transfer values from the\n    // indexes 0 to length.\n    const newArray = new Array<T | undefined>(newMaxLength);\n    for (let i = 0; i < Math.min(newMaxLength, this.length); i++) {\n      newArray[i] = this._array[this._getCyclicIndex(i)];\n    }\n    this._array = newArray;\n    this._maxLength = newMaxLength;\n    this._startIndex = 0;\n  }\n\n  public get length(): number {\n    return this._length;\n  }\n\n  public set length(newLength: number) {\n    if (newLength > this._length) {\n      for (let i = this._length; i < newLength; i++) {\n        this._array[i] = undefined;\n      }\n    }\n    this._length = newLength;\n  }\n\n  /**\n   * Gets the value at an index.\n   *\n   * Note that for performance reasons there is no bounds checking here, the index reference is\n   * circular so this should always return a value and never throw.\n   * @param index The index of the value to get.\n   * @return The value corresponding to the index.\n   */\n  public get(index: number): T | undefined {\n    return this._array[this._getCyclicIndex(index)];\n  }\n\n  /**\n   * Sets the value at an index.\n   *\n   * Note that for performance reasons there is no bounds checking here, the index reference is\n   * circular so this should always return a value and never throw.\n   * @param index The index to set.\n   * @param value The value to set.\n   */\n  public set(index: number, value: T | undefined): void {\n    this._array[this._getCyclicIndex(index)] = value;\n  }\n\n  /**\n   * Pushes a new value onto the list, wrapping around to the start of the array, overriding index 0\n   * if the maximum length is reached.\n   * @param value The value to push onto the list.\n   */\n  public push(value: T): void {\n    this._array[this._getCyclicIndex(this._length)] = value;\n    if (this._length === this._maxLength) {\n      this._startIndex = ++this._startIndex % this._maxLength;\n      this.onTrimEmitter.fire(1);\n    } else {\n      this._length++;\n    }\n  }\n\n  /**\n   * Advance ringbuffer index and return current element for recycling.\n   * Note: The buffer must be full for this method to work.\n   * @throws When the buffer is not full.\n   */\n  public recycle(): T {\n    if (this._length !== this._maxLength) {\n      throw new Error('Can only recycle when the buffer is full');\n    }\n    this._startIndex = ++this._startIndex % this._maxLength;\n    this.onTrimEmitter.fire(1);\n    return this._array[this._getCyclicIndex(this._length - 1)]!;\n  }\n\n  /**\n   * Ringbuffer is at max length.\n   */\n  public get isFull(): boolean {\n    return this._length === this._maxLength;\n  }\n\n  /**\n   * Removes and returns the last value on the list.\n   * @return The popped value.\n   */\n  public pop(): T | undefined {\n    return this._array[this._getCyclicIndex(this._length-- - 1)];\n  }\n\n  /**\n   * Deletes and/or inserts items at a particular index (in that order). Unlike\n   * Array.prototype.splice, this operation does not return the deleted items as a new array in\n   * order to save creating a new array. Note that this operation may shift all values in the list\n   * in the worst case.\n   * @param start The index to delete and/or insert.\n   * @param deleteCount The number of elements to delete.\n   * @param items The items to insert.\n   */\n  public splice(start: number, deleteCount: number, ...items: T[]): void {\n    // Delete items\n    if (deleteCount) {\n      for (let i = start; i < this._length - deleteCount; i++) {\n        this._array[this._getCyclicIndex(i)] = this._array[this._getCyclicIndex(i + deleteCount)];\n      }\n      this._length -= deleteCount;\n      this.onDeleteEmitter.fire({ index: start, amount: deleteCount });\n    }\n\n    // Add items\n    for (let i = this._length - 1; i >= start; i--) {\n      this._array[this._getCyclicIndex(i + items.length)] = this._array[this._getCyclicIndex(i)];\n    }\n    for (let i = 0; i < items.length; i++) {\n      this._array[this._getCyclicIndex(start + i)] = items[i];\n    }\n    if (items.length) {\n      this.onInsertEmitter.fire({ index: start, amount: items.length });\n    }\n\n    // Adjust length as needed\n    if (this._length + items.length > this._maxLength) {\n      const countToTrim = (this._length + items.length) - this._maxLength;\n      this._startIndex += countToTrim;\n      this._length = this._maxLength;\n      this.onTrimEmitter.fire(countToTrim);\n    } else {\n      this._length += items.length;\n    }\n  }\n\n  /**\n   * Trims a number of items from the start of the list.\n   * @param count The number of items to remove.\n   */\n  public trimStart(count: number): void {\n    if (count > this._length) {\n      count = this._length;\n    }\n    this._startIndex += count;\n    this._length -= count;\n    this.onTrimEmitter.fire(count);\n  }\n\n  public shiftElements(start: number, count: number, offset: number): void {\n    if (count <= 0) {\n      return;\n    }\n    if (start < 0 || start >= this._length) {\n      throw new Error('start argument out of range');\n    }\n    if (start + offset < 0) {\n      throw new Error('Cannot shift elements in list beyond index 0');\n    }\n\n    if (offset > 0) {\n      for (let i = count - 1; i >= 0; i--) {\n        this.set(start + i + offset, this.get(start + i));\n      }\n      const expandListBy = (start + count + offset) - this._length;\n      if (expandListBy > 0) {\n        this._length += expandListBy;\n        while (this._length > this._maxLength) {\n          this._length--;\n          this._startIndex++;\n          this.onTrimEmitter.fire(1);\n        }\n      }\n    } else {\n      for (let i = 0; i < count; i++) {\n        this.set(start + i + offset, this.get(start + i));\n      }\n    }\n  }\n\n  /**\n   * Gets the cyclic index for the specified regular index. The cyclic index can then be used on the\n   * backing array to get the element associated with the regular index.\n   * @param index The regular index.\n   * @returns The cyclic index.\n   */\n  private _getCyclicIndex(index: number): number {\n    return (this._startIndex + index) % this._maxLength;\n  }\n}\n","/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/*\n * A simple utility for cloning values\n */\nexport function clone<T>(val: T, depth: number = 5): T {\n  if (typeof val !== 'object') {\n    return val;\n  }\n\n  // If we're cloning an array, use an array as the base, otherwise use an object\n  const clonedObject: any = Array.isArray(val) ? [] : {};\n\n  for (const key in val) {\n    // Recursively clone eack item unless we're at the maximum depth\n    clonedObject[key] = depth <= 1 ? val[key] : (val[key] && clone(val[key], depth - 1));\n  }\n\n  return clonedObject as T;\n}\n","/**\n * Copyright (c) 2014-2020 The xterm.js authors. All rights reserved.\n * Copyright (c) 2012-2013, Christopher Jeffrey (MIT License)\n * @license MIT\n *\n * Originally forked from (with the author's permission):\n *   Fabrice Bellard's javascript vt100 for jslinux:\n *   http://bellard.org/jslinux/\n *   Copyright (c) 2011 Fabrice Bellard\n *   The original design remains. The terminal itself\n *   has been extended to include xterm CSI codes, among\n *   other features.\n *\n * Terminal Emulation References:\n *   http://vt100.net/\n *   http://invisible-island.net/xterm/ctlseqs/ctlseqs.txt\n *   http://invisible-island.net/xterm/ctlseqs/ctlseqs.html\n *   http://invisible-island.net/vttest/\n *   http://www.inwap.com/pdp10/ansicode.txt\n *   http://linux.die.net/man/4/console_codes\n *   http://linux.die.net/man/7/urxvt\n */\n\nimport { Disposable } from 'common/Lifecycle';\nimport { IInstantiationService, IOptionsService, IBufferService, ILogService, ICharsetService, ICoreService, ICoreMouseService, IUnicodeService, IDirtyRowService, LogLevelEnum, ITerminalOptions } from 'common/services/Services';\nimport { InstantiationService } from 'common/services/InstantiationService';\nimport { LogService } from 'common/services/LogService';\nimport { BufferService, MINIMUM_COLS, MINIMUM_ROWS } from 'common/services/BufferService';\nimport { OptionsService } from 'common/services/OptionsService';\nimport { IDisposable, IBufferLine, IAttributeData, ICoreTerminal, IKeyboardEvent, IScrollEvent, ScrollSource, ITerminalOptions as IPublicTerminalOptions } from 'common/Types';\nimport { CoreService } from 'common/services/CoreService';\nimport { EventEmitter, IEvent, forwardEvent } from 'common/EventEmitter';\nimport { CoreMouseService } from 'common/services/CoreMouseService';\nimport { DirtyRowService } from 'common/services/DirtyRowService';\nimport { UnicodeService } from 'common/services/UnicodeService';\nimport { CharsetService } from 'common/services/CharsetService';\nimport { updateWindowsModeWrappedState } from 'common/WindowsMode';\nimport { IFunctionIdentifier, IParams } from 'common/parser/Types';\nimport { IBufferSet } from 'common/buffer/Types';\nimport { InputHandler } from 'common/InputHandler';\nimport { WriteBuffer } from 'common/input/WriteBuffer';\n\n// Only trigger this warning a single time per session\nlet hasWriteSyncWarnHappened = false;\n\nexport abstract class CoreTerminal extends Disposable implements ICoreTerminal {\n  protected readonly _instantiationService: IInstantiationService;\n  protected readonly _bufferService: IBufferService;\n  protected readonly _logService: ILogService;\n  protected readonly _charsetService: ICharsetService;\n  protected readonly _dirtyRowService: IDirtyRowService;\n\n  public readonly coreMouseService: ICoreMouseService;\n  public readonly coreService: ICoreService;\n  public readonly unicodeService: IUnicodeService;\n  public readonly optionsService: IOptionsService;\n\n  protected _inputHandler: InputHandler;\n  private _writeBuffer: WriteBuffer;\n  private _windowsMode: IDisposable | undefined;\n\n  private _onBinary = new EventEmitter<string>();\n  public get onBinary(): IEvent<string> { return this._onBinary.event; }\n  private _onData = new EventEmitter<string>();\n  public get onData(): IEvent<string> { return this._onData.event; }\n  protected _onLineFeed = new EventEmitter<void>();\n  public get onLineFeed(): IEvent<void> { return this._onLineFeed.event; }\n  private _onResize = new EventEmitter<{ cols: number, rows: number }>();\n  public get onResize(): IEvent<{ cols: number, rows: number }> { return this._onResize.event; }\n  protected _onScroll = new EventEmitter<IScrollEvent, void>();\n  /**\n   * Internally we track the source of the scroll but this is meaningless outside the library so\n   * it's filtered out.\n   */\n  protected _onScrollApi?: EventEmitter<number, void>;\n  public get onScroll(): IEvent<number, void> {\n    if (!this._onScrollApi) {\n      this._onScrollApi = new EventEmitter<number, void>();\n      this.register(this._onScroll.event(ev => {\n        this._onScrollApi?.fire(ev.position);\n      }));\n    }\n    return this._onScrollApi.event;\n  }\n\n  public get cols(): number { return this._bufferService.cols; }\n  public get rows(): number { return this._bufferService.rows; }\n  public get buffers(): IBufferSet { return this._bufferService.buffers; }\n  public get options(): ITerminalOptions { return this.optionsService.options; }\n  public set options(options: ITerminalOptions) {\n    for (const key in options) {\n      this.optionsService.options[key] = options[key];\n    }\n  }\n\n  constructor(\n    options: Partial<ITerminalOptions>\n  ) {\n    super();\n\n    // Setup and initialize services\n    this._instantiationService = new InstantiationService();\n    this.optionsService = new OptionsService(options);\n    this._instantiationService.setService(IOptionsService, this.optionsService);\n    this._bufferService = this.register(this._instantiationService.createInstance(BufferService));\n    this._instantiationService.setService(IBufferService, this._bufferService);\n    this._logService = this._instantiationService.createInstance(LogService);\n    this._instantiationService.setService(ILogService, this._logService);\n    this.coreService = this.register(this._instantiationService.createInstance(CoreService, () => this.scrollToBottom()));\n    this._instantiationService.setService(ICoreService, this.coreService);\n    this.coreMouseService = this._instantiationService.createInstance(CoreMouseService);\n    this._instantiationService.setService(ICoreMouseService, this.coreMouseService);\n    this._dirtyRowService = this._instantiationService.createInstance(DirtyRowService);\n    this._instantiationService.setService(IDirtyRowService, this._dirtyRowService);\n    this.unicodeService = this._instantiationService.createInstance(UnicodeService);\n    this._instantiationService.setService(IUnicodeService, this.unicodeService);\n    this._charsetService = this._instantiationService.createInstance(CharsetService);\n    this._instantiationService.setService(ICharsetService, this._charsetService);\n\n    // Register input handler and handle/forward events\n    this._inputHandler = new InputHandler(this._bufferService, this._charsetService, this.coreService, this._dirtyRowService, this._logService, this.optionsService, this.coreMouseService, this.unicodeService);\n    this.register(forwardEvent(this._inputHandler.onLineFeed, this._onLineFeed));\n    this.register(this._inputHandler);\n\n    // Setup listeners\n    this.register(forwardEvent(this._bufferService.onResize, this._onResize));\n    this.register(forwardEvent(this.coreService.onData, this._onData));\n    this.register(forwardEvent(this.coreService.onBinary, this._onBinary));\n    this.register(this.optionsService.onOptionChange(key => this._updateOptions(key)));\n    this.register(this._bufferService.onScroll(event => {\n      this._onScroll.fire({ position: this._bufferService.buffer.ydisp, source: ScrollSource.TERMINAL });\n      this._dirtyRowService.markRangeDirty(this._bufferService.buffer.scrollTop, this._bufferService.buffer.scrollBottom);\n    }));\n    this.register(this._inputHandler.onScroll(event => {\n      this._onScroll.fire({ position: this._bufferService.buffer.ydisp, source: ScrollSource.TERMINAL });\n      this._dirtyRowService.markRangeDirty(this._bufferService.buffer.scrollTop, this._bufferService.buffer.scrollBottom);\n    }));\n\n    // Setup WriteBuffer\n    this._writeBuffer = new WriteBuffer((data, promiseResult) => this._inputHandler.parse(data, promiseResult));\n  }\n\n  public dispose(): void {\n    if (this._isDisposed) {\n      return;\n    }\n    super.dispose();\n    this._windowsMode?.dispose();\n    this._windowsMode = undefined;\n  }\n\n  public write(data: string | Uint8Array, callback?: () => void): void {\n    this._writeBuffer.write(data, callback);\n  }\n\n  /**\n   * Write data to terminal synchonously.\n   *\n   * This method is unreliable with async parser handlers, thus should not\n   * be used anymore. If you need blocking semantics on data input consider\n   * `write` with a callback instead.\n   *\n   * @deprecated Unreliable, will be removed soon.\n   */\n  public writeSync(data: string | Uint8Array, maxSubsequentCalls?: number): void {\n    if (this._logService.logLevel <= LogLevelEnum.WARN && !hasWriteSyncWarnHappened) {\n      this._logService.warn('writeSync is unreliable and will be removed soon.');\n      hasWriteSyncWarnHappened = true;\n    }\n    this._writeBuffer.writeSync(data, maxSubsequentCalls);\n  }\n\n  public resize(x: number, y: number): void {\n    if (isNaN(x) || isNaN(y)) {\n      return;\n    }\n\n    x = Math.max(x, MINIMUM_COLS);\n    y = Math.max(y, MINIMUM_ROWS);\n\n    this._bufferService.resize(x, y);\n  }\n\n  /**\n   * Scroll the terminal down 1 row, creating a blank line.\n   * @param isWrapped Whether the new line is wrapped from the previous line.\n   */\n  public scroll(eraseAttr: IAttributeData, isWrapped: boolean = false): void {\n    this._bufferService.scroll(eraseAttr, isWrapped);\n  }\n\n  /**\n   * Scroll the display of the terminal\n   * @param disp The number of lines to scroll down (negative scroll up).\n   * @param suppressScrollEvent Don't emit the scroll event as scrollLines. This is used\n   * to avoid unwanted events being handled by the viewport when the event was triggered from the\n   * viewport originally.\n   */\n  public scrollLines(disp: number, suppressScrollEvent?: boolean, source?: ScrollSource): void {\n    this._bufferService.scrollLines(disp, suppressScrollEvent, source);\n  }\n\n  /**\n   * Scroll the display of the terminal by a number of pages.\n   * @param pageCount The number of pages to scroll (negative scrolls up).\n   */\n  public scrollPages(pageCount: number): void {\n    this._bufferService.scrollPages(pageCount);\n  }\n\n  /**\n   * Scrolls the display of the terminal to the top.\n   */\n  public scrollToTop(): void {\n    this._bufferService.scrollToTop();\n  }\n\n  /**\n   * Scrolls the display of the terminal to the bottom.\n   */\n  public scrollToBottom(): void {\n    this._bufferService.scrollToBottom();\n  }\n\n  public scrollToLine(line: number): void {\n    this._bufferService.scrollToLine(line);\n  }\n\n  /** Add handler for ESC escape sequence. See xterm.d.ts for details. */\n  public registerEscHandler(id: IFunctionIdentifier, callback: () => boolean | Promise<boolean>): IDisposable {\n    return this._inputHandler.registerEscHandler(id, callback);\n  }\n\n  /** Add handler for DCS escape sequence. See xterm.d.ts for details. */\n  public registerDcsHandler(id: IFunctionIdentifier, callback: (data: string, param: IParams) => boolean | Promise<boolean>): IDisposable {\n    return this._inputHandler.registerDcsHandler(id, callback);\n  }\n\n  /** Add handler for CSI escape sequence. See xterm.d.ts for details. */\n  public registerCsiHandler(id: IFunctionIdentifier, callback: (params: IParams) => boolean | Promise<boolean>): IDisposable {\n    return this._inputHandler.registerCsiHandler(id, callback);\n  }\n\n  /** Add handler for OSC escape sequence. See xterm.d.ts for details. */\n  public registerOscHandler(ident: number, callback: (data: string) => boolean | Promise<boolean>): IDisposable {\n    return this._inputHandler.registerOscHandler(ident, callback);\n  }\n\n  protected _setup(): void {\n    if (this.optionsService.rawOptions.windowsMode) {\n      this._enableWindowsMode();\n    }\n  }\n\n  public reset(): void {\n    this._inputHandler.reset();\n    this._bufferService.reset();\n    this._charsetService.reset();\n    this.coreService.reset();\n    this.coreMouseService.reset();\n  }\n\n  protected _updateOptions(key: string): void {\n    // TODO: These listeners should be owned by individual components\n    switch (key) {\n      case 'scrollback':\n        this.buffers.resize(this.cols, this.rows);\n        break;\n      case 'windowsMode':\n        if (this.optionsService.rawOptions.windowsMode) {\n          this._enableWindowsMode();\n        } else {\n          this._windowsMode?.dispose();\n          this._windowsMode = undefined;\n        }\n        break;\n    }\n  }\n\n  protected _enableWindowsMode(): void {\n    if (!this._windowsMode) {\n      const disposables: IDisposable[] = [];\n      disposables.push(this.onLineFeed(updateWindowsModeWrappedState.bind(null, this._bufferService)));\n      disposables.push(this.registerCsiHandler({ final: 'H' }, () => {\n        updateWindowsModeWrappedState(this._bufferService);\n        return false;\n      }));\n      this._windowsMode = {\n        dispose: () => {\n          for (const d of disposables) {\n            d.dispose();\n          }\n        }\n      };\n    }\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\ninterface IListener<T, U = void> {\n  (arg1: T, arg2: U): void;\n}\n\nexport interface IEvent<T, U = void> {\n  (listener: (arg1: T, arg2: U) => any): IDisposable;\n}\n\nexport interface IEventEmitter<T, U = void> {\n  event: IEvent<T, U>;\n  fire(arg1: T, arg2: U): void;\n  dispose(): void;\n}\n\nexport class EventEmitter<T, U = void> implements IEventEmitter<T, U> {\n  private _listeners: IListener<T, U>[] = [];\n  private _event?: IEvent<T, U>;\n  private _disposed: boolean = false;\n\n  public get event(): IEvent<T, U> {\n    if (!this._event) {\n      this._event = (listener: (arg1: T, arg2: U) => any) => {\n        this._listeners.push(listener);\n        const disposable = {\n          dispose: () => {\n            if (!this._disposed) {\n              for (let i = 0; i < this._listeners.length; i++) {\n                if (this._listeners[i] === listener) {\n                  this._listeners.splice(i, 1);\n                  return;\n                }\n              }\n            }\n          }\n        };\n        return disposable;\n      };\n    }\n    return this._event;\n  }\n\n  public fire(arg1: T, arg2: U): void {\n    const queue: IListener<T, U>[] = [];\n    for (let i = 0; i < this._listeners.length; i++) {\n      queue.push(this._listeners[i]);\n    }\n    for (let i = 0; i < queue.length; i++) {\n      queue[i].call(undefined, arg1, arg2);\n    }\n  }\n\n  public dispose(): void {\n    if (this._listeners) {\n      this._listeners.length = 0;\n    }\n    this._disposed = true;\n  }\n}\n\nexport function forwardEvent<T>(from: IEvent<T>, to: IEventEmitter<T>): IDisposable {\n  return from(e => to.fire(e));\n}\n","/**\n * Copyright (c) 2014 The xterm.js authors. All rights reserved.\n * Copyright (c) 2012-2013, Christopher Jeffrey (MIT License)\n * @license MIT\n */\n\nimport { IInputHandler, IAttributeData, IDisposable, IWindowOptions, IColorEvent, IParseStack, ColorIndex, ColorRequestType } from 'common/Types';\nimport { C0, C1 } from 'common/data/EscapeSequences';\nimport { CHARSETS, DEFAULT_CHARSET } from 'common/data/Charsets';\nimport { EscapeSequenceParser } from 'common/parser/EscapeSequenceParser';\nimport { Disposable } from 'common/Lifecycle';\nimport { concat } from 'common/TypedArrayUtils';\nimport { StringToUtf32, stringFromCodePoint, utf32ToString, Utf8ToUtf32 } from 'common/input/TextDecoder';\nimport { DEFAULT_ATTR_DATA } from 'common/buffer/BufferLine';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { IParsingState, IDcsHandler, IEscapeSequenceParser, IParams, IFunctionIdentifier } from 'common/parser/Types';\nimport { NULL_CELL_CODE, NULL_CELL_WIDTH, Attributes, FgFlags, BgFlags, Content, UnderlineStyle } from 'common/buffer/Constants';\nimport { CellData } from 'common/buffer/CellData';\nimport { AttributeData } from 'common/buffer/AttributeData';\nimport { ICoreService, IBufferService, IOptionsService, ILogService, IDirtyRowService, ICoreMouseService, ICharsetService, IUnicodeService, LogLevelEnum } from 'common/services/Services';\nimport { OscHandler } from 'common/parser/OscParser';\nimport { DcsHandler } from 'common/parser/DcsParser';\nimport { IBuffer } from 'common/buffer/Types';\nimport { parseColor } from 'common/input/XParseColor';\n\n/**\n * Map collect to glevel. Used in `selectCharset`.\n */\nconst GLEVEL: { [key: string]: number } = { '(': 0, ')': 1, '*': 2, '+': 3, '-': 1, '.': 2 };\n\n/**\n * VT commands done by the parser - FIXME: move this to the parser?\n */\n// @vt: #Y   ESC   CSI   \"Control Sequence Introducer\"   \"ESC [\"   \"Start of a CSI sequence.\"\n// @vt: #Y   ESC   OSC   \"Operating System Command\"      \"ESC ]\"   \"Start of an OSC sequence.\"\n// @vt: #Y   ESC   DCS   \"Device Control String\"         \"ESC P\"   \"Start of a DCS sequence.\"\n// @vt: #Y   ESC   ST    \"String Terminator\"             \"ESC \\\"   \"Terminator used for string type sequences.\"\n// @vt: #Y   ESC   PM    \"Privacy Message\"               \"ESC ^\"   \"Start of a privacy message.\"\n// @vt: #Y   ESC   APC   \"Application Program Command\"   \"ESC _\"   \"Start of an APC sequence.\"\n// @vt: #Y   C1    CSI   \"Control Sequence Introducer\"   \"\\x9B\"    \"Start of a CSI sequence.\"\n// @vt: #Y   C1    OSC   \"Operating System Command\"      \"\\x9D\"    \"Start of an OSC sequence.\"\n// @vt: #Y   C1    DCS   \"Device Control String\"         \"\\x90\"    \"Start of a DCS sequence.\"\n// @vt: #Y   C1    ST    \"String Terminator\"             \"\\x9C\"    \"Terminator used for string type sequences.\"\n// @vt: #Y   C1    PM    \"Privacy Message\"               \"\\x9E\"    \"Start of a privacy message.\"\n// @vt: #Y   C1    APC   \"Application Program Command\"   \"\\x9F\"    \"Start of an APC sequence.\"\n// @vt: #Y   C0    NUL   \"Null\"                          \"\\0, \\x00\"  \"NUL is ignored.\"\n// @vt: #Y   C0    ESC   \"Escape\"                        \"\\e, \\x1B\"  \"Start of a sequence. Cancels any other sequence.\"\n\n/**\n * Document common VT features here that are currently unsupported\n */\n// @vt: #N   DCS   SIXEL   \"SIXEL Graphics\"  \"DCS Ps ; Ps ; Ps ; q \tPt ST\"   \"Draw SIXEL image starting at cursor position.\"\n// @vt: #N   OSC    1   \"Set Icon Name\"  \"OSC 1 ; Pt BEL\"  \"Set icon name.\"\n\n/**\n * Max length of the UTF32 input buffer. Real memory consumption is 4 times higher.\n */\nconst MAX_PARSEBUFFER_LENGTH = 131072;\n\n/**\n * Limit length of title and icon name stacks.\n */\nconst STACK_LIMIT = 10;\n\n// map params to window option\nfunction paramToWindowOption(n: number, opts: IWindowOptions): boolean {\n  if (n > 24) {\n    return opts.setWinLines || false;\n  }\n  switch (n) {\n    case 1: return !!opts.restoreWin;\n    case 2: return !!opts.minimizeWin;\n    case 3: return !!opts.setWinPosition;\n    case 4: return !!opts.setWinSizePixels;\n    case 5: return !!opts.raiseWin;\n    case 6: return !!opts.lowerWin;\n    case 7: return !!opts.refreshWin;\n    case 8: return !!opts.setWinSizeChars;\n    case 9: return !!opts.maximizeWin;\n    case 10: return !!opts.fullscreenWin;\n    case 11: return !!opts.getWinState;\n    case 13: return !!opts.getWinPosition;\n    case 14: return !!opts.getWinSizePixels;\n    case 15: return !!opts.getScreenSizePixels;\n    case 16: return !!opts.getCellSizePixels;\n    case 18: return !!opts.getWinSizeChars;\n    case 19: return !!opts.getScreenSizeChars;\n    case 20: return !!opts.getIconTitle;\n    case 21: return !!opts.getWinTitle;\n    case 22: return !!opts.pushTitle;\n    case 23: return !!opts.popTitle;\n    case 24: return !!opts.setWinLines;\n  }\n  return false;\n}\n\nexport enum WindowsOptionsReportType {\n  GET_WIN_SIZE_PIXELS = 0,\n  GET_CELL_SIZE_PIXELS = 1\n}\n\n// create a warning log if an async handler takes longer than the limit (in ms)\nconst SLOW_ASYNC_LIMIT = 5000;\n\n/**\n * DCS subparser implementations\n */\n\n/**\n * DCS $ q Pt ST\n *   DECRQSS (https://vt100.net/docs/vt510-rm/DECRQSS.html)\n *   Request Status String (DECRQSS), VT420 and up.\n *   Response: DECRPSS (https://vt100.net/docs/vt510-rm/DECRPSS.html)\n *\n * @vt: #P[See limited support below.]  DCS   DECRQSS   \"Request Selection or Setting\"  \"DCS $ q Pt ST\"   \"Request several terminal settings.\"\n * Response is in the form `ESC P 1 $ r Pt ST` for valid requests, where `Pt` contains the corresponding CSI string,\n * `ESC P 0 ST` for invalid requests.\n *\n * Supported requests and responses:\n *\n * | Type                             | Request           | Response (`Pt`)                                       |\n * | -------------------------------- | ----------------- | ----------------------------------------------------- |\n * | Graphic Rendition (SGR)          | `DCS $ q m ST`    | always reporting `0m` (currently broken)              |\n * | Top and Bottom Margins (DECSTBM) | `DCS $ q r ST`    | `Ps ; Ps r`                                           |\n * | Cursor Style (DECSCUSR)          | `DCS $ q SP q ST` | `Ps SP q`                                             |\n * | Protection Attribute (DECSCA)    | `DCS $ q \" q ST`  | always reporting `0 \" q` (DECSCA is unsupported)      |\n * | Conformance Level (DECSCL)       | `DCS $ q \" p ST`  | always reporting `61 ; 1 \" p` (DECSCL is unsupported) |\n *\n *\n * TODO:\n * - fix SGR report\n * - either implement DECSCA or remove the report\n * - either check which conformance is better suited or remove the report completely\n *   --> we are currently a mixture of all up to VT400 but dont follow anyone strictly\n */\nclass DECRQSS implements IDcsHandler {\n  private _data: Uint32Array = new Uint32Array(0);\n\n  constructor(\n    private _bufferService: IBufferService,\n    private _coreService: ICoreService,\n    private _logService: ILogService,\n    private _optionsService: IOptionsService\n  ) { }\n\n  public hook(params: IParams): void {\n    this._data = new Uint32Array(0);\n  }\n\n  public put(data: Uint32Array, start: number, end: number): void {\n    this._data = concat(this._data, data.subarray(start, end));\n  }\n\n  public unhook(success: boolean): boolean {\n    if (!success) {\n      this._data = new Uint32Array(0);\n      return true;\n    }\n    const data = utf32ToString(this._data);\n    this._data = new Uint32Array(0);\n    switch (data) {\n      // valid: DCS 1 $ r Pt ST (xterm)\n      case '\"q': // DECSCA\n        this._coreService.triggerDataEvent(`${C0.ESC}P1$r0\"q${C0.ESC}\\\\`);\n        break;\n      case '\"p': // DECSCL\n        this._coreService.triggerDataEvent(`${C0.ESC}P1$r61;1\"p${C0.ESC}\\\\`);\n        break;\n      case 'r': // DECSTBM\n        const pt = '' + (this._bufferService.buffer.scrollTop + 1) +\n          ';' + (this._bufferService.buffer.scrollBottom + 1) + 'r';\n        this._coreService.triggerDataEvent(`${C0.ESC}P1$r${pt}${C0.ESC}\\\\`);\n        break;\n      case 'm': // SGR\n        // TODO: report real settings instead of 0m\n        this._coreService.triggerDataEvent(`${C0.ESC}P1$r0m${C0.ESC}\\\\`);\n        break;\n      case ' q': // DECSCUSR\n        const STYLES: { [key: string]: number } = { 'block': 2, 'underline': 4, 'bar': 6 };\n        let style = STYLES[this._optionsService.rawOptions.cursorStyle];\n        style -= this._optionsService.rawOptions.cursorBlink ? 1 : 0;\n        this._coreService.triggerDataEvent(`${C0.ESC}P1$r${style} q${C0.ESC}\\\\`);\n        break;\n      default:\n        // invalid: DCS 0 $ r Pt ST (xterm)\n        this._logService.debug('Unknown DCS $q %s', data);\n        this._coreService.triggerDataEvent(`${C0.ESC}P0$r${C0.ESC}\\\\`);\n    }\n    return true;\n  }\n}\n\n/**\n * DCS Ps; Ps| Pt ST\n *   DECUDK (https://vt100.net/docs/vt510-rm/DECUDK.html)\n *   not supported\n *\n * @vt: #N  DCS   DECUDK   \"User Defined Keys\"  \"DCS Ps ; Ps | Pt ST\"   \"Definitions for user-defined keys.\"\n */\n\n/**\n * DCS + q Pt ST (xterm)\n *   Request Terminfo String\n *   not implemented\n *\n * @vt: #N  DCS   XTGETTCAP   \"Request Terminfo String\"  \"DCS + q Pt ST\"   \"Request Terminfo String.\"\n */\n\n/**\n * DCS + p Pt ST (xterm)\n *   Set Terminfo Data\n *   not supported\n *\n * @vt: #N  DCS   XTSETTCAP   \"Set Terminfo Data\"  \"DCS + p Pt ST\"   \"Set Terminfo Data.\"\n */\n\n\n\n/**\n * The terminal's standard implementation of IInputHandler, this handles all\n * input from the Parser.\n *\n * Refer to http://invisible-island.net/xterm/ctlseqs/ctlseqs.html to understand\n * each function's header comment.\n */\nexport class InputHandler extends Disposable implements IInputHandler {\n  private _parseBuffer: Uint32Array = new Uint32Array(4096);\n  private _stringDecoder: StringToUtf32 = new StringToUtf32();\n  private _utf8Decoder: Utf8ToUtf32 = new Utf8ToUtf32();\n  private _workCell: CellData = new CellData();\n  private _windowTitle = '';\n  private _iconName = '';\n  protected _windowTitleStack: string[] = [];\n  protected _iconNameStack: string[] = [];\n\n  private _curAttrData: IAttributeData = DEFAULT_ATTR_DATA.clone();\n  private _eraseAttrDataInternal: IAttributeData = DEFAULT_ATTR_DATA.clone();\n\n  private _activeBuffer: IBuffer;\n\n  private _onRequestBell = new EventEmitter<void>();\n  public get onRequestBell(): IEvent<void> { return this._onRequestBell.event; }\n  private _onRequestRefreshRows = new EventEmitter<number, number>();\n  public get onRequestRefreshRows(): IEvent<number, number> { return this._onRequestRefreshRows.event; }\n  private _onRequestReset = new EventEmitter<void>();\n  public get onRequestReset(): IEvent<void> { return this._onRequestReset.event; }\n  private _onRequestSendFocus = new EventEmitter<void>();\n  public get onRequestSendFocus(): IEvent<void> { return this._onRequestSendFocus.event; }\n  private _onRequestSyncScrollBar = new EventEmitter<void>();\n  public get onRequestSyncScrollBar(): IEvent<void> { return this._onRequestSyncScrollBar.event; }\n  private _onRequestWindowsOptionsReport = new EventEmitter<WindowsOptionsReportType>();\n  public get onRequestWindowsOptionsReport(): IEvent<WindowsOptionsReportType> { return this._onRequestWindowsOptionsReport.event; }\n\n  private _onA11yChar = new EventEmitter<string>();\n  public get onA11yChar(): IEvent<string> { return this._onA11yChar.event; }\n  private _onA11yTab = new EventEmitter<number>();\n  public get onA11yTab(): IEvent<number> { return this._onA11yTab.event; }\n  private _onCursorMove = new EventEmitter<void>();\n  public get onCursorMove(): IEvent<void> { return this._onCursorMove.event; }\n  private _onLineFeed = new EventEmitter<void>();\n  public get onLineFeed(): IEvent<void> { return this._onLineFeed.event; }\n  private _onScroll = new EventEmitter<number>();\n  public get onScroll(): IEvent<number> { return this._onScroll.event; }\n  private _onTitleChange = new EventEmitter<string>();\n  public get onTitleChange(): IEvent<string> { return this._onTitleChange.event; }\n  private _onColor = new EventEmitter<IColorEvent>();\n  public get onColor(): IEvent<IColorEvent> { return this._onColor.event; }\n\n  private _parseStack: IParseStack = {\n    paused: false,\n    cursorStartX: 0,\n    cursorStartY: 0,\n    decodedLength: 0,\n    position: 0\n  };\n\n  constructor(\n    private readonly _bufferService: IBufferService,\n    private readonly _charsetService: ICharsetService,\n    private readonly _coreService: ICoreService,\n    private readonly _dirtyRowService: IDirtyRowService,\n    private readonly _logService: ILogService,\n    private readonly _optionsService: IOptionsService,\n    private readonly _coreMouseService: ICoreMouseService,\n    private readonly _unicodeService: IUnicodeService,\n    private readonly _parser: IEscapeSequenceParser = new EscapeSequenceParser()\n  ) {\n    super();\n    this.register(this._parser);\n\n    // Track properties used in performance critical code manually to avoid using slow getters\n    this._activeBuffer = this._bufferService.buffer;\n    this.register(this._bufferService.buffers.onBufferActivate(e => this._activeBuffer = e.activeBuffer));\n\n    /**\n     * custom fallback handlers\n     */\n    this._parser.setCsiHandlerFallback((ident, params) => {\n      this._logService.debug('Unknown CSI code: ', { identifier: this._parser.identToString(ident), params: params.toArray() });\n    });\n    this._parser.setEscHandlerFallback(ident => {\n      this._logService.debug('Unknown ESC code: ', { identifier: this._parser.identToString(ident) });\n    });\n    this._parser.setExecuteHandlerFallback(code => {\n      this._logService.debug('Unknown EXECUTE code: ', { code });\n    });\n    this._parser.setOscHandlerFallback((identifier, action, data) => {\n      this._logService.debug('Unknown OSC code: ', { identifier, action, data });\n    });\n    this._parser.setDcsHandlerFallback((ident, action, payload) => {\n      if (action === 'HOOK') {\n        payload = payload.toArray();\n      }\n      this._logService.debug('Unknown DCS code: ', { identifier: this._parser.identToString(ident), action, payload });\n    });\n\n    /**\n     * print handler\n     */\n    this._parser.setPrintHandler((data, start, end) => this.print(data, start, end));\n\n    /**\n     * CSI handler\n     */\n    this._parser.registerCsiHandler({ final: '@' }, params => this.insertChars(params));\n    this._parser.registerCsiHandler({ intermediates: ' ', final: '@' }, params => this.scrollLeft(params));\n    this._parser.registerCsiHandler({ final: 'A' }, params => this.cursorUp(params));\n    this._parser.registerCsiHandler({ intermediates: ' ', final: 'A' }, params => this.scrollRight(params));\n    this._parser.registerCsiHandler({ final: 'B' }, params => this.cursorDown(params));\n    this._parser.registerCsiHandler({ final: 'C' }, params => this.cursorForward(params));\n    this._parser.registerCsiHandler({ final: 'D' }, params => this.cursorBackward(params));\n    this._parser.registerCsiHandler({ final: 'E' }, params => this.cursorNextLine(params));\n    this._parser.registerCsiHandler({ final: 'F' }, params => this.cursorPrecedingLine(params));\n    this._parser.registerCsiHandler({ final: 'G' }, params => this.cursorCharAbsolute(params));\n    this._parser.registerCsiHandler({ final: 'H' }, params => this.cursorPosition(params));\n    this._parser.registerCsiHandler({ final: 'I' }, params => this.cursorForwardTab(params));\n    this._parser.registerCsiHandler({ final: 'J' }, params => this.eraseInDisplay(params));\n    this._parser.registerCsiHandler({ prefix: '?', final: 'J' }, params => this.eraseInDisplay(params));\n    this._parser.registerCsiHandler({ final: 'K' }, params => this.eraseInLine(params));\n    this._parser.registerCsiHandler({ prefix: '?', final: 'K' }, params => this.eraseInLine(params));\n    this._parser.registerCsiHandler({ final: 'L' }, params => this.insertLines(params));\n    this._parser.registerCsiHandler({ final: 'M' }, params => this.deleteLines(params));\n    this._parser.registerCsiHandler({ final: 'P' }, params => this.deleteChars(params));\n    this._parser.registerCsiHandler({ final: 'S' }, params => this.scrollUp(params));\n    this._parser.registerCsiHandler({ final: 'T' }, params => this.scrollDown(params));\n    this._parser.registerCsiHandler({ final: 'X' }, params => this.eraseChars(params));\n    this._parser.registerCsiHandler({ final: 'Z' }, params => this.cursorBackwardTab(params));\n    this._parser.registerCsiHandler({ final: '`' }, params => this.charPosAbsolute(params));\n    this._parser.registerCsiHandler({ final: 'a' }, params => this.hPositionRelative(params));\n    this._parser.registerCsiHandler({ final: 'b' }, params => this.repeatPrecedingCharacter(params));\n    this._parser.registerCsiHandler({ final: 'c' }, params => this.sendDeviceAttributesPrimary(params));\n    this._parser.registerCsiHandler({ prefix: '>', final: 'c' }, params => this.sendDeviceAttributesSecondary(params));\n    this._parser.registerCsiHandler({ final: 'd' }, params => this.linePosAbsolute(params));\n    this._parser.registerCsiHandler({ final: 'e' }, params => this.vPositionRelative(params));\n    this._parser.registerCsiHandler({ final: 'f' }, params => this.hVPosition(params));\n    this._parser.registerCsiHandler({ final: 'g' }, params => this.tabClear(params));\n    this._parser.registerCsiHandler({ final: 'h' }, params => this.setMode(params));\n    this._parser.registerCsiHandler({ prefix: '?', final: 'h' }, params => this.setModePrivate(params));\n    this._parser.registerCsiHandler({ final: 'l' }, params => this.resetMode(params));\n    this._parser.registerCsiHandler({ prefix: '?', final: 'l' }, params => this.resetModePrivate(params));\n    this._parser.registerCsiHandler({ final: 'm' }, params => this.charAttributes(params));\n    this._parser.registerCsiHandler({ final: 'n' }, params => this.deviceStatus(params));\n    this._parser.registerCsiHandler({ prefix: '?', final: 'n' }, params => this.deviceStatusPrivate(params));\n    this._parser.registerCsiHandler({ intermediates: '!', final: 'p' }, params => this.softReset(params));\n    this._parser.registerCsiHandler({ intermediates: ' ', final: 'q' }, params => this.setCursorStyle(params));\n    this._parser.registerCsiHandler({ final: 'r' }, params => this.setScrollRegion(params));\n    this._parser.registerCsiHandler({ final: 's' }, params => this.saveCursor(params));\n    this._parser.registerCsiHandler({ final: 't' }, params => this.windowOptions(params));\n    this._parser.registerCsiHandler({ final: 'u' }, params => this.restoreCursor(params));\n    this._parser.registerCsiHandler({ intermediates: '\\'', final: '}' }, params => this.insertColumns(params));\n    this._parser.registerCsiHandler({ intermediates: '\\'', final: '~' }, params => this.deleteColumns(params));\n\n    /**\n     * execute handler\n     */\n    this._parser.setExecuteHandler(C0.BEL, () => this.bell());\n    this._parser.setExecuteHandler(C0.LF, () => this.lineFeed());\n    this._parser.setExecuteHandler(C0.VT, () => this.lineFeed());\n    this._parser.setExecuteHandler(C0.FF, () => this.lineFeed());\n    this._parser.setExecuteHandler(C0.CR, () => this.carriageReturn());\n    this._parser.setExecuteHandler(C0.BS, () => this.backspace());\n    this._parser.setExecuteHandler(C0.HT, () => this.tab());\n    this._parser.setExecuteHandler(C0.SO, () => this.shiftOut());\n    this._parser.setExecuteHandler(C0.SI, () => this.shiftIn());\n    // FIXME:   What do to with missing? Old code just added those to print.\n\n    this._parser.setExecuteHandler(C1.IND, () => this.index());\n    this._parser.setExecuteHandler(C1.NEL, () => this.nextLine());\n    this._parser.setExecuteHandler(C1.HTS, () => this.tabSet());\n\n    /**\n     * OSC handler\n     */\n    //   0 - icon name + title\n    this._parser.registerOscHandler(0, new OscHandler(data => { this.setTitle(data); this.setIconName(data); return true; }));\n    //   1 - icon name\n    this._parser.registerOscHandler(1, new OscHandler(data => this.setIconName(data)));\n    //   2 - title\n    this._parser.registerOscHandler(2, new OscHandler(data => this.setTitle(data)));\n    //   3 - set property X in the form \"prop=value\"\n    //   4 - Change Color Number\n    this._parser.registerOscHandler(4, new OscHandler(data => this.setOrReportIndexedColor(data)));\n    //   5 - Change Special Color Number\n    //   6 - Enable/disable Special Color Number c\n    //   7 - current directory? (not in xterm spec, see https://gitlab.com/gnachman/iterm2/issues/3939)\n    //  10 - Change VT100 text foreground color to Pt.\n    this._parser.registerOscHandler(10, new OscHandler(data => this.setOrReportFgColor(data)));\n    //  11 - Change VT100 text background color to Pt.\n    this._parser.registerOscHandler(11, new OscHandler(data => this.setOrReportBgColor(data)));\n    //  12 - Change text cursor color to Pt.\n    this._parser.registerOscHandler(12, new OscHandler(data => this.setOrReportCursorColor(data)));\n    //  13 - Change mouse foreground color to Pt.\n    //  14 - Change mouse background color to Pt.\n    //  15 - Change Tektronix foreground color to Pt.\n    //  16 - Change Tektronix background color to Pt.\n    //  17 - Change highlight background color to Pt.\n    //  18 - Change Tektronix cursor color to Pt.\n    //  19 - Change highlight foreground color to Pt.\n    //  46 - Change Log File to Pt.\n    //  50 - Set Font to Pt.\n    //  51 - reserved for Emacs shell.\n    //  52 - Manipulate Selection Data.\n    // 104 ; c - Reset Color Number c.\n    this._parser.registerOscHandler(104, new OscHandler(data => this.restoreIndexedColor(data)));\n    // 105 ; c - Reset Special Color Number c.\n    // 106 ; c; f - Enable/disable Special Color Number c.\n    // 110 - Reset VT100 text foreground color.\n    this._parser.registerOscHandler(110, new OscHandler(data => this.restoreFgColor(data)));\n    // 111 - Reset VT100 text background color.\n    this._parser.registerOscHandler(111, new OscHandler(data => this.restoreBgColor(data)));\n    // 112 - Reset text cursor color.\n    this._parser.registerOscHandler(112, new OscHandler(data => this.restoreCursorColor(data)));\n    // 113 - Reset mouse foreground color.\n    // 114 - Reset mouse background color.\n    // 115 - Reset Tektronix foreground color.\n    // 116 - Reset Tektronix background color.\n    // 117 - Reset highlight color.\n    // 118 - Reset Tektronix cursor color.\n    // 119 - Reset highlight foreground color.\n\n    /**\n     * ESC handlers\n     */\n    this._parser.registerEscHandler({ final: '7' }, () => this.saveCursor());\n    this._parser.registerEscHandler({ final: '8' }, () => this.restoreCursor());\n    this._parser.registerEscHandler({ final: 'D' }, () => this.index());\n    this._parser.registerEscHandler({ final: 'E' }, () => this.nextLine());\n    this._parser.registerEscHandler({ final: 'H' }, () => this.tabSet());\n    this._parser.registerEscHandler({ final: 'M' }, () => this.reverseIndex());\n    this._parser.registerEscHandler({ final: '=' }, () => this.keypadApplicationMode());\n    this._parser.registerEscHandler({ final: '>' }, () => this.keypadNumericMode());\n    this._parser.registerEscHandler({ final: 'c' }, () => this.fullReset());\n    this._parser.registerEscHandler({ final: 'n' }, () => this.setgLevel(2));\n    this._parser.registerEscHandler({ final: 'o' }, () => this.setgLevel(3));\n    this._parser.registerEscHandler({ final: '|' }, () => this.setgLevel(3));\n    this._parser.registerEscHandler({ final: '}' }, () => this.setgLevel(2));\n    this._parser.registerEscHandler({ final: '~' }, () => this.setgLevel(1));\n    this._parser.registerEscHandler({ intermediates: '%', final: '@' }, () => this.selectDefaultCharset());\n    this._parser.registerEscHandler({ intermediates: '%', final: 'G' }, () => this.selectDefaultCharset());\n    for (const flag in CHARSETS) {\n      this._parser.registerEscHandler({ intermediates: '(', final: flag }, () => this.selectCharset('(' + flag));\n      this._parser.registerEscHandler({ intermediates: ')', final: flag }, () => this.selectCharset(')' + flag));\n      this._parser.registerEscHandler({ intermediates: '*', final: flag }, () => this.selectCharset('*' + flag));\n      this._parser.registerEscHandler({ intermediates: '+', final: flag }, () => this.selectCharset('+' + flag));\n      this._parser.registerEscHandler({ intermediates: '-', final: flag }, () => this.selectCharset('-' + flag));\n      this._parser.registerEscHandler({ intermediates: '.', final: flag }, () => this.selectCharset('.' + flag));\n      this._parser.registerEscHandler({ intermediates: '/', final: flag }, () => this.selectCharset('/' + flag)); // TODO: supported?\n    }\n    this._parser.registerEscHandler({ intermediates: '#', final: '8' }, () => this.screenAlignmentPattern());\n\n    /**\n     * error handler\n     */\n    this._parser.setErrorHandler((state: IParsingState) => {\n      this._logService.error('Parsing error: ', state);\n      return state;\n    });\n\n    /**\n     * DCS handler\n     */\n    this._parser.registerDcsHandler({ intermediates: '$', final: 'q' }, new DECRQSS(this._bufferService, this._coreService, this._logService, this._optionsService));\n  }\n\n  public dispose(): void {\n    super.dispose();\n  }\n\n  /**\n   * Async parse support.\n   */\n  private _preserveStack(cursorStartX: number, cursorStartY: number, decodedLength: number, position: number): void {\n    this._parseStack.paused = true;\n    this._parseStack.cursorStartX = cursorStartX;\n    this._parseStack.cursorStartY = cursorStartY;\n    this._parseStack.decodedLength = decodedLength;\n    this._parseStack.position = position;\n  }\n\n  private _logSlowResolvingAsync(p: Promise<boolean>): void {\n    // log a limited warning about an async handler taking too long\n    if (this._logService.logLevel <= LogLevelEnum.WARN) {\n      Promise.race([p, new Promise((res, rej) => setTimeout(() => rej('#SLOW_TIMEOUT'), SLOW_ASYNC_LIMIT))])\n        .catch(err => {\n          if (err !== '#SLOW_TIMEOUT') {\n            throw err;\n          }\n          console.warn(`async parser handler taking longer than ${SLOW_ASYNC_LIMIT} ms`);\n        });\n    }\n  }\n\n  /**\n   * Parse call with async handler support.\n   *\n   * Whether the stack state got preserved for the next call, is indicated by the return value:\n   * - undefined (void):\n   *   all handlers were sync, no stack save, continue normally with next chunk\n   * - Promise\\<boolean\\>:\n   *   execution stopped at async handler, stack saved, continue with\n   *   same chunk and the promise resolve value as `promiseResult` until the method returns `undefined`\n   *\n   * Note: This method should only be called by `Terminal.write` to ensure correct execution order and\n   * proper continuation of async parser handlers.\n   */\n  public parse(data: string | Uint8Array, promiseResult?: boolean): void | Promise<boolean> {\n    let result: void | Promise<boolean>;\n    let cursorStartX = this._activeBuffer.x;\n    let cursorStartY = this._activeBuffer.y;\n    let start = 0;\n    const wasPaused = this._parseStack.paused;\n\n    if (wasPaused) {\n      // assumption: _parseBuffer never mutates between async calls\n      if (result = this._parser.parse(this._parseBuffer, this._parseStack.decodedLength, promiseResult)) {\n        this._logSlowResolvingAsync(result);\n        return result;\n      }\n      cursorStartX = this._parseStack.cursorStartX;\n      cursorStartY = this._parseStack.cursorStartY;\n      this._parseStack.paused = false;\n      if (data.length > MAX_PARSEBUFFER_LENGTH) {\n        start = this._parseStack.position + MAX_PARSEBUFFER_LENGTH;\n      }\n    }\n\n    // Log debug data, the log level gate is to prevent extra work in this hot path\n    if (this._logService.logLevel <= LogLevelEnum.DEBUG) {\n      this._logService.debug(`parsing data${typeof data === 'string' ? ` \"${data}\"` : ''}`, typeof data === 'string'\n        ? data.split('').map(e => e.charCodeAt(0))\n        : data\n      );\n    }\n\n    // resize input buffer if needed\n    if (this._parseBuffer.length < data.length) {\n      if (this._parseBuffer.length < MAX_PARSEBUFFER_LENGTH) {\n        this._parseBuffer = new Uint32Array(Math.min(data.length, MAX_PARSEBUFFER_LENGTH));\n      }\n    }\n\n    // Clear the dirty row service so we know which lines changed as a result of parsing\n    // Important: do not clear between async calls, otherwise we lost pending update information.\n    if (!wasPaused) {\n      this._dirtyRowService.clearRange();\n    }\n\n    // process big data in smaller chunks\n    if (data.length > MAX_PARSEBUFFER_LENGTH) {\n      for (let i = start; i < data.length; i += MAX_PARSEBUFFER_LENGTH) {\n        const end = i + MAX_PARSEBUFFER_LENGTH < data.length ? i + MAX_PARSEBUFFER_LENGTH : data.length;\n        const len = (typeof data === 'string')\n          ? this._stringDecoder.decode(data.substring(i, end), this._parseBuffer)\n          : this._utf8Decoder.decode(data.subarray(i, end), this._parseBuffer);\n        if (result = this._parser.parse(this._parseBuffer, len)) {\n          this._preserveStack(cursorStartX, cursorStartY, len, i);\n          this._logSlowResolvingAsync(result);\n          return result;\n        }\n      }\n    } else {\n      if (!wasPaused) {\n        const len = (typeof data === 'string')\n          ? this._stringDecoder.decode(data, this._parseBuffer)\n          : this._utf8Decoder.decode(data, this._parseBuffer);\n        if (result = this._parser.parse(this._parseBuffer, len)) {\n          this._preserveStack(cursorStartX, cursorStartY, len, 0);\n          this._logSlowResolvingAsync(result);\n          return result;\n        }\n      }\n    }\n\n    if (this._activeBuffer.x !== cursorStartX || this._activeBuffer.y !== cursorStartY) {\n      this._onCursorMove.fire();\n    }\n\n    // Refresh any dirty rows accumulated as part of parsing\n    this._onRequestRefreshRows.fire(this._dirtyRowService.start, this._dirtyRowService.end);\n  }\n\n  public print(data: Uint32Array, start: number, end: number): void {\n    let code: number;\n    let chWidth: number;\n    const charset = this._charsetService.charset;\n    const screenReaderMode = this._optionsService.rawOptions.screenReaderMode;\n    const cols = this._bufferService.cols;\n    const wraparoundMode = this._coreService.decPrivateModes.wraparound;\n    const insertMode = this._coreService.modes.insertMode;\n    const curAttr = this._curAttrData;\n    let bufferRow = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)!;\n\n    this._dirtyRowService.markDirty(this._activeBuffer.y);\n\n    // handle wide chars: reset start_cell-1 if we would overwrite the second cell of a wide char\n    if (this._activeBuffer.x && end - start > 0 && bufferRow.getWidth(this._activeBuffer.x - 1) === 2) {\n      bufferRow.setCellFromCodePoint(this._activeBuffer.x - 1, 0, 1, curAttr.fg, curAttr.bg, curAttr.extended);\n    }\n\n    for (let pos = start; pos < end; ++pos) {\n      code = data[pos];\n\n      // calculate print space\n      // expensive call, therefore we save width in line buffer\n      chWidth = this._unicodeService.wcwidth(code);\n\n      // get charset replacement character\n      // charset is only defined for ASCII, therefore we only\n      // search for an replacement char if code < 127\n      if (code < 127 && charset) {\n        const ch = charset[String.fromCharCode(code)];\n        if (ch) {\n          code = ch.charCodeAt(0);\n        }\n      }\n\n      if (screenReaderMode) {\n        this._onA11yChar.fire(stringFromCodePoint(code));\n      }\n\n      // insert combining char at last cursor position\n      // this._activeBuffer.x should never be 0 for a combining char\n      // since they always follow a cell consuming char\n      // therefore we can test for this._activeBuffer.x to avoid overflow left\n      if (!chWidth && this._activeBuffer.x) {\n        if (!bufferRow.getWidth(this._activeBuffer.x - 1)) {\n          // found empty cell after fullwidth, need to go 2 cells back\n          // it is save to step 2 cells back here\n          // since an empty cell is only set by fullwidth chars\n          bufferRow.addCodepointToCell(this._activeBuffer.x - 2, code);\n        } else {\n          bufferRow.addCodepointToCell(this._activeBuffer.x - 1, code);\n        }\n        continue;\n      }\n\n      // goto next line if ch would overflow\n      // NOTE: To avoid costly width checks here,\n      // the terminal does not allow a cols < 2.\n      if (this._activeBuffer.x + chWidth - 1 >= cols) {\n        // autowrap - DECAWM\n        // automatically wraps to the beginning of the next line\n        if (wraparoundMode) {\n          // clear left over cells to the right\n          while (this._activeBuffer.x < cols) {\n            bufferRow.setCellFromCodePoint(this._activeBuffer.x++, 0, 1, curAttr.fg, curAttr.bg, curAttr.extended);\n          }\n          this._activeBuffer.x = 0;\n          this._activeBuffer.y++;\n          if (this._activeBuffer.y === this._activeBuffer.scrollBottom + 1) {\n            this._activeBuffer.y--;\n            this._bufferService.scroll(this._eraseAttrData(), true);\n          } else {\n            if (this._activeBuffer.y >= this._bufferService.rows) {\n              this._activeBuffer.y = this._bufferService.rows - 1;\n            }\n            // The line already exists (eg. the initial viewport), mark it as a\n            // wrapped line\n            this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)!.isWrapped = true;\n          }\n          // row changed, get it again\n          bufferRow = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)!;\n        } else {\n          this._activeBuffer.x = cols - 1;\n          if (chWidth === 2) {\n            // FIXME: check for xterm behavior\n            // What to do here? We got a wide char that does not fit into last cell\n            continue;\n          }\n        }\n      }\n\n      // insert mode: move characters to right\n      if (insertMode) {\n        // right shift cells according to the width\n        bufferRow.insertCells(this._activeBuffer.x, chWidth, this._activeBuffer.getNullCell(curAttr), curAttr);\n        // test last cell - since the last cell has only room for\n        // a halfwidth char any fullwidth shifted there is lost\n        // and will be set to empty cell\n        if (bufferRow.getWidth(cols - 1) === 2) {\n          bufferRow.setCellFromCodePoint(cols - 1, NULL_CELL_CODE, NULL_CELL_WIDTH, curAttr.fg, curAttr.bg, curAttr.extended);\n        }\n      }\n\n      // write current char to buffer and advance cursor\n      bufferRow.setCellFromCodePoint(this._activeBuffer.x++, code, chWidth, curAttr.fg, curAttr.bg, curAttr.extended);\n\n      // fullwidth char - also set next cell to placeholder stub and advance cursor\n      // for graphemes bigger than fullwidth we can simply loop to zero\n      // we already made sure above, that this._activeBuffer.x + chWidth will not overflow right\n      if (chWidth > 0) {\n        while (--chWidth) {\n          // other than a regular empty cell a cell following a wide char has no width\n          bufferRow.setCellFromCodePoint(this._activeBuffer.x++, 0, 0, curAttr.fg, curAttr.bg, curAttr.extended);\n        }\n      }\n    }\n    // store last char in Parser.precedingCodepoint for REP to work correctly\n    // This needs to check whether:\n    //  - fullwidth + surrogates: reset\n    //  - combining: only base char gets carried on (bug in xterm?)\n    if (end - start > 0) {\n      bufferRow.loadCell(this._activeBuffer.x - 1, this._workCell);\n      if (this._workCell.getWidth() === 2 || this._workCell.getCode() > 0xFFFF) {\n        this._parser.precedingCodepoint = 0;\n      } else if (this._workCell.isCombined()) {\n        this._parser.precedingCodepoint = this._workCell.getChars().charCodeAt(0);\n      } else {\n        this._parser.precedingCodepoint = this._workCell.content;\n      }\n    }\n\n    // handle wide chars: reset cell to the right if it is second cell of a wide char\n    if (this._activeBuffer.x < cols && end - start > 0 && bufferRow.getWidth(this._activeBuffer.x) === 0 && !bufferRow.hasContent(this._activeBuffer.x)) {\n      bufferRow.setCellFromCodePoint(this._activeBuffer.x, 0, 1, curAttr.fg, curAttr.bg, curAttr.extended);\n    }\n\n    this._dirtyRowService.markDirty(this._activeBuffer.y);\n  }\n\n  /**\n   * Forward registerCsiHandler from parser.\n   */\n  public registerCsiHandler(id: IFunctionIdentifier, callback: (params: IParams) => boolean | Promise<boolean>): IDisposable {\n    if (id.final === 't' && !id.prefix && !id.intermediates) {\n      // security: always check whether window option is allowed\n      return this._parser.registerCsiHandler(id, params => {\n        if (!paramToWindowOption(params.params[0], this._optionsService.rawOptions.windowOptions)) {\n          return true;\n        }\n        return callback(params);\n      });\n    }\n    return this._parser.registerCsiHandler(id, callback);\n  }\n\n  /**\n   * Forward registerDcsHandler from parser.\n   */\n  public registerDcsHandler(id: IFunctionIdentifier, callback: (data: string, param: IParams) => boolean | Promise<boolean>): IDisposable {\n    return this._parser.registerDcsHandler(id, new DcsHandler(callback));\n  }\n\n  /**\n   * Forward registerEscHandler from parser.\n   */\n  public registerEscHandler(id: IFunctionIdentifier, callback: () => boolean | Promise<boolean>): IDisposable {\n    return this._parser.registerEscHandler(id, callback);\n  }\n\n  /**\n   * Forward registerOscHandler from parser.\n   */\n  public registerOscHandler(ident: number, callback: (data: string) => boolean | Promise<boolean>): IDisposable {\n    return this._parser.registerOscHandler(ident, new OscHandler(callback));\n  }\n\n  /**\n   * BEL\n   * Bell (Ctrl-G).\n   *\n   * @vt: #Y   C0    BEL   \"Bell\"  \"\\a, \\x07\"  \"Ring the bell.\"\n   * The behavior of the bell is further customizable with `ITerminalOptions.bellStyle`\n   * and `ITerminalOptions.bellSound`.\n   */\n  public bell(): boolean {\n    this._onRequestBell.fire();\n    return true;\n  }\n\n  /**\n   * LF\n   * Line Feed or New Line (NL).  (LF  is Ctrl-J).\n   *\n   * @vt: #Y   C0    LF   \"Line Feed\"            \"\\n, \\x0A\"  \"Move the cursor one row down, scrolling if needed.\"\n   * Scrolling is restricted to scroll margins and will only happen on the bottom line.\n   *\n   * @vt: #Y   C0    VT   \"Vertical Tabulation\"  \"\\v, \\x0B\"  \"Treated as LF.\"\n   * @vt: #Y   C0    FF   \"Form Feed\"            \"\\f, \\x0C\"  \"Treated as LF.\"\n   */\n  public lineFeed(): boolean {\n    this._dirtyRowService.markDirty(this._activeBuffer.y);\n    if (this._optionsService.rawOptions.convertEol) {\n      this._activeBuffer.x = 0;\n    }\n    this._activeBuffer.y++;\n    if (this._activeBuffer.y === this._activeBuffer.scrollBottom + 1) {\n      this._activeBuffer.y--;\n      this._bufferService.scroll(this._eraseAttrData());\n    } else if (this._activeBuffer.y >= this._bufferService.rows) {\n      this._activeBuffer.y = this._bufferService.rows - 1;\n    }\n    // If the end of the line is hit, prevent this action from wrapping around to the next line.\n    if (this._activeBuffer.x >= this._bufferService.cols) {\n      this._activeBuffer.x--;\n    }\n    this._dirtyRowService.markDirty(this._activeBuffer.y);\n\n    this._onLineFeed.fire();\n    return true;\n  }\n\n  /**\n   * CR\n   * Carriage Return (Ctrl-M).\n   *\n   * @vt: #Y   C0    CR   \"Carriage Return\"  \"\\r, \\x0D\"  \"Move the cursor to the beginning of the row.\"\n   */\n  public carriageReturn(): boolean {\n    this._activeBuffer.x = 0;\n    return true;\n  }\n\n  /**\n   * BS\n   * Backspace (Ctrl-H).\n   *\n   * @vt: #Y   C0    BS   \"Backspace\"  \"\\b, \\x08\"  \"Move the cursor one position to the left.\"\n   * By default it is not possible to move the cursor past the leftmost position.\n   * If `reverse wrap-around` (`CSI ? 45 h`) is set, a previous soft line wrap (DECAWM)\n   * can be undone with BS within the scroll margins. In that case the cursor will wrap back\n   * to the end of the previous row. Note that it is not possible to peek back into the scrollbuffer\n   * with the cursor, thus at the home position (top-leftmost cell) this has no effect.\n   */\n  public backspace(): boolean {\n    // reverse wrap-around is disabled\n    if (!this._coreService.decPrivateModes.reverseWraparound) {\n      this._restrictCursor();\n      if (this._activeBuffer.x > 0) {\n        this._activeBuffer.x--;\n      }\n      return true;\n    }\n\n    // reverse wrap-around is enabled\n    // other than for normal operation mode, reverse wrap-around allows the cursor\n    // to be at x=cols to be able to address the last cell of a row by BS\n    this._restrictCursor(this._bufferService.cols);\n\n    if (this._activeBuffer.x > 0) {\n      this._activeBuffer.x--;\n    } else {\n      /**\n       * reverse wrap-around handling:\n       * Our implementation deviates from xterm on purpose. Details:\n       * - only previous soft NLs can be reversed (isWrapped=true)\n       * - only works within scrollborders (top/bottom, left/right not yet supported)\n       * - cannot peek into scrollbuffer\n       * - any cursor movement sequence keeps working as expected\n       */\n      if (this._activeBuffer.x === 0\n        && this._activeBuffer.y > this._activeBuffer.scrollTop\n        && this._activeBuffer.y <= this._activeBuffer.scrollBottom\n        && this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)?.isWrapped) {\n        this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)!.isWrapped = false;\n        this._activeBuffer.y--;\n        this._activeBuffer.x = this._bufferService.cols - 1;\n        // find last taken cell - last cell can have 3 different states:\n        // - hasContent(true) + hasWidth(1): narrow char - we are done\n        // - hasWidth(0): second part of wide char - we are done\n        // - hasContent(false) + hasWidth(1): empty cell due to early wrapping wide char, go one cell further back\n        const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)!;\n        if (line.hasWidth(this._activeBuffer.x) && !line.hasContent(this._activeBuffer.x)) {\n          this._activeBuffer.x--;\n          // We do this only once, since width=1 + hasContent=false currently happens only once before\n          // early wrapping of a wide char.\n          // This needs to be fixed once we support graphemes taking more than 2 cells.\n        }\n      }\n    }\n    this._restrictCursor();\n    return true;\n  }\n\n  /**\n   * TAB\n   * Horizontal Tab (HT) (Ctrl-I).\n   *\n   * @vt: #Y   C0    HT   \"Horizontal Tabulation\"  \"\\t, \\x09\"  \"Move the cursor to the next character tab stop.\"\n   */\n  public tab(): boolean {\n    if (this._activeBuffer.x >= this._bufferService.cols) {\n      return true;\n    }\n    const originalX = this._activeBuffer.x;\n    this._activeBuffer.x = this._activeBuffer.nextStop();\n    if (this._optionsService.rawOptions.screenReaderMode) {\n      this._onA11yTab.fire(this._activeBuffer.x - originalX);\n    }\n    return true;\n  }\n\n  /**\n   * SO\n   * Shift Out (Ctrl-N) -> Switch to Alternate Character Set.  This invokes the\n   * G1 character set.\n   *\n   * @vt: #P[Only limited ISO-2022 charset support.]  C0    SO   \"Shift Out\"  \"\\x0E\"  \"Switch to an alternative character set.\"\n   */\n  public shiftOut(): boolean {\n    this._charsetService.setgLevel(1);\n    return true;\n  }\n\n  /**\n   * SI\n   * Shift In (Ctrl-O) -> Switch to Standard Character Set.  This invokes the G0\n   * character set (the default).\n   *\n   * @vt: #Y   C0    SI   \"Shift In\"   \"\\x0F\"  \"Return to regular character set after Shift Out.\"\n   */\n  public shiftIn(): boolean {\n    this._charsetService.setgLevel(0);\n    return true;\n  }\n\n  /**\n   * Restrict cursor to viewport size / scroll margin (origin mode).\n   */\n  private _restrictCursor(maxCol: number = this._bufferService.cols - 1): void {\n    this._activeBuffer.x = Math.min(maxCol, Math.max(0, this._activeBuffer.x));\n    this._activeBuffer.y = this._coreService.decPrivateModes.origin\n      ? Math.min(this._activeBuffer.scrollBottom, Math.max(this._activeBuffer.scrollTop, this._activeBuffer.y))\n      : Math.min(this._bufferService.rows - 1, Math.max(0, this._activeBuffer.y));\n    this._dirtyRowService.markDirty(this._activeBuffer.y);\n  }\n\n  /**\n   * Set absolute cursor position.\n   */\n  private _setCursor(x: number, y: number): void {\n    this._dirtyRowService.markDirty(this._activeBuffer.y);\n    if (this._coreService.decPrivateModes.origin) {\n      this._activeBuffer.x = x;\n      this._activeBuffer.y = this._activeBuffer.scrollTop + y;\n    } else {\n      this._activeBuffer.x = x;\n      this._activeBuffer.y = y;\n    }\n    this._restrictCursor();\n    this._dirtyRowService.markDirty(this._activeBuffer.y);\n  }\n\n  /**\n   * Set relative cursor position.\n   */\n  private _moveCursor(x: number, y: number): void {\n    // for relative changes we have to make sure we are within 0 .. cols/rows - 1\n    // before calculating the new position\n    this._restrictCursor();\n    this._setCursor(this._activeBuffer.x + x, this._activeBuffer.y + y);\n  }\n\n  /**\n   * CSI Ps A\n   * Cursor Up Ps Times (default = 1) (CUU).\n   *\n   * @vt: #Y CSI CUU   \"Cursor Up\"   \"CSI Ps A\"  \"Move cursor `Ps` times up (default=1).\"\n   * If the cursor would pass the top scroll margin, it will stop there.\n   */\n  public cursorUp(params: IParams): boolean {\n    // stop at scrollTop\n    const diffToTop = this._activeBuffer.y - this._activeBuffer.scrollTop;\n    if (diffToTop >= 0) {\n      this._moveCursor(0, -Math.min(diffToTop, params.params[0] || 1));\n    } else {\n      this._moveCursor(0, -(params.params[0] || 1));\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps B\n   * Cursor Down Ps Times (default = 1) (CUD).\n   *\n   * @vt: #Y CSI CUD   \"Cursor Down\"   \"CSI Ps B\"  \"Move cursor `Ps` times down (default=1).\"\n   * If the cursor would pass the bottom scroll margin, it will stop there.\n   */\n  public cursorDown(params: IParams): boolean {\n    // stop at scrollBottom\n    const diffToBottom = this._activeBuffer.scrollBottom - this._activeBuffer.y;\n    if (diffToBottom >= 0) {\n      this._moveCursor(0, Math.min(diffToBottom, params.params[0] || 1));\n    } else {\n      this._moveCursor(0, params.params[0] || 1);\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps C\n   * Cursor Forward Ps Times (default = 1) (CUF).\n   *\n   * @vt: #Y CSI CUF   \"Cursor Forward\"    \"CSI Ps C\"  \"Move cursor `Ps` times forward (default=1).\"\n   */\n  public cursorForward(params: IParams): boolean {\n    this._moveCursor(params.params[0] || 1, 0);\n    return true;\n  }\n\n  /**\n   * CSI Ps D\n   * Cursor Backward Ps Times (default = 1) (CUB).\n   *\n   * @vt: #Y CSI CUB   \"Cursor Backward\"   \"CSI Ps D\"  \"Move cursor `Ps` times backward (default=1).\"\n   */\n  public cursorBackward(params: IParams): boolean {\n    this._moveCursor(-(params.params[0] || 1), 0);\n    return true;\n  }\n\n  /**\n   * CSI Ps E\n   * Cursor Next Line Ps Times (default = 1) (CNL).\n   * Other than cursorDown (CUD) also set the cursor to first column.\n   *\n   * @vt: #Y CSI CNL   \"Cursor Next Line\"  \"CSI Ps E\"  \"Move cursor `Ps` times down (default=1) and to the first column.\"\n   * Same as CUD, additionally places the cursor at the first column.\n   */\n  public cursorNextLine(params: IParams): boolean {\n    this.cursorDown(params);\n    this._activeBuffer.x = 0;\n    return true;\n  }\n\n  /**\n   * CSI Ps F\n   * Cursor Previous Line Ps Times (default = 1) (CPL).\n   * Other than cursorUp (CUU) also set the cursor to first column.\n   *\n   * @vt: #Y CSI CPL   \"Cursor Backward\"   \"CSI Ps F\"  \"Move cursor `Ps` times up (default=1) and to the first column.\"\n   * Same as CUU, additionally places the cursor at the first column.\n   */\n  public cursorPrecedingLine(params: IParams): boolean {\n    this.cursorUp(params);\n    this._activeBuffer.x = 0;\n    return true;\n  }\n\n  /**\n   * CSI Ps G\n   * Cursor Character Absolute  [column] (default = [row,1]) (CHA).\n   *\n   * @vt: #Y CSI CHA   \"Cursor Horizontal Absolute\" \"CSI Ps G\" \"Move cursor to `Ps`-th column of the active row (default=1).\"\n   */\n  public cursorCharAbsolute(params: IParams): boolean {\n    this._setCursor((params.params[0] || 1) - 1, this._activeBuffer.y);\n    return true;\n  }\n\n  /**\n   * CSI Ps ; Ps H\n   * Cursor Position [row;column] (default = [1,1]) (CUP).\n   *\n   * @vt: #Y CSI CUP   \"Cursor Position\"   \"CSI Ps ; Ps H\"  \"Set cursor to position [`Ps`, `Ps`] (default = [1, 1]).\"\n   * If ORIGIN mode is set, places the cursor to the absolute position within the scroll margins.\n   * If ORIGIN mode is not set, places the cursor to the absolute position within the viewport.\n   * Note that the coordinates are 1-based, thus the top left position starts at `1 ; 1`.\n   */\n  public cursorPosition(params: IParams): boolean {\n    this._setCursor(\n      // col\n      (params.length >= 2) ? (params.params[1] || 1) - 1 : 0,\n      // row\n      (params.params[0] || 1) - 1\n    );\n    return true;\n  }\n\n  /**\n   * CSI Pm `  Character Position Absolute\n   *   [column] (default = [row,1]) (HPA).\n   * Currently same functionality as CHA.\n   *\n   * @vt: #Y CSI HPA   \"Horizontal Position Absolute\"  \"CSI Ps ` \" \"Same as CHA.\"\n   */\n  public charPosAbsolute(params: IParams): boolean {\n    this._setCursor((params.params[0] || 1) - 1, this._activeBuffer.y);\n    return true;\n  }\n\n  /**\n   * CSI Pm a  Character Position Relative\n   *   [columns] (default = [row,col+1]) (HPR)\n   *\n   * @vt: #Y CSI HPR   \"Horizontal Position Relative\"  \"CSI Ps a\"  \"Same as CUF.\"\n   */\n  public hPositionRelative(params: IParams): boolean {\n    this._moveCursor(params.params[0] || 1, 0);\n    return true;\n  }\n\n  /**\n   * CSI Pm d  Vertical Position Absolute (VPA)\n   *   [row] (default = [1,column])\n   *\n   * @vt: #Y CSI VPA   \"Vertical Position Absolute\"    \"CSI Ps d\"  \"Move cursor to `Ps`-th row (default=1).\"\n   */\n  public linePosAbsolute(params: IParams): boolean {\n    this._setCursor(this._activeBuffer.x, (params.params[0] || 1) - 1);\n    return true;\n  }\n\n  /**\n   * CSI Pm e  Vertical Position Relative (VPR)\n   *   [rows] (default = [row+1,column])\n   * reuse CSI Ps B ?\n   *\n   * @vt: #Y CSI VPR   \"Vertical Position Relative\"    \"CSI Ps e\"  \"Move cursor `Ps` times down (default=1).\"\n   */\n  public vPositionRelative(params: IParams): boolean {\n    this._moveCursor(0, params.params[0] || 1);\n    return true;\n  }\n\n  /**\n   * CSI Ps ; Ps f\n   *   Horizontal and Vertical Position [row;column] (default =\n   *   [1,1]) (HVP).\n   *   Same as CUP.\n   *\n   * @vt: #Y CSI HVP   \"Horizontal and Vertical Position\" \"CSI Ps ; Ps f\"  \"Same as CUP.\"\n   */\n  public hVPosition(params: IParams): boolean {\n    this.cursorPosition(params);\n    return true;\n  }\n\n  /**\n   * CSI Ps g  Tab Clear (TBC).\n   *     Ps = 0  -> Clear Current Column (default).\n   *     Ps = 3  -> Clear All.\n   * Potentially:\n   *   Ps = 2  -> Clear Stops on Line.\n   *   http://vt100.net/annarbor/aaa-ug/section6.html\n   *\n   * @vt: #Y CSI TBC   \"Tab Clear\" \"CSI Ps g\"  \"Clear tab stops at current position (0) or all (3) (default=0).\"\n   * Clearing tabstops off the active row (Ps = 2, VT100) is currently not supported.\n   */\n  public tabClear(params: IParams): boolean {\n    const param = params.params[0];\n    if (param === 0) {\n      delete this._activeBuffer.tabs[this._activeBuffer.x];\n    } else if (param === 3) {\n      this._activeBuffer.tabs = {};\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps I\n   *   Cursor Forward Tabulation Ps tab stops (default = 1) (CHT).\n   *\n   * @vt: #Y CSI CHT   \"Cursor Horizontal Tabulation\" \"CSI Ps I\" \"Move cursor `Ps` times tabs forward (default=1).\"\n   */\n  public cursorForwardTab(params: IParams): boolean {\n    if (this._activeBuffer.x >= this._bufferService.cols) {\n      return true;\n    }\n    let param = params.params[0] || 1;\n    while (param--) {\n      this._activeBuffer.x = this._activeBuffer.nextStop();\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps Z  Cursor Backward Tabulation Ps tab stops (default = 1) (CBT).\n   *\n   * @vt: #Y CSI CBT   \"Cursor Backward Tabulation\"  \"CSI Ps Z\"  \"Move cursor `Ps` tabs backward (default=1).\"\n   */\n  public cursorBackwardTab(params: IParams): boolean {\n    if (this._activeBuffer.x >= this._bufferService.cols) {\n      return true;\n    }\n    let param = params.params[0] || 1;\n\n    while (param--) {\n      this._activeBuffer.x = this._activeBuffer.prevStop();\n    }\n    return true;\n  }\n\n\n  /**\n   * Helper method to erase cells in a terminal row.\n   * The cell gets replaced with the eraseChar of the terminal.\n   * @param y row index\n   * @param start first cell index to be erased\n   * @param end   end - 1 is last erased cell\n   * @param cleanWrap clear the isWrapped flag\n   */\n  private _eraseInBufferLine(y: number, start: number, end: number, clearWrap: boolean = false): void {\n    const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y)!;\n    line.replaceCells(\n      start,\n      end,\n      this._activeBuffer.getNullCell(this._eraseAttrData()),\n      this._eraseAttrData()\n    );\n    if (clearWrap) {\n      line.isWrapped = false;\n    }\n  }\n\n  /**\n   * Helper method to reset cells in a terminal row.\n   * The cell gets replaced with the eraseChar of the terminal and the isWrapped property is set to false.\n   * @param y row index\n   */\n  private _resetBufferLine(y: number): void {\n    const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y)!;\n    line.fill(this._activeBuffer.getNullCell(this._eraseAttrData()));\n    line.isWrapped = false;\n  }\n\n  /**\n   * CSI Ps J  Erase in Display (ED).\n   *     Ps = 0  -> Erase Below (default).\n   *     Ps = 1  -> Erase Above.\n   *     Ps = 2  -> Erase All.\n   *     Ps = 3  -> Erase Saved Lines (xterm).\n   * CSI ? Ps J\n   *   Erase in Display (DECSED).\n   *     Ps = 0  -> Selective Erase Below (default).\n   *     Ps = 1  -> Selective Erase Above.\n   *     Ps = 2  -> Selective Erase All.\n   *\n   * @vt: #Y CSI ED  \"Erase In Display\"  \"CSI Ps J\"  \"Erase various parts of the viewport.\"\n   * Supported param values:\n   *\n   * | Ps | Effect                                                       |\n   * | -- | ------------------------------------------------------------ |\n   * | 0  | Erase from the cursor through the end of the viewport.       |\n   * | 1  | Erase from the beginning of the viewport through the cursor. |\n   * | 2  | Erase complete viewport.                                     |\n   * | 3  | Erase scrollback.                                            |\n   *\n   * @vt: #P[Protection attributes are not supported.] CSI DECSED   \"Selective Erase In Display\"  \"CSI ? Ps J\"  \"Currently the same as ED.\"\n   */\n  public eraseInDisplay(params: IParams): boolean {\n    this._restrictCursor(this._bufferService.cols);\n    let j;\n    switch (params.params[0]) {\n      case 0:\n        j = this._activeBuffer.y;\n        this._dirtyRowService.markDirty(j);\n        this._eraseInBufferLine(j++, this._activeBuffer.x, this._bufferService.cols, this._activeBuffer.x === 0);\n        for (; j < this._bufferService.rows; j++) {\n          this._resetBufferLine(j);\n        }\n        this._dirtyRowService.markDirty(j);\n        break;\n      case 1:\n        j = this._activeBuffer.y;\n        this._dirtyRowService.markDirty(j);\n        // Deleted front part of line and everything before. This line will no longer be wrapped.\n        this._eraseInBufferLine(j, 0, this._activeBuffer.x + 1, true);\n        if (this._activeBuffer.x + 1 >= this._bufferService.cols) {\n          // Deleted entire previous line. This next line can no longer be wrapped.\n          this._activeBuffer.lines.get(j + 1)!.isWrapped = false;\n        }\n        while (j--) {\n          this._resetBufferLine(j);\n        }\n        this._dirtyRowService.markDirty(0);\n        break;\n      case 2:\n        j = this._bufferService.rows;\n        this._dirtyRowService.markDirty(j - 1);\n        while (j--) {\n          this._resetBufferLine(j);\n        }\n        this._dirtyRowService.markDirty(0);\n        break;\n      case 3:\n        // Clear scrollback (everything not in viewport)\n        const scrollBackSize = this._activeBuffer.lines.length - this._bufferService.rows;\n        if (scrollBackSize > 0) {\n          this._activeBuffer.lines.trimStart(scrollBackSize);\n          this._activeBuffer.ybase = Math.max(this._activeBuffer.ybase - scrollBackSize, 0);\n          this._activeBuffer.ydisp = Math.max(this._activeBuffer.ydisp - scrollBackSize, 0);\n          // Force a scroll event to refresh viewport\n          this._onScroll.fire(0);\n        }\n        break;\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps K  Erase in Line (EL).\n   *     Ps = 0  -> Erase to Right (default).\n   *     Ps = 1  -> Erase to Left.\n   *     Ps = 2  -> Erase All.\n   * CSI ? Ps K\n   *   Erase in Line (DECSEL).\n   *     Ps = 0  -> Selective Erase to Right (default).\n   *     Ps = 1  -> Selective Erase to Left.\n   *     Ps = 2  -> Selective Erase All.\n   *\n   * @vt: #Y CSI EL    \"Erase In Line\"  \"CSI Ps K\"  \"Erase various parts of the active row.\"\n   * Supported param values:\n   *\n   * | Ps | Effect                                                   |\n   * | -- | -------------------------------------------------------- |\n   * | 0  | Erase from the cursor through the end of the row.        |\n   * | 1  | Erase from the beginning of the line through the cursor. |\n   * | 2  | Erase complete line.                                     |\n   *\n   * @vt: #P[Protection attributes are not supported.] CSI DECSEL   \"Selective Erase In Line\"  \"CSI ? Ps K\"  \"Currently the same as EL.\"\n   */\n  public eraseInLine(params: IParams): boolean {\n    this._restrictCursor(this._bufferService.cols);\n    switch (params.params[0]) {\n      case 0:\n        this._eraseInBufferLine(this._activeBuffer.y, this._activeBuffer.x, this._bufferService.cols, this._activeBuffer.x === 0);\n        break;\n      case 1:\n        this._eraseInBufferLine(this._activeBuffer.y, 0, this._activeBuffer.x + 1, false);\n        break;\n      case 2:\n        this._eraseInBufferLine(this._activeBuffer.y, 0, this._bufferService.cols, true);\n        break;\n    }\n    this._dirtyRowService.markDirty(this._activeBuffer.y);\n    return true;\n  }\n\n  /**\n   * CSI Ps L\n   * Insert Ps Line(s) (default = 1) (IL).\n   *\n   * @vt: #Y CSI IL  \"Insert Line\"   \"CSI Ps L\"  \"Insert `Ps` blank lines at active row (default=1).\"\n   * For every inserted line at the scroll top one line at the scroll bottom gets removed.\n   * The cursor is set to the first column.\n   * IL has no effect if the cursor is outside the scroll margins.\n   */\n  public insertLines(params: IParams): boolean {\n    this._restrictCursor();\n    let param = params.params[0] || 1;\n\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n\n    const row: number = this._activeBuffer.ybase + this._activeBuffer.y;\n\n    const scrollBottomRowsOffset = this._bufferService.rows - 1 - this._activeBuffer.scrollBottom;\n    const scrollBottomAbsolute = this._bufferService.rows - 1 + this._activeBuffer.ybase - scrollBottomRowsOffset + 1;\n    while (param--) {\n      // test: echo -e '\\e[44m\\e[1L\\e[0m'\n      // blankLine(true) - xterm/linux behavior\n      this._activeBuffer.lines.splice(scrollBottomAbsolute - 1, 1);\n      this._activeBuffer.lines.splice(row, 0, this._activeBuffer.getBlankLine(this._eraseAttrData()));\n    }\n\n    this._dirtyRowService.markRangeDirty(this._activeBuffer.y, this._activeBuffer.scrollBottom);\n    this._activeBuffer.x = 0; // see https://vt100.net/docs/vt220-rm/chapter4.html - vt220 only?\n    return true;\n  }\n\n  /**\n   * CSI Ps M\n   * Delete Ps Line(s) (default = 1) (DL).\n   *\n   * @vt: #Y CSI DL  \"Delete Line\"   \"CSI Ps M\"  \"Delete `Ps` lines at active row (default=1).\"\n   * For every deleted line at the scroll top one blank line at the scroll bottom gets appended.\n   * The cursor is set to the first column.\n   * DL has no effect if the cursor is outside the scroll margins.\n   */\n  public deleteLines(params: IParams): boolean {\n    this._restrictCursor();\n    let param = params.params[0] || 1;\n\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n\n    const row: number = this._activeBuffer.ybase + this._activeBuffer.y;\n\n    let j: number;\n    j = this._bufferService.rows - 1 - this._activeBuffer.scrollBottom;\n    j = this._bufferService.rows - 1 + this._activeBuffer.ybase - j;\n    while (param--) {\n      // test: echo -e '\\e[44m\\e[1M\\e[0m'\n      // blankLine(true) - xterm/linux behavior\n      this._activeBuffer.lines.splice(row, 1);\n      this._activeBuffer.lines.splice(j, 0, this._activeBuffer.getBlankLine(this._eraseAttrData()));\n    }\n\n    this._dirtyRowService.markRangeDirty(this._activeBuffer.y, this._activeBuffer.scrollBottom);\n    this._activeBuffer.x = 0; // see https://vt100.net/docs/vt220-rm/chapter4.html - vt220 only?\n    return true;\n  }\n\n  /**\n   * CSI Ps @\n   * Insert Ps (Blank) Character(s) (default = 1) (ICH).\n   *\n   * @vt: #Y CSI ICH  \"Insert Characters\"   \"CSI Ps @\"  \"Insert `Ps` (blank) characters (default = 1).\"\n   * The ICH sequence inserts `Ps` blank characters. The cursor remains at the beginning of the blank characters.\n   * Text between the cursor and right margin moves to the right. Characters moved past the right margin are lost.\n   *\n   *\n   * FIXME: check against xterm - should not work outside of scroll margins (see VT520 manual)\n   */\n  public insertChars(params: IParams): boolean {\n    this._restrictCursor();\n    const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y);\n    if (line) {\n      line.insertCells(\n        this._activeBuffer.x,\n        params.params[0] || 1,\n        this._activeBuffer.getNullCell(this._eraseAttrData()),\n        this._eraseAttrData()\n      );\n      this._dirtyRowService.markDirty(this._activeBuffer.y);\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps P\n   * Delete Ps Character(s) (default = 1) (DCH).\n   *\n   * @vt: #Y CSI DCH   \"Delete Character\"  \"CSI Ps P\"  \"Delete `Ps` characters (default=1).\"\n   * As characters are deleted, the remaining characters between the cursor and right margin move to the left.\n   * Character attributes move with the characters. The terminal adds blank characters at the right margin.\n   *\n   *\n   * FIXME: check against xterm - should not work outside of scroll margins (see VT520 manual)\n   */\n  public deleteChars(params: IParams): boolean {\n    this._restrictCursor();\n    const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y);\n    if (line) {\n      line.deleteCells(\n        this._activeBuffer.x,\n        params.params[0] || 1,\n        this._activeBuffer.getNullCell(this._eraseAttrData()),\n        this._eraseAttrData()\n      );\n      this._dirtyRowService.markDirty(this._activeBuffer.y);\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps S  Scroll up Ps lines (default = 1) (SU).\n   *\n   * @vt: #Y CSI SU  \"Scroll Up\"   \"CSI Ps S\"  \"Scroll `Ps` lines up (default=1).\"\n   *\n   *\n   * FIXME: scrolled out lines at top = 1 should add to scrollback (xterm)\n   */\n  public scrollUp(params: IParams): boolean {\n    let param = params.params[0] || 1;\n\n    while (param--) {\n      this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollTop, 1);\n      this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollBottom, 0, this._activeBuffer.getBlankLine(this._eraseAttrData()));\n    }\n    this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Ps T  Scroll down Ps lines (default = 1) (SD).\n   *\n   * @vt: #Y CSI SD  \"Scroll Down\"   \"CSI Ps T\"  \"Scroll `Ps` lines down (default=1).\"\n   */\n  public scrollDown(params: IParams): boolean {\n    let param = params.params[0] || 1;\n\n    while (param--) {\n      this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollBottom, 1);\n      this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollTop, 0, this._activeBuffer.getBlankLine(DEFAULT_ATTR_DATA));\n    }\n    this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Ps SP @  Scroll left Ps columns (default = 1) (SL) ECMA-48\n   *\n   * Notation: (Pn)\n   * Representation: CSI Pn 02/00 04/00\n   * Parameter default value: Pn = 1\n   * SL causes the data in the presentation component to be moved by n character positions\n   * if the line orientation is horizontal, or by n line positions if the line orientation\n   * is vertical, such that the data appear to move to the left; where n equals the value of Pn.\n   * The active presentation position is not affected by this control function.\n   *\n   * Supported:\n   *   - always left shift (no line orientation setting respected)\n   *\n   * @vt: #Y CSI SL  \"Scroll Left\" \"CSI Ps SP @\" \"Scroll viewport `Ps` times to the left.\"\n   * SL moves the content of all lines within the scroll margins `Ps` times to the left.\n   * SL has no effect outside of the scroll margins.\n   */\n  public scrollLeft(params: IParams): boolean {\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n    const param = params.params[0] || 1;\n    for (let y = this._activeBuffer.scrollTop; y <= this._activeBuffer.scrollBottom; ++y) {\n      const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y)!;\n      line.deleteCells(0, param, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData());\n      line.isWrapped = false;\n    }\n    this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Ps SP A  Scroll right Ps columns (default = 1) (SR) ECMA-48\n   *\n   * Notation: (Pn)\n   * Representation: CSI Pn 02/00 04/01\n   * Parameter default value: Pn = 1\n   * SR causes the data in the presentation component to be moved by n character positions\n   * if the line orientation is horizontal, or by n line positions if the line orientation\n   * is vertical, such that the data appear to move to the right; where n equals the value of Pn.\n   * The active presentation position is not affected by this control function.\n   *\n   * Supported:\n   *   - always right shift (no line orientation setting respected)\n   *\n   * @vt: #Y CSI SR  \"Scroll Right\"  \"CSI Ps SP A\"   \"Scroll viewport `Ps` times to the right.\"\n   * SL moves the content of all lines within the scroll margins `Ps` times to the right.\n   * Content at the right margin is lost.\n   * SL has no effect outside of the scroll margins.\n   */\n  public scrollRight(params: IParams): boolean {\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n    const param = params.params[0] || 1;\n    for (let y = this._activeBuffer.scrollTop; y <= this._activeBuffer.scrollBottom; ++y) {\n      const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y)!;\n      line.insertCells(0, param, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData());\n      line.isWrapped = false;\n    }\n    this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Pm ' }\n   * Insert Ps Column(s) (default = 1) (DECIC), VT420 and up.\n   *\n   * @vt: #Y CSI DECIC \"Insert Columns\"  \"CSI Ps ' }\"  \"Insert `Ps` columns at cursor position.\"\n   * DECIC inserts `Ps` times blank columns at the cursor position for all lines with the scroll margins,\n   * moving content to the right. Content at the right margin is lost.\n   * DECIC has no effect outside the scrolling margins.\n   */\n  public insertColumns(params: IParams): boolean {\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n    const param = params.params[0] || 1;\n    for (let y = this._activeBuffer.scrollTop; y <= this._activeBuffer.scrollBottom; ++y) {\n      const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y)!;\n      line.insertCells(this._activeBuffer.x, param, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData());\n      line.isWrapped = false;\n    }\n    this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Pm ' ~\n   * Delete Ps Column(s) (default = 1) (DECDC), VT420 and up.\n   *\n   * @vt: #Y CSI DECDC \"Delete Columns\"  \"CSI Ps ' ~\"  \"Delete `Ps` columns at cursor position.\"\n   * DECDC deletes `Ps` times columns at the cursor position for all lines with the scroll margins,\n   * moving content to the left. Blank columns are added at the right margin.\n   * DECDC has no effect outside the scrolling margins.\n   */\n  public deleteColumns(params: IParams): boolean {\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n    const param = params.params[0] || 1;\n    for (let y = this._activeBuffer.scrollTop; y <= this._activeBuffer.scrollBottom; ++y) {\n      const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y)!;\n      line.deleteCells(this._activeBuffer.x, param, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData());\n      line.isWrapped = false;\n    }\n    this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Ps X\n   * Erase Ps Character(s) (default = 1) (ECH).\n   *\n   * @vt: #Y CSI ECH   \"Erase Character\"   \"CSI Ps X\"  \"Erase `Ps` characters from current cursor position to the right (default=1).\"\n   * ED erases `Ps` characters from current cursor position to the right.\n   * ED works inside or outside the scrolling margins.\n   */\n  public eraseChars(params: IParams): boolean {\n    this._restrictCursor();\n    const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y);\n    if (line) {\n      line.replaceCells(\n        this._activeBuffer.x,\n        this._activeBuffer.x + (params.params[0] || 1),\n        this._activeBuffer.getNullCell(this._eraseAttrData()),\n        this._eraseAttrData()\n      );\n      this._dirtyRowService.markDirty(this._activeBuffer.y);\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps b  Repeat the preceding graphic character Ps times (REP).\n   * From ECMA 48 (@see http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-048.pdf)\n   *    Notation: (Pn)\n   *    Representation: CSI Pn 06/02\n   *    Parameter default value: Pn = 1\n   *    REP is used to indicate that the preceding character in the data stream,\n   *    if it is a graphic character (represented by one or more bit combinations) including SPACE,\n   *    is to be repeated n times, where n equals the value of Pn.\n   *    If the character preceding REP is a control function or part of a control function,\n   *    the effect of REP is not defined by this Standard.\n   *\n   * Since we propagate the terminal as xterm-256color we have to follow xterm's behavior:\n   *    - fullwidth + surrogate chars are ignored\n   *    - for combining chars only the base char gets repeated\n   *    - text attrs are applied normally\n   *    - wrap around is respected\n   *    - any valid sequence resets the carried forward char\n   *\n   * Note: To get reset on a valid sequence working correctly without much runtime penalty,\n   * the preceding codepoint is stored on the parser in `this.print` and reset during `parser.parse`.\n   *\n   * @vt: #Y CSI REP   \"Repeat Preceding Character\"    \"CSI Ps b\"  \"Repeat preceding character `Ps` times (default=1).\"\n   * REP repeats the previous character `Ps` times advancing the cursor, also wrapping if DECAWM is set.\n   * REP has no effect if the sequence does not follow a printable ASCII character\n   * (NOOP for any other sequence in between or NON ASCII characters).\n   */\n  public repeatPrecedingCharacter(params: IParams): boolean {\n    if (!this._parser.precedingCodepoint) {\n      return true;\n    }\n    // call print to insert the chars and handle correct wrapping\n    const length = params.params[0] || 1;\n    const data = new Uint32Array(length);\n    for (let i = 0; i < length; ++i) {\n      data[i] = this._parser.precedingCodepoint;\n    }\n    this.print(data, 0, data.length);\n    return true;\n  }\n\n  /**\n   * CSI Ps c  Send Device Attributes (Primary DA).\n   *     Ps = 0  or omitted -> request attributes from terminal.  The\n   *     response depends on the decTerminalID resource setting.\n   *     -> CSI ? 1 ; 2 c  (``VT100 with Advanced Video Option'')\n   *     -> CSI ? 1 ; 0 c  (``VT101 with No Options'')\n   *     -> CSI ? 6 c  (``VT102'')\n   *     -> CSI ? 6 0 ; 1 ; 2 ; 6 ; 8 ; 9 ; 1 5 ; c  (``VT220'')\n   *   The VT100-style response parameters do not mean anything by\n   *   themselves.  VT220 parameters do, telling the host what fea-\n   *   tures the terminal supports:\n   *     Ps = 1  -> 132-columns.\n   *     Ps = 2  -> Printer.\n   *     Ps = 6  -> Selective erase.\n   *     Ps = 8  -> User-defined keys.\n   *     Ps = 9  -> National replacement character sets.\n   *     Ps = 1 5  -> Technical characters.\n   *     Ps = 2 2  -> ANSI color, e.g., VT525.\n   *     Ps = 2 9  -> ANSI text locator (i.e., DEC Locator mode).\n   *\n   * @vt: #Y CSI DA1   \"Primary Device Attributes\"     \"CSI c\"  \"Send primary device attributes.\"\n   *\n   *\n   * TODO: fix and cleanup response\n   */\n  public sendDeviceAttributesPrimary(params: IParams): boolean {\n    if (params.params[0] > 0) {\n      return true;\n    }\n    if (this._is('xterm') || this._is('rxvt-unicode') || this._is('screen')) {\n      this._coreService.triggerDataEvent(C0.ESC + '[?1;2c');\n    } else if (this._is('linux')) {\n      this._coreService.triggerDataEvent(C0.ESC + '[?6c');\n    }\n    return true;\n  }\n\n  /**\n   * CSI > Ps c\n   *   Send Device Attributes (Secondary DA).\n   *     Ps = 0  or omitted -> request the terminal's identification\n   *     code.  The response depends on the decTerminalID resource set-\n   *     ting.  It should apply only to VT220 and up, but xterm extends\n   *     this to VT100.\n   *     -> CSI  > Pp ; Pv ; Pc c\n   *   where Pp denotes the terminal type\n   *     Pp = 0  -> ``VT100''.\n   *     Pp = 1  -> ``VT220''.\n   *   and Pv is the firmware version (for xterm, this was originally\n   *   the XFree86 patch number, starting with 95).  In a DEC termi-\n   *   nal, Pc indicates the ROM cartridge registration number and is\n   *   always zero.\n   * More information:\n   *   xterm/charproc.c - line 2012, for more information.\n   *   vim responds with ^[[?0c or ^[[?1c after the terminal's response (?)\n   *\n   * @vt: #Y CSI DA2   \"Secondary Device Attributes\"   \"CSI > c\" \"Send primary device attributes.\"\n   *\n   *\n   * TODO: fix and cleanup response\n   */\n  public sendDeviceAttributesSecondary(params: IParams): boolean {\n    if (params.params[0] > 0) {\n      return true;\n    }\n    // xterm and urxvt\n    // seem to spit this\n    // out around ~370 times (?).\n    if (this._is('xterm')) {\n      this._coreService.triggerDataEvent(C0.ESC + '[>0;276;0c');\n    } else if (this._is('rxvt-unicode')) {\n      this._coreService.triggerDataEvent(C0.ESC + '[>85;95;0c');\n    } else if (this._is('linux')) {\n      // not supported by linux console.\n      // linux console echoes parameters.\n      this._coreService.triggerDataEvent(params.params[0] + 'c');\n    } else if (this._is('screen')) {\n      this._coreService.triggerDataEvent(C0.ESC + '[>83;40003;0c');\n    }\n    return true;\n  }\n\n  /**\n   * Evaluate if the current terminal is the given argument.\n   * @param term The terminal name to evaluate\n   */\n  private _is(term: string): boolean {\n    return (this._optionsService.rawOptions.termName + '').indexOf(term) === 0;\n  }\n\n  /**\n   * CSI Pm h  Set Mode (SM).\n   *     Ps = 2  -> Keyboard Action Mode (AM).\n   *     Ps = 4  -> Insert Mode (IRM).\n   *     Ps = 1 2  -> Send/receive (SRM).\n   *     Ps = 2 0  -> Automatic Newline (LNM).\n   *\n   * @vt: #P[Only IRM is supported.]    CSI SM    \"Set Mode\"  \"CSI Pm h\"  \"Set various terminal modes.\"\n   * Supported param values by SM:\n   *\n   * | Param | Action                                 | Support |\n   * | ----- | -------------------------------------- | ------- |\n   * | 2     | Keyboard Action Mode (KAM). Always on. | #N      |\n   * | 4     | Insert Mode (IRM).                     | #Y      |\n   * | 12    | Send/receive (SRM). Always off.        | #N      |\n   * | 20    | Automatic Newline (LNM). Always off.   | #N      |\n   */\n  public setMode(params: IParams): boolean {\n    for (let i = 0; i < params.length; i++) {\n      switch (params.params[i]) {\n        case 4:\n          this._coreService.modes.insertMode = true;\n          break;\n        case 20:\n          // this._t.convertEol = true;\n          break;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * CSI ? Pm h\n   *   DEC Private Mode Set (DECSET).\n   *     Ps = 1  -> Application Cursor Keys (DECCKM).\n   *     Ps = 2  -> Designate USASCII for character sets G0-G3\n   *     (DECANM), and set VT100 mode.\n   *     Ps = 3  -> 132 Column Mode (DECCOLM).\n   *     Ps = 4  -> Smooth (Slow) Scroll (DECSCLM).\n   *     Ps = 5  -> Reverse Video (DECSCNM).\n   *     Ps = 6  -> Origin Mode (DECOM).\n   *     Ps = 7  -> Wraparound Mode (DECAWM).\n   *     Ps = 8  -> Auto-repeat Keys (DECARM).\n   *     Ps = 9  -> Send Mouse X & Y on button press.  See the sec-\n   *     tion Mouse Tracking.\n   *     Ps = 1 0  -> Show toolbar (rxvt).\n   *     Ps = 1 2  -> Start Blinking Cursor (att610).\n   *     Ps = 1 8  -> Print form feed (DECPFF).\n   *     Ps = 1 9  -> Set print extent to full screen (DECPEX).\n   *     Ps = 2 5  -> Show Cursor (DECTCEM).\n   *     Ps = 3 0  -> Show scrollbar (rxvt).\n   *     Ps = 3 5  -> Enable font-shifting functions (rxvt).\n   *     Ps = 3 8  -> Enter Tektronix Mode (DECTEK).\n   *     Ps = 4 0  -> Allow 80 -> 132 Mode.\n   *     Ps = 4 1  -> more(1) fix (see curses resource).\n   *     Ps = 4 2  -> Enable Nation Replacement Character sets (DECN-\n   *     RCM).\n   *     Ps = 4 4  -> Turn On Margin Bell.\n   *     Ps = 4 5  -> Reverse-wraparound Mode.\n   *     Ps = 4 6  -> Start Logging.  This is normally disabled by a\n   *     compile-time option.\n   *     Ps = 4 7  -> Use Alternate Screen Buffer.  (This may be dis-\n   *     abled by the titeInhibit resource).\n   *     Ps = 6 6  -> Application keypad (DECNKM).\n   *     Ps = 6 7  -> Backarrow key sends backspace (DECBKM).\n   *     Ps = 1 0 0 0  -> Send Mouse X & Y on button press and\n   *     release.  See the section Mouse Tracking.\n   *     Ps = 1 0 0 1  -> Use Hilite Mouse Tracking.\n   *     Ps = 1 0 0 2  -> Use Cell Motion Mouse Tracking.\n   *     Ps = 1 0 0 3  -> Use All Motion Mouse Tracking.\n   *     Ps = 1 0 0 4  -> Send FocusIn/FocusOut events.\n   *     Ps = 1 0 0 5  -> Enable Extended Mouse Mode.\n   *     Ps = 1 0 1 0  -> Scroll to bottom on tty output (rxvt).\n   *     Ps = 1 0 1 1  -> Scroll to bottom on key press (rxvt).\n   *     Ps = 1 0 3 4  -> Interpret \"meta\" key, sets eighth bit.\n   *     (enables the eightBitInput resource).\n   *     Ps = 1 0 3 5  -> Enable special modifiers for Alt and Num-\n   *     Lock keys.  (This enables the numLock resource).\n   *     Ps = 1 0 3 6  -> Send ESC   when Meta modifies a key.  (This\n   *     enables the metaSendsEscape resource).\n   *     Ps = 1 0 3 7  -> Send DEL from the editing-keypad Delete\n   *     key.\n   *     Ps = 1 0 3 9  -> Send ESC  when Alt modifies a key.  (This\n   *     enables the altSendsEscape resource).\n   *     Ps = 1 0 4 0  -> Keep selection even if not highlighted.\n   *     (This enables the keepSelection resource).\n   *     Ps = 1 0 4 1  -> Use the CLIPBOARD selection.  (This enables\n   *     the selectToClipboard resource).\n   *     Ps = 1 0 4 2  -> Enable Urgency window manager hint when\n   *     Control-G is received.  (This enables the bellIsUrgent\n   *     resource).\n   *     Ps = 1 0 4 3  -> Enable raising of the window when Control-G\n   *     is received.  (enables the popOnBell resource).\n   *     Ps = 1 0 4 7  -> Use Alternate Screen Buffer.  (This may be\n   *     disabled by the titeInhibit resource).\n   *     Ps = 1 0 4 8  -> Save cursor as in DECSC.  (This may be dis-\n   *     abled by the titeInhibit resource).\n   *     Ps = 1 0 4 9  -> Save cursor as in DECSC and use Alternate\n   *     Screen Buffer, clearing it first.  (This may be disabled by\n   *     the titeInhibit resource).  This combines the effects of the 1\n   *     0 4 7  and 1 0 4 8  modes.  Use this with terminfo-based\n   *     applications rather than the 4 7  mode.\n   *     Ps = 1 0 5 0  -> Set terminfo/termcap function-key mode.\n   *     Ps = 1 0 5 1  -> Set Sun function-key mode.\n   *     Ps = 1 0 5 2  -> Set HP function-key mode.\n   *     Ps = 1 0 5 3  -> Set SCO function-key mode.\n   *     Ps = 1 0 6 0  -> Set legacy keyboard emulation (X11R6).\n   *     Ps = 1 0 6 1  -> Set VT220 keyboard emulation.\n   *     Ps = 2 0 0 4  -> Set bracketed paste mode.\n   * Modes:\n   *   http: *vt100.net/docs/vt220-rm/chapter4.html\n   *\n   * @vt: #P[See below for supported modes.]    CSI DECSET  \"DEC Private Set Mode\" \"CSI ? Pm h\"  \"Set various terminal attributes.\"\n   * Supported param values by DECSET:\n   *\n   * | param | Action                                                  | Support |\n   * | ----- | ------------------------------------------------------- | --------|\n   * | 1     | Application Cursor Keys (DECCKM).                       | #Y      |\n   * | 2     | Designate US-ASCII for character sets G0-G3 (DECANM).   | #Y      |\n   * | 3     | 132 Column Mode (DECCOLM).                              | #Y      |\n   * | 6     | Origin Mode (DECOM).                                    | #Y      |\n   * | 7     | Auto-wrap Mode (DECAWM).                                | #Y      |\n   * | 8     | Auto-repeat Keys (DECARM). Always on.                   | #N      |\n   * | 9     | X10 xterm mouse protocol.                               | #Y      |\n   * | 12    | Start Blinking Cursor.                                  | #Y      |\n   * | 25    | Show Cursor (DECTCEM).                                  | #Y      |\n   * | 45    | Reverse wrap-around.                                    | #Y      |\n   * | 47    | Use Alternate Screen Buffer.                            | #Y      |\n   * | 66    | Application keypad (DECNKM).                            | #Y      |\n   * | 1000  | X11 xterm mouse protocol.                               | #Y      |\n   * | 1002  | Use Cell Motion Mouse Tracking.                         | #Y      |\n   * | 1003  | Use All Motion Mouse Tracking.                          | #Y      |\n   * | 1004  | Send FocusIn/FocusOut events                            | #Y      |\n   * | 1005  | Enable UTF-8 Mouse Mode.                                | #N      |\n   * | 1006  | Enable SGR Mouse Mode.                                  | #Y      |\n   * | 1015  | Enable urxvt Mouse Mode.                                | #N      |\n   * | 1047  | Use Alternate Screen Buffer.                            | #Y      |\n   * | 1048  | Save cursor as in DECSC.                                | #Y      |\n   * | 1049  | Save cursor and switch to alternate buffer clearing it. | #P[Does not clear the alternate buffer.] |\n   * | 2004  | Set bracketed paste mode.                               | #Y      |\n   *\n   *\n   * FIXME: implement DECSCNM, 1049 should clear altbuffer\n   */\n  public setModePrivate(params: IParams): boolean {\n    for (let i = 0; i < params.length; i++) {\n      switch (params.params[i]) {\n        case 1:\n          this._coreService.decPrivateModes.applicationCursorKeys = true;\n          break;\n        case 2:\n          this._charsetService.setgCharset(0, DEFAULT_CHARSET);\n          this._charsetService.setgCharset(1, DEFAULT_CHARSET);\n          this._charsetService.setgCharset(2, DEFAULT_CHARSET);\n          this._charsetService.setgCharset(3, DEFAULT_CHARSET);\n          // set VT100 mode here\n          break;\n        case 3:\n          /**\n           * DECCOLM - 132 column mode.\n           * This is only active if 'SetWinLines' (24) is enabled\n           * through `options.windowsOptions`.\n           */\n          if (this._optionsService.rawOptions.windowOptions.setWinLines) {\n            this._bufferService.resize(132, this._bufferService.rows);\n            this._onRequestReset.fire();\n          }\n          break;\n        case 6:\n          this._coreService.decPrivateModes.origin = true;\n          this._setCursor(0, 0);\n          break;\n        case 7:\n          this._coreService.decPrivateModes.wraparound = true;\n          break;\n        case 12:\n          // this.cursorBlink = true;\n          break;\n        case 45:\n          this._coreService.decPrivateModes.reverseWraparound = true;\n          break;\n        case 66:\n          this._logService.debug('Serial port requested application keypad.');\n          this._coreService.decPrivateModes.applicationKeypad = true;\n          this._onRequestSyncScrollBar.fire();\n          break;\n        case 9: // X10 Mouse\n          // no release, no motion, no wheel, no modifiers.\n          this._coreMouseService.activeProtocol = 'X10';\n          break;\n        case 1000: // vt200 mouse\n          // no motion.\n          this._coreMouseService.activeProtocol = 'VT200';\n          break;\n        case 1002: // button event mouse\n          this._coreMouseService.activeProtocol = 'DRAG';\n          break;\n        case 1003: // any event mouse\n          // any event - sends motion events,\n          // even if there is no button held down.\n          this._coreMouseService.activeProtocol = 'ANY';\n          break;\n        case 1004: // send focusin/focusout events\n          // focusin: ^[[I\n          // focusout: ^[[O\n          this._coreService.decPrivateModes.sendFocus = true;\n          this._onRequestSendFocus.fire();\n          break;\n        case 1005: // utf8 ext mode mouse - removed in #2507\n          this._logService.debug('DECSET 1005 not supported (see #2507)');\n          break;\n        case 1006: // sgr ext mode mouse\n          this._coreMouseService.activeEncoding = 'SGR';\n          break;\n        case 1015: // urxvt ext mode mouse - removed in #2507\n          this._logService.debug('DECSET 1015 not supported (see #2507)');\n          break;\n        case 25: // show cursor\n          this._coreService.isCursorHidden = false;\n          break;\n        case 1048: // alt screen cursor\n          this.saveCursor();\n          break;\n        case 1049: // alt screen buffer cursor\n          this.saveCursor();\n        // FALL-THROUGH\n        case 47: // alt screen buffer\n        case 1047: // alt screen buffer\n          this._bufferService.buffers.activateAltBuffer(this._eraseAttrData());\n          this._coreService.isCursorInitialized = true;\n          this._onRequestRefreshRows.fire(0, this._bufferService.rows - 1);\n          this._onRequestSyncScrollBar.fire();\n          break;\n        case 2004: // bracketed paste mode (https://cirw.in/blog/bracketed-paste)\n          this._coreService.decPrivateModes.bracketedPasteMode = true;\n          break;\n      }\n    }\n    return true;\n  }\n\n\n  /**\n   * CSI Pm l  Reset Mode (RM).\n   *     Ps = 2  -> Keyboard Action Mode (AM).\n   *     Ps = 4  -> Replace Mode (IRM).\n   *     Ps = 1 2  -> Send/receive (SRM).\n   *     Ps = 2 0  -> Normal Linefeed (LNM).\n   *\n   * @vt: #P[Only IRM is supported.]    CSI RM    \"Reset Mode\"  \"CSI Pm l\"  \"Set various terminal attributes.\"\n   * Supported param values by RM:\n   *\n   * | Param | Action                                 | Support |\n   * | ----- | -------------------------------------- | ------- |\n   * | 2     | Keyboard Action Mode (KAM). Always on. | #N      |\n   * | 4     | Replace Mode (IRM). (default)          | #Y      |\n   * | 12    | Send/receive (SRM). Always off.        | #N      |\n   * | 20    | Normal Linefeed (LNM). Always off.     | #N      |\n   *\n   *\n   * FIXME: why is LNM commented out?\n   */\n  public resetMode(params: IParams): boolean {\n    for (let i = 0; i < params.length; i++) {\n      switch (params.params[i]) {\n        case 4:\n          this._coreService.modes.insertMode = false;\n          break;\n        case 20:\n          // this._t.convertEol = false;\n          break;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * CSI ? Pm l\n   *   DEC Private Mode Reset (DECRST).\n   *     Ps = 1  -> Normal Cursor Keys (DECCKM).\n   *     Ps = 2  -> Designate VT52 mode (DECANM).\n   *     Ps = 3  -> 80 Column Mode (DECCOLM).\n   *     Ps = 4  -> Jump (Fast) Scroll (DECSCLM).\n   *     Ps = 5  -> Normal Video (DECSCNM).\n   *     Ps = 6  -> Normal Cursor Mode (DECOM).\n   *     Ps = 7  -> No Wraparound Mode (DECAWM).\n   *     Ps = 8  -> No Auto-repeat Keys (DECARM).\n   *     Ps = 9  -> Don't send Mouse X & Y on button press.\n   *     Ps = 1 0  -> Hide toolbar (rxvt).\n   *     Ps = 1 2  -> Stop Blinking Cursor (att610).\n   *     Ps = 1 8  -> Don't print form feed (DECPFF).\n   *     Ps = 1 9  -> Limit print to scrolling region (DECPEX).\n   *     Ps = 2 5  -> Hide Cursor (DECTCEM).\n   *     Ps = 3 0  -> Don't show scrollbar (rxvt).\n   *     Ps = 3 5  -> Disable font-shifting functions (rxvt).\n   *     Ps = 4 0  -> Disallow 80 -> 132 Mode.\n   *     Ps = 4 1  -> No more(1) fix (see curses resource).\n   *     Ps = 4 2  -> Disable Nation Replacement Character sets (DEC-\n   *     NRCM).\n   *     Ps = 4 4  -> Turn Off Margin Bell.\n   *     Ps = 4 5  -> No Reverse-wraparound Mode.\n   *     Ps = 4 6  -> Stop Logging.  (This is normally disabled by a\n   *     compile-time option).\n   *     Ps = 4 7  -> Use Normal Screen Buffer.\n   *     Ps = 6 6  -> Numeric keypad (DECNKM).\n   *     Ps = 6 7  -> Backarrow key sends delete (DECBKM).\n   *     Ps = 1 0 0 0  -> Don't send Mouse X & Y on button press and\n   *     release.  See the section Mouse Tracking.\n   *     Ps = 1 0 0 1  -> Don't use Hilite Mouse Tracking.\n   *     Ps = 1 0 0 2  -> Don't use Cell Motion Mouse Tracking.\n   *     Ps = 1 0 0 3  -> Don't use All Motion Mouse Tracking.\n   *     Ps = 1 0 0 4  -> Don't send FocusIn/FocusOut events.\n   *     Ps = 1 0 0 5  -> Disable Extended Mouse Mode.\n   *     Ps = 1 0 1 0  -> Don't scroll to bottom on tty output\n   *     (rxvt).\n   *     Ps = 1 0 1 1  -> Don't scroll to bottom on key press (rxvt).\n   *     Ps = 1 0 3 4  -> Don't interpret \"meta\" key.  (This disables\n   *     the eightBitInput resource).\n   *     Ps = 1 0 3 5  -> Disable special modifiers for Alt and Num-\n   *     Lock keys.  (This disables the numLock resource).\n   *     Ps = 1 0 3 6  -> Don't send ESC  when Meta modifies a key.\n   *     (This disables the metaSendsEscape resource).\n   *     Ps = 1 0 3 7  -> Send VT220 Remove from the editing-keypad\n   *     Delete key.\n   *     Ps = 1 0 3 9  -> Don't send ESC  when Alt modifies a key.\n   *     (This disables the altSendsEscape resource).\n   *     Ps = 1 0 4 0  -> Do not keep selection when not highlighted.\n   *     (This disables the keepSelection resource).\n   *     Ps = 1 0 4 1  -> Use the PRIMARY selection.  (This disables\n   *     the selectToClipboard resource).\n   *     Ps = 1 0 4 2  -> Disable Urgency window manager hint when\n   *     Control-G is received.  (This disables the bellIsUrgent\n   *     resource).\n   *     Ps = 1 0 4 3  -> Disable raising of the window when Control-\n   *     G is received.  (This disables the popOnBell resource).\n   *     Ps = 1 0 4 7  -> Use Normal Screen Buffer, clearing screen\n   *     first if in the Alternate Screen.  (This may be disabled by\n   *     the titeInhibit resource).\n   *     Ps = 1 0 4 8  -> Restore cursor as in DECRC.  (This may be\n   *     disabled by the titeInhibit resource).\n   *     Ps = 1 0 4 9  -> Use Normal Screen Buffer and restore cursor\n   *     as in DECRC.  (This may be disabled by the titeInhibit\n   *     resource).  This combines the effects of the 1 0 4 7  and 1 0\n   *     4 8  modes.  Use this with terminfo-based applications rather\n   *     than the 4 7  mode.\n   *     Ps = 1 0 5 0  -> Reset terminfo/termcap function-key mode.\n   *     Ps = 1 0 5 1  -> Reset Sun function-key mode.\n   *     Ps = 1 0 5 2  -> Reset HP function-key mode.\n   *     Ps = 1 0 5 3  -> Reset SCO function-key mode.\n   *     Ps = 1 0 6 0  -> Reset legacy keyboard emulation (X11R6).\n   *     Ps = 1 0 6 1  -> Reset keyboard emulation to Sun/PC style.\n   *     Ps = 2 0 0 4  -> Reset bracketed paste mode.\n   *\n   * @vt: #P[See below for supported modes.]    CSI DECRST  \"DEC Private Reset Mode\" \"CSI ? Pm l\"  \"Reset various terminal attributes.\"\n   * Supported param values by DECRST:\n   *\n   * | param | Action                                                  | Support |\n   * | ----- | ------------------------------------------------------- | ------- |\n   * | 1     | Normal Cursor Keys (DECCKM).                            | #Y      |\n   * | 2     | Designate VT52 mode (DECANM).                           | #N      |\n   * | 3     | 80 Column Mode (DECCOLM).                               | #B[Switches to old column width instead of 80.] |\n   * | 6     | Normal Cursor Mode (DECOM).                             | #Y      |\n   * | 7     | No Wraparound Mode (DECAWM).                            | #Y      |\n   * | 8     | No Auto-repeat Keys (DECARM).                           | #N      |\n   * | 9     | Don't send Mouse X & Y on button press.                 | #Y      |\n   * | 12    | Stop Blinking Cursor.                                   | #Y      |\n   * | 25    | Hide Cursor (DECTCEM).                                  | #Y      |\n   * | 45    | No reverse wrap-around.                                 | #Y      |\n   * | 47    | Use Normal Screen Buffer.                               | #Y      |\n   * | 66    | Numeric keypad (DECNKM).                                | #Y      |\n   * | 1000  | Don't send Mouse reports.                               | #Y      |\n   * | 1002  | Don't use Cell Motion Mouse Tracking.                   | #Y      |\n   * | 1003  | Don't use All Motion Mouse Tracking.                    | #Y      |\n   * | 1004  | Don't send FocusIn/FocusOut events.                     | #Y      |\n   * | 1005  | Disable UTF-8 Mouse Mode.                               | #N      |\n   * | 1006  | Disable SGR Mouse Mode.                                 | #Y      |\n   * | 1015  | Disable urxvt Mouse Mode.                               | #N      |\n   * | 1047  | Use Normal Screen Buffer (clearing screen if in alt).   | #Y      |\n   * | 1048  | Restore cursor as in DECRC.                             | #Y      |\n   * | 1049  | Use Normal Screen Buffer and restore cursor.            | #Y      |\n   * | 2004  | Reset bracketed paste mode.                             | #Y      |\n   *\n   *\n   * FIXME: DECCOLM is currently broken (already fixed in window options PR)\n   */\n  public resetModePrivate(params: IParams): boolean {\n    for (let i = 0; i < params.length; i++) {\n      switch (params.params[i]) {\n        case 1:\n          this._coreService.decPrivateModes.applicationCursorKeys = false;\n          break;\n        case 3:\n          /**\n           * DECCOLM - 80 column mode.\n           * This is only active if 'SetWinLines' (24) is enabled\n           * through `options.windowsOptions`.\n           */\n          if (this._optionsService.rawOptions.windowOptions.setWinLines) {\n            this._bufferService.resize(80, this._bufferService.rows);\n            this._onRequestReset.fire();\n          }\n          break;\n        case 6:\n          this._coreService.decPrivateModes.origin = false;\n          this._setCursor(0, 0);\n          break;\n        case 7:\n          this._coreService.decPrivateModes.wraparound = false;\n          break;\n        case 12:\n          // this.cursorBlink = false;\n          break;\n        case 45:\n          this._coreService.decPrivateModes.reverseWraparound = false;\n          break;\n        case 66:\n          this._logService.debug('Switching back to normal keypad.');\n          this._coreService.decPrivateModes.applicationKeypad = false;\n          this._onRequestSyncScrollBar.fire();\n          break;\n        case 9: // X10 Mouse\n        case 1000: // vt200 mouse\n        case 1002: // button event mouse\n        case 1003: // any event mouse\n          this._coreMouseService.activeProtocol = 'NONE';\n          break;\n        case 1004: // send focusin/focusout events\n          this._coreService.decPrivateModes.sendFocus = false;\n          break;\n        case 1005: // utf8 ext mode mouse - removed in #2507\n          this._logService.debug('DECRST 1005 not supported (see #2507)');\n          break;\n        case 1006: // sgr ext mode mouse\n          this._coreMouseService.activeEncoding = 'DEFAULT';\n          break;\n        case 1015: // urxvt ext mode mouse - removed in #2507\n          this._logService.debug('DECRST 1015 not supported (see #2507)');\n          break;\n        case 25: // hide cursor\n          this._coreService.isCursorHidden = true;\n          break;\n        case 1048: // alt screen cursor\n          this.restoreCursor();\n          break;\n        case 1049: // alt screen buffer cursor\n        // FALL-THROUGH\n        case 47: // normal screen buffer\n        case 1047: // normal screen buffer - clearing it first\n          // Ensure the selection manager has the correct buffer\n          this._bufferService.buffers.activateNormalBuffer();\n          if (params.params[i] === 1049) {\n            this.restoreCursor();\n          }\n          this._coreService.isCursorInitialized = true;\n          this._onRequestRefreshRows.fire(0, this._bufferService.rows - 1);\n          this._onRequestSyncScrollBar.fire();\n          break;\n        case 2004: // bracketed paste mode (https://cirw.in/blog/bracketed-paste)\n          this._coreService.decPrivateModes.bracketedPasteMode = false;\n          break;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Helper to write color information packed with color mode.\n   */\n  private _updateAttrColor(color: number, mode: number, c1: number, c2: number, c3: number): number {\n    if (mode === 2) {\n      color |= Attributes.CM_RGB;\n      color &= ~Attributes.RGB_MASK;\n      color |= AttributeData.fromColorRGB([c1, c2, c3]);\n    } else if (mode === 5) {\n      color &= ~(Attributes.CM_MASK | Attributes.PCOLOR_MASK);\n      color |= Attributes.CM_P256 | (c1 & 0xff);\n    }\n    return color;\n  }\n\n  /**\n   * Helper to extract and apply color params/subparams.\n   * Returns advance for params index.\n   */\n  private _extractColor(params: IParams, pos: number, attr: IAttributeData): number {\n    // normalize params\n    // meaning: [target, CM, ign, val, val, val]\n    // RGB    : [ 38/48,  2, ign,   r,   g,   b]\n    // P256   : [ 38/48,  5, ign,   v, ign, ign]\n    const accu = [0, 0, -1, 0, 0, 0];\n\n    // alignment placeholder for non color space sequences\n    let cSpace = 0;\n\n    // return advance we took in params\n    let advance = 0;\n\n    do {\n      accu[advance + cSpace] = params.params[pos + advance];\n      if (params.hasSubParams(pos + advance)) {\n        const subparams = params.getSubParams(pos + advance)!;\n        let i = 0;\n        do {\n          if (accu[1] === 5) {\n            cSpace = 1;\n          }\n          accu[advance + i + 1 + cSpace] = subparams[i];\n        } while (++i < subparams.length && i + advance + 1 + cSpace < accu.length);\n        break;\n      }\n      // exit early if can decide color mode with semicolons\n      if ((accu[1] === 5 && advance + cSpace >= 2)\n        || (accu[1] === 2 && advance + cSpace >= 5)) {\n        break;\n      }\n      // offset colorSpace slot for semicolon mode\n      if (accu[1]) {\n        cSpace = 1;\n      }\n    } while (++advance + pos < params.length && advance + cSpace < accu.length);\n\n    // set default values to 0\n    for (let i = 2; i < accu.length; ++i) {\n      if (accu[i] === -1) {\n        accu[i] = 0;\n      }\n    }\n\n    // apply colors\n    switch (accu[0]) {\n      case 38:\n        attr.fg = this._updateAttrColor(attr.fg, accu[1], accu[3], accu[4], accu[5]);\n        break;\n      case 48:\n        attr.bg = this._updateAttrColor(attr.bg, accu[1], accu[3], accu[4], accu[5]);\n        break;\n      case 58:\n        attr.extended = attr.extended.clone();\n        attr.extended.underlineColor = this._updateAttrColor(attr.extended.underlineColor, accu[1], accu[3], accu[4], accu[5]);\n    }\n\n    return advance;\n  }\n\n  /**\n   * SGR 4 subparams:\n   *    4:0   -   equal to SGR 24 (turn off all underline)\n   *    4:1   -   equal to SGR 4 (single underline)\n   *    4:2   -   equal to SGR 21 (double underline)\n   *    4:3   -   curly underline\n   *    4:4   -   dotted underline\n   *    4:5   -   dashed underline\n   */\n  private _processUnderline(style: number, attr: IAttributeData): void {\n    // treat extended attrs as immutable, thus always clone from old one\n    // this is needed since the buffer only holds references to it\n    attr.extended = attr.extended.clone();\n\n    // default to 1 == single underline\n    if (!~style || style > 5) {\n      style = 1;\n    }\n    attr.extended.underlineStyle = style;\n    attr.fg |= FgFlags.UNDERLINE;\n\n    // 0 deactivates underline\n    if (style === 0) {\n      attr.fg &= ~FgFlags.UNDERLINE;\n    }\n\n    // update HAS_EXTENDED in BG\n    attr.updateExtended();\n  }\n\n  /**\n   * CSI Pm m  Character Attributes (SGR).\n   *\n   * @vt: #P[See below for supported attributes.]    CSI SGR   \"Select Graphic Rendition\"  \"CSI Pm m\"  \"Set/Reset various text attributes.\"\n   * SGR selects one or more character attributes at the same time. Multiple params (up to 32)\n   * are applied in order from left to right. The changed attributes are applied to all new\n   * characters received. If you move characters in the viewport by scrolling or any other means,\n   * then the attributes move with the characters.\n   *\n   * Supported param values by SGR:\n   *\n   * | Param     | Meaning                                                  | Support |\n   * | --------- | -------------------------------------------------------- | ------- |\n   * | 0         | Normal (default). Resets any other preceding SGR.        | #Y      |\n   * | 1         | Bold. (also see `options.drawBoldTextInBrightColors`)    | #Y      |\n   * | 2         | Faint, decreased intensity.                              | #Y      |\n   * | 3         | Italic.                                                  | #Y      |\n   * | 4         | Underlined (see below for style support).                | #Y      |\n   * | 5         | Slowly blinking.                                         | #N      |\n   * | 6         | Rapidly blinking.                                        | #N      |\n   * | 7         | Inverse. Flips foreground and background color.          | #Y      |\n   * | 8         | Invisible (hidden).                                      | #Y      |\n   * | 9         | Crossed-out characters (strikethrough).                  | #Y      |\n   * | 21        | Doubly underlined.                                       | #P[Currently outputs a single underline.] |\n   * | 22        | Normal (neither bold nor faint).                         | #Y      |\n   * | 23        | No italic.                                               | #Y      |\n   * | 24        | Not underlined.                                          | #Y      |\n   * | 25        | Steady (not blinking).                                   | #Y      |\n   * | 27        | Positive (not inverse).                                  | #Y      |\n   * | 28        | Visible (not hidden).                                    | #Y      |\n   * | 29        | Not Crossed-out (strikethrough).                         | #Y      |\n   * | 30        | Foreground color: Black.                                 | #Y      |\n   * | 31        | Foreground color: Red.                                   | #Y      |\n   * | 32        | Foreground color: Green.                                 | #Y      |\n   * | 33        | Foreground color: Yellow.                                | #Y      |\n   * | 34        | Foreground color: Blue.                                  | #Y      |\n   * | 35        | Foreground color: Magenta.                               | #Y      |\n   * | 36        | Foreground color: Cyan.                                  | #Y      |\n   * | 37        | Foreground color: White.                                 | #Y      |\n   * | 38        | Foreground color: Extended color.                        | #P[Support for RGB and indexed colors, see below.] |\n   * | 39        | Foreground color: Default (original).                    | #Y      |\n   * | 40        | Background color: Black.                                 | #Y      |\n   * | 41        | Background color: Red.                                   | #Y      |\n   * | 42        | Background color: Green.                                 | #Y      |\n   * | 43        | Background color: Yellow.                                | #Y      |\n   * | 44        | Background color: Blue.                                  | #Y      |\n   * | 45        | Background color: Magenta.                               | #Y      |\n   * | 46        | Background color: Cyan.                                  | #Y      |\n   * | 47        | Background color: White.                                 | #Y      |\n   * | 48        | Background color: Extended color.                        | #P[Support for RGB and indexed colors, see below.] |\n   * | 49        | Background color: Default (original).                    | #Y      |\n   * | 90 - 97   | Bright foreground color (analogous to 30 - 37).          | #Y      |\n   * | 100 - 107 | Bright background color (analogous to 40 - 47).          | #Y      |\n   *\n   * Underline supports subparams to denote the style in the form `4 : x`:\n   *\n   * | x      | Meaning                                                       | Support |\n   * | ------ | ------------------------------------------------------------- | ------- |\n   * | 0      | No underline. Same as `SGR 24 m`.                             | #Y      |\n   * | 1      | Single underline. Same as `SGR 4 m`.                          | #Y      |\n   * | 2      | Double underline.                                             | #P[Currently outputs a single underline.] |\n   * | 3      | Curly underline.                                              | #P[Currently outputs a single underline.] |\n   * | 4      | Dotted underline.                                             | #P[Currently outputs a single underline.] |\n   * | 5      | Dashed underline.                                             | #P[Currently outputs a single underline.] |\n   * | other  | Single underline. Same as `SGR 4 m`.                          | #Y      |\n   *\n   * Extended colors are supported for foreground (Ps=38) and background (Ps=48) as follows:\n   *\n   * | Ps + 1 | Meaning                                                       | Support |\n   * | ------ | ------------------------------------------------------------- | ------- |\n   * | 0      | Implementation defined.                                       | #N      |\n   * | 1      | Transparent.                                                  | #N      |\n   * | 2      | RGB color as `Ps ; 2 ; R ; G ; B` or `Ps : 2 : : R : G : B`.  | #Y      |\n   * | 3      | CMY color.                                                    | #N      |\n   * | 4      | CMYK color.                                                   | #N      |\n   * | 5      | Indexed (256 colors) as `Ps ; 5 ; INDEX` or `Ps : 5 : INDEX`. | #Y      |\n   *\n   *\n   * FIXME: blinking is implemented in attrs, but not working in renderers?\n   * FIXME: remove dead branch for p=100\n   */\n  public charAttributes(params: IParams): boolean {\n    // Optimize a single SGR0.\n    if (params.length === 1 && params.params[0] === 0) {\n      this._curAttrData.fg = DEFAULT_ATTR_DATA.fg;\n      this._curAttrData.bg = DEFAULT_ATTR_DATA.bg;\n      return true;\n    }\n\n    const l = params.length;\n    let p;\n    const attr = this._curAttrData;\n\n    for (let i = 0; i < l; i++) {\n      p = params.params[i];\n      if (p >= 30 && p <= 37) {\n        // fg color 8\n        attr.fg &= ~(Attributes.CM_MASK | Attributes.PCOLOR_MASK);\n        attr.fg |= Attributes.CM_P16 | (p - 30);\n      } else if (p >= 40 && p <= 47) {\n        // bg color 8\n        attr.bg &= ~(Attributes.CM_MASK | Attributes.PCOLOR_MASK);\n        attr.bg |= Attributes.CM_P16 | (p - 40);\n      } else if (p >= 90 && p <= 97) {\n        // fg color 16\n        attr.fg &= ~(Attributes.CM_MASK | Attributes.PCOLOR_MASK);\n        attr.fg |= Attributes.CM_P16 | (p - 90) | 8;\n      } else if (p >= 100 && p <= 107) {\n        // bg color 16\n        attr.bg &= ~(Attributes.CM_MASK | Attributes.PCOLOR_MASK);\n        attr.bg |= Attributes.CM_P16 | (p - 100) | 8;\n      } else if (p === 0) {\n        // default\n        attr.fg = DEFAULT_ATTR_DATA.fg;\n        attr.bg = DEFAULT_ATTR_DATA.bg;\n      } else if (p === 1) {\n        // bold text\n        attr.fg |= FgFlags.BOLD;\n      } else if (p === 3) {\n        // italic text\n        attr.bg |= BgFlags.ITALIC;\n      } else if (p === 4) {\n        // underlined text\n        attr.fg |= FgFlags.UNDERLINE;\n        this._processUnderline(params.hasSubParams(i) ? params.getSubParams(i)![0] : UnderlineStyle.SINGLE, attr);\n      } else if (p === 5) {\n        // blink\n        attr.fg |= FgFlags.BLINK;\n      } else if (p === 7) {\n        // inverse and positive\n        // test with: echo -e '\\e[31m\\e[42mhello\\e[7mworld\\e[27mhi\\e[m'\n        attr.fg |= FgFlags.INVERSE;\n      } else if (p === 8) {\n        // invisible\n        attr.fg |= FgFlags.INVISIBLE;\n      } else if (p === 9) {\n        // strikethrough\n        attr.fg |= FgFlags.STRIKETHROUGH;\n      } else if (p === 2) {\n        // dimmed text\n        attr.bg |= BgFlags.DIM;\n      } else if (p === 21) {\n        // double underline\n        this._processUnderline(UnderlineStyle.DOUBLE, attr);\n      } else if (p === 22) {\n        // not bold nor faint\n        attr.fg &= ~FgFlags.BOLD;\n        attr.bg &= ~BgFlags.DIM;\n      } else if (p === 23) {\n        // not italic\n        attr.bg &= ~BgFlags.ITALIC;\n      } else if (p === 24) {\n        // not underlined\n        attr.fg &= ~FgFlags.UNDERLINE;\n      } else if (p === 25) {\n        // not blink\n        attr.fg &= ~FgFlags.BLINK;\n      } else if (p === 27) {\n        // not inverse\n        attr.fg &= ~FgFlags.INVERSE;\n      } else if (p === 28) {\n        // not invisible\n        attr.fg &= ~FgFlags.INVISIBLE;\n      } else if (p === 29) {\n        // not strikethrough\n        attr.fg &= ~FgFlags.STRIKETHROUGH;\n      } else if (p === 39) {\n        // reset fg\n        attr.fg &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n        attr.fg |= DEFAULT_ATTR_DATA.fg & (Attributes.PCOLOR_MASK | Attributes.RGB_MASK);\n      } else if (p === 49) {\n        // reset bg\n        attr.bg &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n        attr.bg |= DEFAULT_ATTR_DATA.bg & (Attributes.PCOLOR_MASK | Attributes.RGB_MASK);\n      } else if (p === 38 || p === 48 || p === 58) {\n        // fg color 256 and RGB\n        i += this._extractColor(params, i, attr);\n      } else if (p === 59) {\n        attr.extended = attr.extended.clone();\n        attr.extended.underlineColor = -1;\n        attr.updateExtended();\n      } else if (p === 100) { // FIXME: dead branch, p=100 already handled above!\n        // reset fg/bg\n        attr.fg &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n        attr.fg |= DEFAULT_ATTR_DATA.fg & (Attributes.PCOLOR_MASK | Attributes.RGB_MASK);\n        attr.bg &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n        attr.bg |= DEFAULT_ATTR_DATA.bg & (Attributes.PCOLOR_MASK | Attributes.RGB_MASK);\n      } else {\n        this._logService.debug('Unknown SGR attribute: %d.', p);\n      }\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps n  Device Status Report (DSR).\n   *     Ps = 5  -> Status Report.  Result (``OK'') is\n   *   CSI 0 n\n   *     Ps = 6  -> Report Cursor Position (CPR) [row;column].\n   *   Result is\n   *   CSI r ; c R\n   * CSI ? Ps n\n   *   Device Status Report (DSR, DEC-specific).\n   *     Ps = 6  -> Report Cursor Position (CPR) [row;column] as CSI\n   *     ? r ; c R (assumes page is zero).\n   *     Ps = 1 5  -> Report Printer status as CSI ? 1 0  n  (ready).\n   *     or CSI ? 1 1  n  (not ready).\n   *     Ps = 2 5  -> Report UDK status as CSI ? 2 0  n  (unlocked)\n   *     or CSI ? 2 1  n  (locked).\n   *     Ps = 2 6  -> Report Keyboard status as\n   *   CSI ? 2 7  ;  1  ;  0  ;  0  n  (North American).\n   *   The last two parameters apply to VT400 & up, and denote key-\n   *   board ready and LK01 respectively.\n   *     Ps = 5 3  -> Report Locator status as\n   *   CSI ? 5 3  n  Locator available, if compiled-in, or\n   *   CSI ? 5 0  n  No Locator, if not.\n   *\n   * @vt: #Y CSI DSR   \"Device Status Report\"  \"CSI Ps n\"  \"Request cursor position (CPR) with `Ps` = 6.\"\n   */\n  public deviceStatus(params: IParams): boolean {\n    switch (params.params[0]) {\n      case 5:\n        // status report\n        this._coreService.triggerDataEvent(`${C0.ESC}[0n`);\n        break;\n      case 6:\n        // cursor position\n        const y = this._activeBuffer.y + 1;\n        const x = this._activeBuffer.x + 1;\n        this._coreService.triggerDataEvent(`${C0.ESC}[${y};${x}R`);\n        break;\n    }\n    return true;\n  }\n\n  // @vt: #P[Only CPR is supported.]  CSI DECDSR  \"DEC Device Status Report\"  \"CSI ? Ps n\"  \"Only CPR is supported (same as DSR).\"\n  public deviceStatusPrivate(params: IParams): boolean {\n    // modern xterm doesnt seem to\n    // respond to any of these except ?6, 6, and 5\n    switch (params.params[0]) {\n      case 6:\n        // cursor position\n        const y = this._activeBuffer.y + 1;\n        const x = this._activeBuffer.x + 1;\n        this._coreService.triggerDataEvent(`${C0.ESC}[?${y};${x}R`);\n        break;\n      case 15:\n        // no printer\n        // this.handler(C0.ESC + '[?11n');\n        break;\n      case 25:\n        // dont support user defined keys\n        // this.handler(C0.ESC + '[?21n');\n        break;\n      case 26:\n        // north american keyboard\n        // this.handler(C0.ESC + '[?27;1;0;0n');\n        break;\n      case 53:\n        // no dec locator/mouse\n        // this.handler(C0.ESC + '[?50n');\n        break;\n    }\n    return true;\n  }\n\n  /**\n   * CSI ! p   Soft terminal reset (DECSTR).\n   * http://vt100.net/docs/vt220-rm/table4-10.html\n   *\n   * @vt: #Y CSI DECSTR  \"Soft Terminal Reset\"   \"CSI ! p\"   \"Reset several terminal attributes to initial state.\"\n   * There are two terminal reset sequences - RIS and DECSTR. While RIS performs almost a full terminal bootstrap,\n   * DECSTR only resets certain attributes. For most needs DECSTR should be sufficient.\n   *\n   * The following terminal attributes are reset to default values:\n   * - IRM is reset (dafault = false)\n   * - scroll margins are reset (default = viewport size)\n   * - erase attributes are reset to default\n   * - charsets are reset\n   * - DECSC data is reset to initial values\n   * - DECOM is reset to absolute mode\n   *\n   *\n   * FIXME: there are several more attributes missing (see VT520 manual)\n   */\n  public softReset(params: IParams): boolean {\n    this._coreService.isCursorHidden = false;\n    this._onRequestSyncScrollBar.fire();\n    this._activeBuffer.scrollTop = 0;\n    this._activeBuffer.scrollBottom = this._bufferService.rows - 1;\n    this._curAttrData = DEFAULT_ATTR_DATA.clone();\n    this._coreService.reset();\n    this._charsetService.reset();\n\n    // reset DECSC data\n    this._activeBuffer.savedX = 0;\n    this._activeBuffer.savedY = this._activeBuffer.ybase;\n    this._activeBuffer.savedCurAttrData.fg = this._curAttrData.fg;\n    this._activeBuffer.savedCurAttrData.bg = this._curAttrData.bg;\n    this._activeBuffer.savedCharset = this._charsetService.charset;\n\n    // reset DECOM\n    this._coreService.decPrivateModes.origin = false;\n    return true;\n  }\n\n  /**\n   * CSI Ps SP q  Set cursor style (DECSCUSR, VT520).\n   *   Ps = 0  -> blinking block.\n   *   Ps = 1  -> blinking block (default).\n   *   Ps = 2  -> steady block.\n   *   Ps = 3  -> blinking underline.\n   *   Ps = 4  -> steady underline.\n   *   Ps = 5  -> blinking bar (xterm).\n   *   Ps = 6  -> steady bar (xterm).\n   *\n   * @vt: #Y CSI DECSCUSR  \"Set Cursor Style\"  \"CSI Ps SP q\"   \"Set cursor style.\"\n   * Supported cursor styles:\n   *  - empty, 0 or 1: steady block\n   *  - 2: blink block\n   *  - 3: steady underline\n   *  - 4: blink underline\n   *  - 5: steady bar\n   *  - 6: blink bar\n   */\n  public setCursorStyle(params: IParams): boolean {\n    const param = params.params[0] || 1;\n    switch (param) {\n      case 1:\n      case 2:\n        this._optionsService.options.cursorStyle = 'block';\n        break;\n      case 3:\n      case 4:\n        this._optionsService.options.cursorStyle = 'underline';\n        break;\n      case 5:\n      case 6:\n        this._optionsService.options.cursorStyle = 'bar';\n        break;\n    }\n    const isBlinking = param % 2 === 1;\n    this._optionsService.options.cursorBlink = isBlinking;\n    return true;\n  }\n\n  /**\n   * CSI Ps ; Ps r\n   *   Set Scrolling Region [top;bottom] (default = full size of win-\n   *   dow) (DECSTBM).\n   *\n   * @vt: #Y CSI DECSTBM \"Set Top and Bottom Margin\" \"CSI Ps ; Ps r\" \"Set top and bottom margins of the viewport [top;bottom] (default = viewport size).\"\n   */\n  public setScrollRegion(params: IParams): boolean {\n    const top = params.params[0] || 1;\n    let bottom: number;\n\n    if (params.length < 2 || (bottom = params.params[1]) > this._bufferService.rows || bottom === 0) {\n      bottom = this._bufferService.rows;\n    }\n\n    if (bottom > top) {\n      this._activeBuffer.scrollTop = top - 1;\n      this._activeBuffer.scrollBottom = bottom - 1;\n      this._setCursor(0, 0);\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps ; Ps ; Ps t - Various window manipulations and reports (xterm)\n   *\n   * Note: Only those listed below are supported. All others are left to integrators and\n   * need special treatment based on the embedding environment.\n   *\n   *    Ps = 1 4                                                          supported\n   *      Report xterm text area size in pixels.\n   *      Result is CSI 4 ; height ; width t\n   *    Ps = 14 ; 2                                                       not implemented\n   *    Ps = 16                                                           supported\n   *      Report xterm character cell size in pixels.\n   *      Result is CSI 6 ; height ; width t\n   *    Ps = 18                                                           supported\n   *      Report the size of the text area in characters.\n   *      Result is CSI 8 ; height ; width t\n   *    Ps = 20                                                           supported\n   *      Report xterm window's icon label.\n   *      Result is OSC L label ST\n   *    Ps = 21                                                           supported\n   *      Report xterm window's title.\n   *      Result is OSC l label ST\n   *    Ps = 22 ; 0  -> Save xterm icon and window title on stack.        supported\n   *    Ps = 22 ; 1  -> Save xterm icon title on stack.                   supported\n   *    Ps = 22 ; 2  -> Save xterm window title on stack.                 supported\n   *    Ps = 23 ; 0  -> Restore xterm icon and window title from stack.   supported\n   *    Ps = 23 ; 1  -> Restore xterm icon title from stack.              supported\n   *    Ps = 23 ; 2  -> Restore xterm window title from stack.            supported\n   *    Ps >= 24                                                          not implemented\n   */\n  public windowOptions(params: IParams): boolean {\n    if (!paramToWindowOption(params.params[0], this._optionsService.rawOptions.windowOptions)) {\n      return true;\n    }\n    const second = (params.length > 1) ? params.params[1] : 0;\n    switch (params.params[0]) {\n      case 14:  // GetWinSizePixels, returns CSI 4 ; height ; width t\n        if (second !== 2) {\n          this._onRequestWindowsOptionsReport.fire(WindowsOptionsReportType.GET_WIN_SIZE_PIXELS);\n        }\n        break;\n      case 16:  // GetCellSizePixels, returns CSI 6 ; height ; width t\n        this._onRequestWindowsOptionsReport.fire(WindowsOptionsReportType.GET_CELL_SIZE_PIXELS);\n        break;\n      case 18:  // GetWinSizeChars, returns CSI 8 ; height ; width t\n        if (this._bufferService) {\n          this._coreService.triggerDataEvent(`${C0.ESC}[8;${this._bufferService.rows};${this._bufferService.cols}t`);\n        }\n        break;\n      case 22:  // PushTitle\n        if (second === 0 || second === 2) {\n          this._windowTitleStack.push(this._windowTitle);\n          if (this._windowTitleStack.length > STACK_LIMIT) {\n            this._windowTitleStack.shift();\n          }\n        }\n        if (second === 0 || second === 1) {\n          this._iconNameStack.push(this._iconName);\n          if (this._iconNameStack.length > STACK_LIMIT) {\n            this._iconNameStack.shift();\n          }\n        }\n        break;\n      case 23:  // PopTitle\n        if (second === 0 || second === 2) {\n          if (this._windowTitleStack.length) {\n            this.setTitle(this._windowTitleStack.pop()!);\n          }\n        }\n        if (second === 0 || second === 1) {\n          if (this._iconNameStack.length) {\n            this.setIconName(this._iconNameStack.pop()!);\n          }\n        }\n        break;\n    }\n    return true;\n  }\n\n\n  /**\n   * CSI s\n   * ESC 7\n   *   Save cursor (ANSI.SYS).\n   *\n   * @vt: #P[TODO...]  CSI SCOSC   \"Save Cursor\"   \"CSI s\"   \"Save cursor position, charmap and text attributes.\"\n   * @vt: #Y ESC  SC   \"Save Cursor\"   \"ESC 7\"   \"Save cursor position, charmap and text attributes.\"\n   */\n  public saveCursor(params?: IParams): boolean {\n    this._activeBuffer.savedX = this._activeBuffer.x;\n    this._activeBuffer.savedY = this._activeBuffer.ybase + this._activeBuffer.y;\n    this._activeBuffer.savedCurAttrData.fg = this._curAttrData.fg;\n    this._activeBuffer.savedCurAttrData.bg = this._curAttrData.bg;\n    this._activeBuffer.savedCharset = this._charsetService.charset;\n    return true;\n  }\n\n\n  /**\n   * CSI u\n   * ESC 8\n   *   Restore cursor (ANSI.SYS).\n   *\n   * @vt: #P[TODO...]  CSI SCORC \"Restore Cursor\"  \"CSI u\"   \"Restore cursor position, charmap and text attributes.\"\n   * @vt: #Y ESC  RC \"Restore Cursor\"  \"ESC 8\"   \"Restore cursor position, charmap and text attributes.\"\n   */\n  public restoreCursor(params?: IParams): boolean {\n    this._activeBuffer.x = this._activeBuffer.savedX || 0;\n    this._activeBuffer.y = Math.max(this._activeBuffer.savedY - this._activeBuffer.ybase, 0);\n    this._curAttrData.fg = this._activeBuffer.savedCurAttrData.fg;\n    this._curAttrData.bg = this._activeBuffer.savedCurAttrData.bg;\n    this._charsetService.charset = (this as any)._savedCharset;\n    if (this._activeBuffer.savedCharset) {\n      this._charsetService.charset = this._activeBuffer.savedCharset;\n    }\n    this._restrictCursor();\n    return true;\n  }\n\n\n  /**\n   * OSC 2; <data> ST (set window title)\n   *   Proxy to set window title.\n   *\n   * @vt: #P[Icon name is not exposed.]   OSC    0   \"Set Windows Title and Icon Name\"  \"OSC 0 ; Pt BEL\"  \"Set window title and icon name.\"\n   * Icon name is not supported. For Window Title see below.\n   *\n   * @vt: #Y     OSC    2   \"Set Windows Title\"  \"OSC 2 ; Pt BEL\"  \"Set window title.\"\n   * xterm.js does not manipulate the title directly, instead exposes changes via the event `Terminal.onTitleChange`.\n   */\n  public setTitle(data: string): boolean {\n    this._windowTitle = data;\n    this._onTitleChange.fire(data);\n    return true;\n  }\n\n  /**\n   * OSC 1; <data> ST\n   * Note: Icon name is not exposed.\n   */\n  public setIconName(data: string): boolean {\n    this._iconName = data;\n    return true;\n  }\n\n  /**\n   * OSC 4; <num> ; <text> ST (set ANSI color <num> to <text>)\n   *\n   * @vt: #Y    OSC    4    \"Set ANSI color\"   \"OSC 4 ; c ; spec BEL\" \"Change color number `c` to the color specified by `spec`.\"\n   * `c` is the color index between 0 and 255. The color format of `spec` is derived from `XParseColor` (see OSC 10 for supported formats).\n   * There may be multipe `c ; spec` pairs present in the same instruction.\n   * If `spec` contains `?` the terminal returns a sequence with the currently set color.\n   */\n  public setOrReportIndexedColor(data: string): boolean {\n    const event: IColorEvent = [];\n    const slots = data.split(';');\n    while (slots.length > 1) {\n      const idx = slots.shift() as string;\n      const spec = slots.shift() as string;\n      if (/^\\d+$/.exec(idx)) {\n        const index = parseInt(idx);\n        if (0 <= index && index < 256) {\n          if (spec === '?') {\n            event.push({ type: ColorRequestType.REPORT, index });\n          } else {\n            const color = parseColor(spec);\n            if (color) {\n              event.push({ type: ColorRequestType.SET, index, color });\n            }\n          }\n        }\n      }\n    }\n    if (event.length) {\n      this._onColor.fire(event);\n    }\n    return true;\n  }\n\n  // special colors - OSC 10 | 11 | 12\n  private _specialColors = [ColorIndex.FOREGROUND, ColorIndex.BACKGROUND, ColorIndex.CURSOR];\n\n  /**\n   * Apply colors requests for special colors in OSC 10 | 11 | 12.\n   * Since these commands are stacking from multiple parameters,\n   * we handle them in a loop with an entry offset to `_specialColors`.\n   */\n  private _setOrReportSpecialColor(data: string, offset: number): boolean {\n    const slots = data.split(';');\n    for (let i = 0; i < slots.length; ++i, ++offset) {\n      if (offset >= this._specialColors.length) break;\n      if (slots[i] === '?') {\n        this._onColor.fire([{ type: ColorRequestType.REPORT, index: this._specialColors[offset] }]);\n      } else {\n        const color = parseColor(slots[i]);\n        if (color) {\n          this._onColor.fire([{ type: ColorRequestType.SET, index: this._specialColors[offset], color }]);\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * OSC 10 ; <xcolor name>|<?> ST - set or query default foreground color\n   *\n   * @vt: #Y  OSC   10    \"Set or query default foreground color\"   \"OSC 10 ; Pt BEL\"  \"Set or query default foreground color.\"\n   * To set the color, the following color specification formats are supported:\n   * - `rgb:<red>/<green>/<blue>` for  `<red>, <green>, <blue>` in `h | hh | hhh | hhhh`, where\n   *   `h` is a single hexadecimal digit (case insignificant). The different widths scale\n   *   from 4 bit (`h`) to 16 bit (`hhhh`) and get converted to 8 bit (`hh`).\n   * - `#RGB` - 4 bits per channel, expanded to `#R0G0B0`\n   * - `#RRGGBB` - 8 bits per channel\n   * - `#RRRGGGBBB` - 12 bits per channel, truncated to `#RRGGBB`\n   * - `#RRRRGGGGBBBB` - 16 bits per channel, truncated to `#RRGGBB`\n   *\n   * **Note:** X11 named colors are currently unsupported.\n   *\n   * If `Pt` contains `?` instead of a color specification, the terminal\n   * returns a sequence with the current default foreground color\n   * (use that sequence to restore the color after changes).\n   *\n   * **Note:** Other than xterm, xterm.js does not support OSC 12 - 19.\n   * Therefore stacking multiple `Pt` separated by `;` only works for the first two entries.\n   */\n  public setOrReportFgColor(data: string): boolean {\n    return this._setOrReportSpecialColor(data, 0);\n  }\n\n  /**\n   * OSC 11 ; <xcolor name>|<?> ST - set or query default background color\n   *\n   * @vt: #Y  OSC   11    \"Set or query default background color\"   \"OSC 11 ; Pt BEL\"  \"Same as OSC 10, but for default background.\"\n   */\n  public setOrReportBgColor(data: string): boolean {\n    return this._setOrReportSpecialColor(data, 1);\n  }\n\n  /**\n   * OSC 12 ; <xcolor name>|<?> ST - set or query default cursor color\n   *\n   * @vt: #Y  OSC   12    \"Set or query default cursor color\"   \"OSC 12 ; Pt BEL\"  \"Same as OSC 10, but for default cursor color.\"\n   */\n  public setOrReportCursorColor(data: string): boolean {\n    return this._setOrReportSpecialColor(data, 2);\n  }\n\n  /**\n   * OSC 104 ; <num> ST - restore ANSI color <num>\n   *\n   * @vt: #Y  OSC   104    \"Reset ANSI color\"   \"OSC 104 ; c BEL\" \"Reset color number `c` to themed color.\"\n   * `c` is the color index between 0 and 255. This function restores the default color for `c` as\n   * specified by the loaded theme. Any number of `c` parameters may be given.\n   * If no parameters are given, the entire indexed color table will be reset.\n   */\n  public restoreIndexedColor(data: string): boolean {\n    if (!data) {\n      this._onColor.fire([{ type: ColorRequestType.RESTORE }]);\n      return true;\n    }\n    const event: IColorEvent = [];\n    const slots = data.split(';');\n    for (let i = 0; i < slots.length; ++i) {\n      if (/^\\d+$/.exec(slots[i])) {\n        const index = parseInt(slots[i]);\n        if (0 <= index && index < 256) {\n          event.push({ type: ColorRequestType.RESTORE, index });\n        }\n      }\n    }\n    if (event.length) {\n      this._onColor.fire(event);\n    }\n    return true;\n  }\n\n  /**\n   * OSC 110 ST - restore default foreground color\n   *\n   * @vt: #Y  OSC   110    \"Restore default foreground color\"   \"OSC 110 BEL\"  \"Restore default foreground to themed color.\"\n   */\n  public restoreFgColor(data: string): boolean {\n    this._onColor.fire([{ type: ColorRequestType.RESTORE, index: ColorIndex.FOREGROUND }]);\n    return true;\n  }\n\n  /**\n   * OSC 111 ST - restore default background color\n   *\n   * @vt: #Y  OSC   111    \"Restore default background color\"   \"OSC 111 BEL\"  \"Restore default background to themed color.\"\n   */\n  public restoreBgColor(data: string): boolean {\n    this._onColor.fire([{ type: ColorRequestType.RESTORE, index: ColorIndex.BACKGROUND }]);\n    return true;\n  }\n\n  /**\n   * OSC 112 ST - restore default cursor color\n   *\n   * @vt: #Y  OSC   112    \"Restore default cursor color\"   \"OSC 112 BEL\"  \"Restore default cursor to themed color.\"\n   */\n  public restoreCursorColor(data: string): boolean {\n    this._onColor.fire([{ type: ColorRequestType.RESTORE, index: ColorIndex.CURSOR }]);\n    return true;\n  }\n\n  /**\n   * ESC E\n   * C1.NEL\n   *   DEC mnemonic: NEL (https://vt100.net/docs/vt510-rm/NEL)\n   *   Moves cursor to first position on next line.\n   *\n   * @vt: #Y   C1    NEL   \"Next Line\"   \"\\x85\"    \"Move the cursor to the beginning of the next row.\"\n   * @vt: #Y   ESC   NEL   \"Next Line\"   \"ESC E\"   \"Move the cursor to the beginning of the next row.\"\n   */\n  public nextLine(): boolean {\n    this._activeBuffer.x = 0;\n    this.index();\n    return true;\n  }\n\n  /**\n   * ESC =\n   *   DEC mnemonic: DECKPAM (https://vt100.net/docs/vt510-rm/DECKPAM.html)\n   *   Enables the numeric keypad to send application sequences to the host.\n   */\n  public keypadApplicationMode(): boolean {\n    this._logService.debug('Serial port requested application keypad.');\n    this._coreService.decPrivateModes.applicationKeypad = true;\n    this._onRequestSyncScrollBar.fire();\n    return true;\n  }\n\n  /**\n   * ESC >\n   *   DEC mnemonic: DECKPNM (https://vt100.net/docs/vt510-rm/DECKPNM.html)\n   *   Enables the keypad to send numeric characters to the host.\n   */\n  public keypadNumericMode(): boolean {\n    this._logService.debug('Switching back to normal keypad.');\n    this._coreService.decPrivateModes.applicationKeypad = false;\n    this._onRequestSyncScrollBar.fire();\n    return true;\n  }\n\n  /**\n   * ESC % @\n   * ESC % G\n   *   Select default character set. UTF-8 is not supported (string are unicode anyways)\n   *   therefore ESC % G does the same.\n   */\n  public selectDefaultCharset(): boolean {\n    this._charsetService.setgLevel(0);\n    this._charsetService.setgCharset(0, DEFAULT_CHARSET); // US (default)\n    return true;\n  }\n\n  /**\n   * ESC ( C\n   *   Designate G0 Character Set, VT100, ISO 2022.\n   * ESC ) C\n   *   Designate G1 Character Set (ISO 2022, VT100).\n   * ESC * C\n   *   Designate G2 Character Set (ISO 2022, VT220).\n   * ESC + C\n   *   Designate G3 Character Set (ISO 2022, VT220).\n   * ESC - C\n   *   Designate G1 Character Set (VT300).\n   * ESC . C\n   *   Designate G2 Character Set (VT300).\n   * ESC / C\n   *   Designate G3 Character Set (VT300). C = A  -> ISO Latin-1 Supplemental. - Supported?\n   */\n  public selectCharset(collectAndFlag: string): boolean {\n    if (collectAndFlag.length !== 2) {\n      this.selectDefaultCharset();\n      return true;\n    }\n    if (collectAndFlag[0] === '/') {\n      return true;  // TODO: Is this supported?\n    }\n    this._charsetService.setgCharset(GLEVEL[collectAndFlag[0]], CHARSETS[collectAndFlag[1]] || DEFAULT_CHARSET);\n    return true;\n  }\n\n  /**\n   * ESC D\n   * C1.IND\n   *   DEC mnemonic: IND (https://vt100.net/docs/vt510-rm/IND.html)\n   *   Moves the cursor down one line in the same column.\n   *\n   * @vt: #Y   C1    IND   \"Index\"   \"\\x84\"    \"Move the cursor one line down scrolling if needed.\"\n   * @vt: #Y   ESC   IND   \"Index\"   \"ESC D\"   \"Move the cursor one line down scrolling if needed.\"\n   */\n  public index(): boolean {\n    this._restrictCursor();\n    this._activeBuffer.y++;\n    if (this._activeBuffer.y === this._activeBuffer.scrollBottom + 1) {\n      this._activeBuffer.y--;\n      this._bufferService.scroll(this._eraseAttrData());\n    } else if (this._activeBuffer.y >= this._bufferService.rows) {\n      this._activeBuffer.y = this._bufferService.rows - 1;\n    }\n    this._restrictCursor();\n    return true;\n  }\n\n  /**\n   * ESC H\n   * C1.HTS\n   *   DEC mnemonic: HTS (https://vt100.net/docs/vt510-rm/HTS.html)\n   *   Sets a horizontal tab stop at the column position indicated by\n   *   the value of the active column when the terminal receives an HTS.\n   *\n   * @vt: #Y   C1    HTS   \"Horizontal Tabulation Set\" \"\\x88\"    \"Places a tab stop at the current cursor position.\"\n   * @vt: #Y   ESC   HTS   \"Horizontal Tabulation Set\" \"ESC H\"   \"Places a tab stop at the current cursor position.\"\n   */\n  public tabSet(): boolean {\n    this._activeBuffer.tabs[this._activeBuffer.x] = true;\n    return true;\n  }\n\n  /**\n   * ESC M\n   * C1.RI\n   *   DEC mnemonic: HTS\n   *   Moves the cursor up one line in the same column. If the cursor is at the top margin,\n   *   the page scrolls down.\n   *\n   * @vt: #Y ESC  IR \"Reverse Index\" \"ESC M\"  \"Move the cursor one line up scrolling if needed.\"\n   */\n  public reverseIndex(): boolean {\n    this._restrictCursor();\n    if (this._activeBuffer.y === this._activeBuffer.scrollTop) {\n      // possibly move the code below to term.reverseScroll();\n      // test: echo -ne '\\e[1;1H\\e[44m\\eM\\e[0m'\n      // blankLine(true) is xterm/linux behavior\n      const scrollRegionHeight = this._activeBuffer.scrollBottom - this._activeBuffer.scrollTop;\n      this._activeBuffer.lines.shiftElements(this._activeBuffer.ybase + this._activeBuffer.y, scrollRegionHeight, 1);\n      this._activeBuffer.lines.set(this._activeBuffer.ybase + this._activeBuffer.y, this._activeBuffer.getBlankLine(this._eraseAttrData()));\n      this._dirtyRowService.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    } else {\n      this._activeBuffer.y--;\n      this._restrictCursor(); // quickfix to not run out of bounds\n    }\n    return true;\n  }\n\n  /**\n   * ESC c\n   *   DEC mnemonic: RIS (https://vt100.net/docs/vt510-rm/RIS.html)\n   *   Reset to initial state.\n   */\n  public fullReset(): boolean {\n    this._parser.reset();\n    this._onRequestReset.fire();\n    return true;\n  }\n\n  public reset(): void {\n    this._curAttrData = DEFAULT_ATTR_DATA.clone();\n    this._eraseAttrDataInternal = DEFAULT_ATTR_DATA.clone();\n  }\n\n  /**\n   * back_color_erase feature for xterm.\n   */\n  private _eraseAttrData(): IAttributeData {\n    this._eraseAttrDataInternal.bg &= ~(Attributes.CM_MASK | 0xFFFFFF);\n    this._eraseAttrDataInternal.bg |= this._curAttrData.bg & ~0xFC000000;\n    return this._eraseAttrDataInternal;\n  }\n\n  /**\n   * ESC n\n   * ESC o\n   * ESC |\n   * ESC }\n   * ESC ~\n   *   DEC mnemonic: LS (https://vt100.net/docs/vt510-rm/LS.html)\n   *   When you use a locking shift, the character set remains in GL or GR until\n   *   you use another locking shift. (partly supported)\n   */\n  public setgLevel(level: number): boolean {\n    this._charsetService.setgLevel(level);\n    return true;\n  }\n\n  /**\n   * ESC # 8\n   *   DEC mnemonic: DECALN (https://vt100.net/docs/vt510-rm/DECALN.html)\n   *   This control function fills the complete screen area with\n   *   a test pattern (E) used for adjusting screen alignment.\n   *\n   * @vt: #Y   ESC   DECALN   \"Screen Alignment Pattern\"  \"ESC # 8\"  \"Fill viewport with a test pattern (E).\"\n   */\n  public screenAlignmentPattern(): boolean {\n    // prepare cell data\n    const cell = new CellData();\n    cell.content = 1 << Content.WIDTH_SHIFT | 'E'.charCodeAt(0);\n    cell.fg = this._curAttrData.fg;\n    cell.bg = this._curAttrData.bg;\n\n\n    this._setCursor(0, 0);\n    for (let yOffset = 0; yOffset < this._bufferService.rows; ++yOffset) {\n      const row = this._activeBuffer.ybase + this._activeBuffer.y + yOffset;\n      const line = this._activeBuffer.lines.get(row);\n      if (line) {\n        line.fill(cell);\n        line.isWrapped = false;\n      }\n    }\n    this._dirtyRowService.markAllDirty();\n    this._setCursor(0, 0);\n    return true;\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\n/**\n * A base class that can be extended to provide convenience methods for managing the lifecycle of an\n * object and its components.\n */\nexport abstract class Disposable implements IDisposable {\n  protected _disposables: IDisposable[] = [];\n  protected _isDisposed: boolean = false;\n\n  constructor() {\n  }\n\n  /**\n   * Disposes the object, triggering the `dispose` method on all registered IDisposables.\n   */\n  public dispose(): void {\n    this._isDisposed = true;\n    for (const d of this._disposables) {\n      d.dispose();\n    }\n    this._disposables.length = 0;\n  }\n\n  /**\n   * Registers a disposable object.\n   * @param d The disposable to register.\n   * @returns The disposable.\n   */\n  public register<T extends IDisposable>(d: T): T {\n    this._disposables.push(d);\n    return d;\n  }\n\n  /**\n   * Unregisters a disposable object if it has been registered, if not do\n   * nothing.\n   * @param d The disposable to unregister.\n   */\n  public unregister<T extends IDisposable>(d: T): void {\n    const index = this._disposables.indexOf(d);\n    if (index !== -1) {\n      this._disposables.splice(index, 1);\n    }\n  }\n}\n\n/**\n * Dispose of all disposables in an array and set its length to 0.\n */\nexport function disposeArray(disposables: IDisposable[]): void {\n  for (const d of disposables) {\n    d.dispose();\n  }\n  disposables.length = 0;\n}\n\n/**\n * Creates a disposable that will dispose of an array of disposables when disposed.\n */\nexport function getDisposeArrayDisposable(array: IDisposable[]): IDisposable {\n  return { dispose: () => disposeArray(array) };\n}\n","/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\ninterface INavigator {\n  userAgent: string;\n  language: string;\n  platform: string;\n}\n\n// We're declaring a navigator global here as we expect it in all runtimes (node and browser), but\n// we want this module to live in common.\ndeclare const navigator: INavigator;\n\nconst isNode = (typeof navigator === 'undefined') ? true : false;\nconst userAgent = (isNode) ? 'node' : navigator.userAgent;\nconst platform = (isNode) ? 'node' : navigator.platform;\n\nexport const isFirefox = userAgent.includes('Firefox');\nexport const isSafari = /^((?!chrome|android).)*safari/i.test(userAgent);\n\n// Find the users platform. We use this to interpret the meta key\n// and ISO third level shifts.\n// http://stackoverflow.com/q/19877924/577598\nexport const isMac = ['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'].includes(platform);\nexport const isIpad = platform === 'iPad';\nexport const isIphone = platform === 'iPhone';\nexport const isWindows = ['Windows', 'Win16', 'Win32', 'WinCE'].includes(platform);\nexport const isLinux = platform.indexOf('Linux') >= 0;\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport type TypedArray = Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray | Int8Array | Int16Array | Int32Array | Float32Array | Float64Array;\n\n\n/**\n * polyfill for TypedArray.fill\n * This is needed to support .fill in all safari versions and IE 11.\n */\nexport function fill<T extends TypedArray>(array: T, value: number, start?: number, end?: number): T {\n  // all modern engines that support .fill\n  if (array.fill) {\n    return array.fill(value, start, end) as T;\n  }\n  return fillFallback(array, value, start, end);\n}\n\nexport function fillFallback<T extends TypedArray>(array: T, value: number, start: number = 0, end: number = array.length): T {\n  // safari and IE 11\n  // since IE 11 does not support Array.prototype.fill either\n  // we cannot use the suggested polyfill from MDN\n  // instead we simply fall back to looping\n  if (start >= array.length) {\n    return array;\n  }\n  start = (array.length + start) % array.length;\n  if (end >= array.length) {\n    end = array.length;\n  } else {\n    end = (array.length + end) % array.length;\n  }\n  for (let i = start; i < end; ++i) {\n    array[i] = value;\n  }\n  return array;\n}\n\n/**\n * Concat two typed arrays `a` and `b`.\n * Returns a new typed array.\n */\nexport function concat<T extends TypedArray>(a: T, b: T): T {\n  const result = new (a.constructor as any)(a.length + b.length);\n  result.set(a);\n  result.set(b, a.length);\n  return result;\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CHAR_DATA_CODE_INDEX, NULL_CELL_CODE, WHITESPACE_CELL_CODE } from 'common/buffer/Constants';\nimport { IBufferService } from 'common/services/Services';\n\nexport function updateWindowsModeWrappedState(bufferService: IBufferService): void {\n  // Winpty does not support wraparound mode which means that lines will never\n  // be marked as wrapped. This causes issues for things like copying a line\n  // retaining the wrapped new line characters or if consumers are listening\n  // in on the data stream.\n  //\n  // The workaround for this is to listen to every incoming line feed and mark\n  // the line as wrapped if the last character in the previous line is not a\n  // space. This is certainly not without its problems, but generally on\n  // Windows when text reaches the end of the terminal it's likely going to be\n  // wrapped.\n  const line = bufferService.buffer.lines.get(bufferService.buffer.ybase + bufferService.buffer.y - 1);\n  const lastChar = line?.get(bufferService.cols - 1);\n\n  const nextLine = bufferService.buffer.lines.get(bufferService.buffer.ybase + bufferService.buffer.y);\n  if (nextLine && lastChar) {\n    nextLine.isWrapped = (lastChar[CHAR_DATA_CODE_INDEX] !== NULL_CELL_CODE && lastChar[CHAR_DATA_CODE_INDEX] !== WHITESPACE_CELL_CODE);\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IAttributeData, IColorRGB, IExtendedAttrs } from 'common/Types';\nimport { Attributes, FgFlags, BgFlags, UnderlineStyle } from 'common/buffer/Constants';\n\nexport class AttributeData implements IAttributeData {\n  public static toColorRGB(value: number): IColorRGB {\n    return [\n      value >>> Attributes.RED_SHIFT & 255,\n      value >>> Attributes.GREEN_SHIFT & 255,\n      value & 255\n    ];\n  }\n\n  public static fromColorRGB(value: IColorRGB): number {\n    return (value[0] & 255) << Attributes.RED_SHIFT | (value[1] & 255) << Attributes.GREEN_SHIFT | value[2] & 255;\n  }\n\n  public clone(): IAttributeData {\n    const newObj = new AttributeData();\n    newObj.fg = this.fg;\n    newObj.bg = this.bg;\n    newObj.extended = this.extended.clone();\n    return newObj;\n  }\n\n  // data\n  public fg = 0;\n  public bg = 0;\n  public extended = new ExtendedAttrs();\n\n  // flags\n  public isInverse(): number       { return this.fg & FgFlags.INVERSE; }\n  public isBold(): number          { return this.fg & FgFlags.BOLD; }\n  public isUnderline(): number     { return this.fg & FgFlags.UNDERLINE; }\n  public isBlink(): number         { return this.fg & FgFlags.BLINK; }\n  public isInvisible(): number     { return this.fg & FgFlags.INVISIBLE; }\n  public isItalic(): number        { return this.bg & BgFlags.ITALIC; }\n  public isDim(): number           { return this.bg & BgFlags.DIM; }\n  public isStrikethrough(): number { return this.fg & FgFlags.STRIKETHROUGH; }\n\n  // color modes\n  public getFgColorMode(): number { return this.fg & Attributes.CM_MASK; }\n  public getBgColorMode(): number { return this.bg & Attributes.CM_MASK; }\n  public isFgRGB(): boolean       { return (this.fg & Attributes.CM_MASK) === Attributes.CM_RGB; }\n  public isBgRGB(): boolean       { return (this.bg & Attributes.CM_MASK) === Attributes.CM_RGB; }\n  public isFgPalette(): boolean   { return (this.fg & Attributes.CM_MASK) === Attributes.CM_P16 || (this.fg & Attributes.CM_MASK) === Attributes.CM_P256; }\n  public isBgPalette(): boolean   { return (this.bg & Attributes.CM_MASK) === Attributes.CM_P16 || (this.bg & Attributes.CM_MASK) === Attributes.CM_P256; }\n  public isFgDefault(): boolean   { return (this.fg & Attributes.CM_MASK) === 0; }\n  public isBgDefault(): boolean   { return (this.bg & Attributes.CM_MASK) === 0; }\n  public isAttributeDefault(): boolean { return this.fg === 0 && this.bg === 0; }\n\n  // colors\n  public getFgColor(): number {\n    switch (this.fg & Attributes.CM_MASK) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:  return this.fg & Attributes.PCOLOR_MASK;\n      case Attributes.CM_RGB:   return this.fg & Attributes.RGB_MASK;\n      default:                  return -1;  // CM_DEFAULT defaults to -1\n    }\n  }\n  public getBgColor(): number {\n    switch (this.bg & Attributes.CM_MASK) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:  return this.bg & Attributes.PCOLOR_MASK;\n      case Attributes.CM_RGB:   return this.bg & Attributes.RGB_MASK;\n      default:                  return -1;  // CM_DEFAULT defaults to -1\n    }\n  }\n\n  // extended attrs\n  public hasExtendedAttrs(): number {\n    return this.bg & BgFlags.HAS_EXTENDED;\n  }\n  public updateExtended(): void {\n    if (this.extended.isEmpty()) {\n      this.bg &= ~BgFlags.HAS_EXTENDED;\n    } else {\n      this.bg |= BgFlags.HAS_EXTENDED;\n    }\n  }\n  public getUnderlineColor(): number {\n    if ((this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor) {\n      switch (this.extended.underlineColor & Attributes.CM_MASK) {\n        case Attributes.CM_P16:\n        case Attributes.CM_P256:  return this.extended.underlineColor & Attributes.PCOLOR_MASK;\n        case Attributes.CM_RGB:   return this.extended.underlineColor & Attributes.RGB_MASK;\n        default:                  return this.getFgColor();\n      }\n    }\n    return this.getFgColor();\n  }\n  public getUnderlineColorMode(): number {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? this.extended.underlineColor & Attributes.CM_MASK\n      : this.getFgColorMode();\n  }\n  public isUnderlineColorRGB(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_RGB\n      : this.isFgRGB();\n  }\n  public isUnderlineColorPalette(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_P16\n          || (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_P256\n      : this.isFgPalette();\n  }\n  public isUnderlineColorDefault(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === 0\n      : this.isFgDefault();\n  }\n  public getUnderlineStyle(): UnderlineStyle {\n    return this.fg & FgFlags.UNDERLINE\n      ? (this.bg & BgFlags.HAS_EXTENDED ? this.extended.underlineStyle : UnderlineStyle.SINGLE)\n      : UnderlineStyle.NONE;\n  }\n}\n\n\n/**\n * Extended attributes for a cell.\n * Holds information about different underline styles and color.\n */\nexport class ExtendedAttrs implements IExtendedAttrs {\n  constructor(\n    // underline style, NONE is empty\n    public underlineStyle: UnderlineStyle = UnderlineStyle.NONE,\n    // underline color, -1 is empty (same as FG)\n    public underlineColor: number = -1\n  ) {}\n\n  public clone(): IExtendedAttrs {\n    return new ExtendedAttrs(this.underlineStyle, this.underlineColor);\n  }\n\n  /**\n   * Convenient method to indicate whether the object holds no additional information,\n   * that needs to be persistant in the buffer.\n   */\n  public isEmpty(): boolean {\n    return this.underlineStyle === UnderlineStyle.NONE;\n  }\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CircularList, IInsertEvent } from 'common/CircularList';\nimport { IBuffer, BufferIndex, IBufferStringIterator, IBufferStringIteratorResult } from 'common/buffer/Types';\nimport { IBufferLine, ICellData, IAttributeData, ICharset } from 'common/Types';\nimport { BufferLine, DEFAULT_ATTR_DATA } from 'common/buffer/BufferLine';\nimport { CellData } from 'common/buffer/CellData';\nimport { NULL_CELL_CHAR, NULL_CELL_WIDTH, NULL_CELL_CODE, WHITESPACE_CELL_CHAR, WHITESPACE_CELL_WIDTH, WHITESPACE_CELL_CODE, CHAR_DATA_WIDTH_INDEX, CHAR_DATA_CHAR_INDEX } from 'common/buffer/Constants';\nimport { reflowLargerApplyNewLayout, reflowLargerCreateNewLayout, reflowLargerGetLinesToRemove, reflowSmallerGetNewLineLengths, getWrappedLineTrimmedLength } from 'common/buffer/BufferReflow';\nimport { Marker } from 'common/buffer/Marker';\nimport { IOptionsService, IBufferService } from 'common/services/Services';\nimport { DEFAULT_CHARSET } from 'common/data/Charsets';\nimport { ExtendedAttrs } from 'common/buffer/AttributeData';\n\nexport const MAX_BUFFER_SIZE = 4294967295; // 2^32 - 1\n\n/**\n * This class represents a terminal buffer (an internal state of the terminal), where the\n * following information is stored (in high-level):\n *   - text content of this particular buffer\n *   - cursor position\n *   - scroll position\n */\nexport class Buffer implements IBuffer {\n  public lines: CircularList<IBufferLine>;\n  public ydisp: number = 0;\n  public ybase: number = 0;\n  public y: number = 0;\n  public x: number = 0;\n  public scrollBottom: number;\n  public scrollTop: number;\n  // TODO: Type me\n  public tabs: any;\n  public savedY: number = 0;\n  public savedX: number = 0;\n  public savedCurAttrData = DEFAULT_ATTR_DATA.clone();\n  public savedCharset: ICharset | undefined = DEFAULT_CHARSET;\n  public markers: Marker[] = [];\n  private _nullCell: ICellData = CellData.fromCharData([0, NULL_CELL_CHAR, NULL_CELL_WIDTH, NULL_CELL_CODE]);\n  private _whitespaceCell: ICellData = CellData.fromCharData([0, WHITESPACE_CELL_CHAR, WHITESPACE_CELL_WIDTH, WHITESPACE_CELL_CODE]);\n  private _cols: number;\n  private _rows: number;\n\n  constructor(\n    private _hasScrollback: boolean,\n    private _optionsService: IOptionsService,\n    private _bufferService: IBufferService\n  ) {\n    this._cols = this._bufferService.cols;\n    this._rows = this._bufferService.rows;\n    this.lines = new CircularList<IBufferLine>(this._getCorrectBufferLength(this._rows));\n    this.scrollTop = 0;\n    this.scrollBottom = this._rows - 1;\n    this.setupTabStops();\n  }\n\n  public getNullCell(attr?: IAttributeData): ICellData {\n    if (attr) {\n      this._nullCell.fg = attr.fg;\n      this._nullCell.bg = attr.bg;\n      this._nullCell.extended = attr.extended;\n    } else {\n      this._nullCell.fg = 0;\n      this._nullCell.bg = 0;\n      this._nullCell.extended = new ExtendedAttrs();\n    }\n    return this._nullCell;\n  }\n\n  public getWhitespaceCell(attr?: IAttributeData): ICellData {\n    if (attr) {\n      this._whitespaceCell.fg = attr.fg;\n      this._whitespaceCell.bg = attr.bg;\n      this._whitespaceCell.extended = attr.extended;\n    } else {\n      this._whitespaceCell.fg = 0;\n      this._whitespaceCell.bg = 0;\n      this._whitespaceCell.extended = new ExtendedAttrs();\n    }\n    return this._whitespaceCell;\n  }\n\n  public getBlankLine(attr: IAttributeData, isWrapped?: boolean): IBufferLine {\n    return new BufferLine(this._bufferService.cols, this.getNullCell(attr), isWrapped);\n  }\n\n  public get hasScrollback(): boolean {\n    return this._hasScrollback && this.lines.maxLength > this._rows;\n  }\n\n  public get isCursorInViewport(): boolean {\n    const absoluteY = this.ybase + this.y;\n    const relativeY = absoluteY - this.ydisp;\n    return (relativeY >= 0 && relativeY < this._rows);\n  }\n\n  /**\n   * Gets the correct buffer length based on the rows provided, the terminal's\n   * scrollback and whether this buffer is flagged to have scrollback or not.\n   * @param rows The terminal rows to use in the calculation.\n   */\n  private _getCorrectBufferLength(rows: number): number {\n    if (!this._hasScrollback) {\n      return rows;\n    }\n\n    const correctBufferLength = rows + this._optionsService.rawOptions.scrollback;\n\n    return correctBufferLength > MAX_BUFFER_SIZE ? MAX_BUFFER_SIZE : correctBufferLength;\n  }\n\n  /**\n   * Fills the buffer's viewport with blank lines.\n   */\n  public fillViewportRows(fillAttr?: IAttributeData): void {\n    if (this.lines.length === 0) {\n      if (fillAttr === undefined) {\n        fillAttr = DEFAULT_ATTR_DATA;\n      }\n      let i = this._rows;\n      while (i--) {\n        this.lines.push(this.getBlankLine(fillAttr));\n      }\n    }\n  }\n\n  /**\n   * Clears the buffer to it's initial state, discarding all previous data.\n   */\n  public clear(): void {\n    this.ydisp = 0;\n    this.ybase = 0;\n    this.y = 0;\n    this.x = 0;\n    this.lines = new CircularList<IBufferLine>(this._getCorrectBufferLength(this._rows));\n    this.scrollTop = 0;\n    this.scrollBottom = this._rows - 1;\n    this.setupTabStops();\n  }\n\n  /**\n   * Resizes the buffer, adjusting its data accordingly.\n   * @param newCols The new number of columns.\n   * @param newRows The new number of rows.\n   */\n  public resize(newCols: number, newRows: number): void {\n    // store reference to null cell with default attrs\n    const nullCell = this.getNullCell(DEFAULT_ATTR_DATA);\n\n    // Increase max length if needed before adjustments to allow space to fill\n    // as required.\n    const newMaxLength = this._getCorrectBufferLength(newRows);\n    if (newMaxLength > this.lines.maxLength) {\n      this.lines.maxLength = newMaxLength;\n    }\n\n    // The following adjustments should only happen if the buffer has been\n    // initialized/filled.\n    if (this.lines.length > 0) {\n      // Deal with columns increasing (reducing needs to happen after reflow)\n      if (this._cols < newCols) {\n        for (let i = 0; i < this.lines.length; i++) {\n          this.lines.get(i)!.resize(newCols, nullCell);\n        }\n      }\n\n      // Resize rows in both directions as needed\n      let addToY = 0;\n      if (this._rows < newRows) {\n        for (let y = this._rows; y < newRows; y++) {\n          if (this.lines.length < newRows + this.ybase) {\n            if (this._optionsService.rawOptions.windowsMode) {\n              // Just add the new missing rows on Windows as conpty reprints the screen with it's\n              // view of the world. Once a line enters scrollback for conpty it remains there\n              this.lines.push(new BufferLine(newCols, nullCell));\n            } else {\n              if (this.ybase > 0 && this.lines.length <= this.ybase + this.y + addToY + 1) {\n                // There is room above the buffer and there are no empty elements below the line,\n                // scroll up\n                this.ybase--;\n                addToY++;\n                if (this.ydisp > 0) {\n                  // Viewport is at the top of the buffer, must increase downwards\n                  this.ydisp--;\n                }\n              } else {\n                // Add a blank line if there is no buffer left at the top to scroll to, or if there\n                // are blank lines after the cursor\n                this.lines.push(new BufferLine(newCols, nullCell));\n              }\n            }\n          }\n        }\n      } else { // (this._rows >= newRows)\n        for (let y = this._rows; y > newRows; y--) {\n          if (this.lines.length > newRows + this.ybase) {\n            if (this.lines.length > this.ybase + this.y + 1) {\n              // The line is a blank line below the cursor, remove it\n              this.lines.pop();\n            } else {\n              // The line is the cursor, scroll down\n              this.ybase++;\n              this.ydisp++;\n            }\n          }\n        }\n      }\n\n      // Reduce max length if needed after adjustments, this is done after as it\n      // would otherwise cut data from the bottom of the buffer.\n      if (newMaxLength < this.lines.maxLength) {\n        // Trim from the top of the buffer and adjust ybase and ydisp.\n        const amountToTrim = this.lines.length - newMaxLength;\n        if (amountToTrim > 0) {\n          this.lines.trimStart(amountToTrim);\n          this.ybase = Math.max(this.ybase - amountToTrim, 0);\n          this.ydisp = Math.max(this.ydisp - amountToTrim, 0);\n          this.savedY = Math.max(this.savedY - amountToTrim, 0);\n        }\n        this.lines.maxLength = newMaxLength;\n      }\n\n      // Make sure that the cursor stays on screen\n      this.x = Math.min(this.x, newCols - 1);\n      this.y = Math.min(this.y, newRows - 1);\n      if (addToY) {\n        this.y += addToY;\n      }\n      this.savedX = Math.min(this.savedX, newCols - 1);\n\n      this.scrollTop = 0;\n    }\n\n    this.scrollBottom = newRows - 1;\n\n    if (this._isReflowEnabled) {\n      this._reflow(newCols, newRows);\n\n      // Trim the end of the line off if cols shrunk\n      if (this._cols > newCols) {\n        for (let i = 0; i < this.lines.length; i++) {\n          this.lines.get(i)!.resize(newCols, nullCell);\n        }\n      }\n    }\n\n    this._cols = newCols;\n    this._rows = newRows;\n  }\n\n  private get _isReflowEnabled(): boolean {\n    return this._hasScrollback && !this._optionsService.rawOptions.windowsMode;\n  }\n\n  private _reflow(newCols: number, newRows: number): void {\n    if (this._cols === newCols) {\n      return;\n    }\n\n    // Iterate through rows, ignore the last one as it cannot be wrapped\n    if (newCols > this._cols) {\n      this._reflowLarger(newCols, newRows);\n    } else {\n      this._reflowSmaller(newCols, newRows);\n    }\n  }\n\n  private _reflowLarger(newCols: number, newRows: number): void {\n    const toRemove: number[] = reflowLargerGetLinesToRemove(this.lines, this._cols, newCols, this.ybase + this.y, this.getNullCell(DEFAULT_ATTR_DATA));\n    if (toRemove.length > 0) {\n      const newLayoutResult = reflowLargerCreateNewLayout(this.lines, toRemove);\n      reflowLargerApplyNewLayout(this.lines, newLayoutResult.layout);\n      this._reflowLargerAdjustViewport(newCols, newRows, newLayoutResult.countRemoved);\n    }\n  }\n\n  private _reflowLargerAdjustViewport(newCols: number, newRows: number, countRemoved: number): void {\n    const nullCell = this.getNullCell(DEFAULT_ATTR_DATA);\n    // Adjust viewport based on number of items removed\n    let viewportAdjustments = countRemoved;\n    while (viewportAdjustments-- > 0) {\n      if (this.ybase === 0) {\n        if (this.y > 0) {\n          this.y--;\n        }\n        if (this.lines.length < newRows) {\n          // Add an extra row at the bottom of the viewport\n          this.lines.push(new BufferLine(newCols, nullCell));\n        }\n      } else {\n        if (this.ydisp === this.ybase) {\n          this.ydisp--;\n        }\n        this.ybase--;\n      }\n    }\n    this.savedY = Math.max(this.savedY - countRemoved, 0);\n  }\n\n  private _reflowSmaller(newCols: number, newRows: number): void {\n    const nullCell = this.getNullCell(DEFAULT_ATTR_DATA);\n    // Gather all BufferLines that need to be inserted into the Buffer here so that they can be\n    // batched up and only committed once\n    const toInsert = [];\n    let countToInsert = 0;\n    // Go backwards as many lines may be trimmed and this will avoid considering them\n    for (let y = this.lines.length - 1; y >= 0; y--) {\n      // Check whether this line is a problem\n      let nextLine = this.lines.get(y) as BufferLine;\n      if (!nextLine || !nextLine.isWrapped && nextLine.getTrimmedLength() <= newCols) {\n        continue;\n      }\n\n      // Gather wrapped lines and adjust y to be the starting line\n      const wrappedLines: BufferLine[] = [nextLine];\n      while (nextLine.isWrapped && y > 0) {\n        nextLine = this.lines.get(--y) as BufferLine;\n        wrappedLines.unshift(nextLine);\n      }\n\n      // If these lines contain the cursor don't touch them, the program will handle fixing up\n      // wrapped lines with the cursor\n      const absoluteY = this.ybase + this.y;\n      if (absoluteY >= y && absoluteY < y + wrappedLines.length) {\n        continue;\n      }\n\n      const lastLineLength = wrappedLines[wrappedLines.length - 1].getTrimmedLength();\n      const destLineLengths = reflowSmallerGetNewLineLengths(wrappedLines, this._cols, newCols);\n      const linesToAdd = destLineLengths.length - wrappedLines.length;\n      let trimmedLines: number;\n      if (this.ybase === 0 && this.y !== this.lines.length - 1) {\n        // If the top section of the buffer is not yet filled\n        trimmedLines = Math.max(0, this.y - this.lines.maxLength + linesToAdd);\n      } else {\n        trimmedLines = Math.max(0, this.lines.length - this.lines.maxLength + linesToAdd);\n      }\n\n      // Add the new lines\n      const newLines: BufferLine[] = [];\n      for (let i = 0; i < linesToAdd; i++) {\n        const newLine = this.getBlankLine(DEFAULT_ATTR_DATA, true) as BufferLine;\n        newLines.push(newLine);\n      }\n      if (newLines.length > 0) {\n        toInsert.push({\n          // countToInsert here gets the actual index, taking into account other inserted items.\n          // using this we can iterate through the list forwards\n          start: y + wrappedLines.length + countToInsert,\n          newLines\n        });\n        countToInsert += newLines.length;\n      }\n      wrappedLines.push(...newLines);\n\n      // Copy buffer data to new locations, this needs to happen backwards to do in-place\n      let destLineIndex = destLineLengths.length - 1; // Math.floor(cellsNeeded / newCols);\n      let destCol = destLineLengths[destLineIndex]; // cellsNeeded % newCols;\n      if (destCol === 0) {\n        destLineIndex--;\n        destCol = destLineLengths[destLineIndex];\n      }\n      let srcLineIndex = wrappedLines.length - linesToAdd - 1;\n      let srcCol = lastLineLength;\n      while (srcLineIndex >= 0) {\n        const cellsToCopy = Math.min(srcCol, destCol);\n        if (wrappedLines[destLineIndex] === undefined) {\n          // Sanity check that the line exists, this has been known to fail for an unknown reason\n          // which would stop the reflow from happening if an exception would throw.\n          break;\n        }\n        wrappedLines[destLineIndex].copyCellsFrom(wrappedLines[srcLineIndex], srcCol - cellsToCopy, destCol - cellsToCopy, cellsToCopy, true);\n        destCol -= cellsToCopy;\n        if (destCol === 0) {\n          destLineIndex--;\n          destCol = destLineLengths[destLineIndex];\n        }\n        srcCol -= cellsToCopy;\n        if (srcCol === 0) {\n          srcLineIndex--;\n          const wrappedLinesIndex = Math.max(srcLineIndex, 0);\n          srcCol = getWrappedLineTrimmedLength(wrappedLines, wrappedLinesIndex, this._cols);\n        }\n      }\n\n      // Null out the end of the line ends if a wide character wrapped to the following line\n      for (let i = 0; i < wrappedLines.length; i++) {\n        if (destLineLengths[i] < newCols) {\n          wrappedLines[i].setCell(destLineLengths[i], nullCell);\n        }\n      }\n\n      // Adjust viewport as needed\n      let viewportAdjustments = linesToAdd - trimmedLines;\n      while (viewportAdjustments-- > 0) {\n        if (this.ybase === 0) {\n          if (this.y < newRows - 1) {\n            this.y++;\n            this.lines.pop();\n          } else {\n            this.ybase++;\n            this.ydisp++;\n          }\n        } else {\n          // Ensure ybase does not exceed its maximum value\n          if (this.ybase < Math.min(this.lines.maxLength, this.lines.length + countToInsert) - newRows) {\n            if (this.ybase === this.ydisp) {\n              this.ydisp++;\n            }\n            this.ybase++;\n          }\n        }\n      }\n      this.savedY = Math.min(this.savedY + linesToAdd, this.ybase + newRows - 1);\n    }\n\n    // Rearrange lines in the buffer if there are any insertions, this is done at the end rather\n    // than earlier so that it's a single O(n) pass through the buffer, instead of O(n^2) from many\n    // costly calls to CircularList.splice.\n    if (toInsert.length > 0) {\n      // Record buffer insert events and then play them back backwards so that the indexes are\n      // correct\n      const insertEvents: IInsertEvent[] = [];\n\n      // Record original lines so they don't get overridden when we rearrange the list\n      const originalLines: BufferLine[] = [];\n      for (let i = 0; i < this.lines.length; i++) {\n        originalLines.push(this.lines.get(i) as BufferLine);\n      }\n      const originalLinesLength = this.lines.length;\n\n      let originalLineIndex = originalLinesLength - 1;\n      let nextToInsertIndex = 0;\n      let nextToInsert = toInsert[nextToInsertIndex];\n      this.lines.length = Math.min(this.lines.maxLength, this.lines.length + countToInsert);\n      let countInsertedSoFar = 0;\n      for (let i = Math.min(this.lines.maxLength - 1, originalLinesLength + countToInsert - 1); i >= 0; i--) {\n        if (nextToInsert && nextToInsert.start > originalLineIndex + countInsertedSoFar) {\n          // Insert extra lines here, adjusting i as needed\n          for (let nextI = nextToInsert.newLines.length - 1; nextI >= 0; nextI--) {\n            this.lines.set(i--, nextToInsert.newLines[nextI]);\n          }\n          i++;\n\n          // Create insert events for later\n          insertEvents.push({\n            index: originalLineIndex + 1,\n            amount: nextToInsert.newLines.length\n          });\n\n          countInsertedSoFar += nextToInsert.newLines.length;\n          nextToInsert = toInsert[++nextToInsertIndex];\n        } else {\n          this.lines.set(i, originalLines[originalLineIndex--]);\n        }\n      }\n\n      // Update markers\n      let insertCountEmitted = 0;\n      for (let i = insertEvents.length - 1; i >= 0; i--) {\n        insertEvents[i].index += insertCountEmitted;\n        this.lines.onInsertEmitter.fire(insertEvents[i]);\n        insertCountEmitted += insertEvents[i].amount;\n      }\n      const amountToTrim = Math.max(0, originalLinesLength + countToInsert - this.lines.maxLength);\n      if (amountToTrim > 0) {\n        this.lines.onTrimEmitter.fire(amountToTrim);\n      }\n    }\n  }\n\n  // private _reflowSmallerGetLinesNeeded()\n\n  /**\n   * Translates a string index back to a BufferIndex.\n   * To get the correct buffer position the string must start at `startCol` 0\n   * (default in translateBufferLineToString).\n   * The method also works on wrapped line strings given rows were not trimmed.\n   * The method operates on the CharData string length, there are no\n   * additional content or boundary checks. Therefore the string and the buffer\n   * should not be altered in between.\n   * TODO: respect trim flag after fixing #1685\n   * @param lineIndex line index the string was retrieved from\n   * @param stringIndex index within the string\n   * @param startCol column offset the string was retrieved from\n   */\n  public stringIndexToBufferIndex(lineIndex: number, stringIndex: number, trimRight: boolean = false): BufferIndex {\n    while (stringIndex) {\n      const line = this.lines.get(lineIndex);\n      if (!line) {\n        return [-1, -1];\n      }\n      const length = (trimRight) ? line.getTrimmedLength() : line.length;\n      for (let i = 0; i < length; ++i) {\n        if (line.get(i)[CHAR_DATA_WIDTH_INDEX]) {\n          // empty cells report a string length of 0, but get replaced\n          // with a whitespace in translateToString, thus replace with 1\n          stringIndex -= line.get(i)[CHAR_DATA_CHAR_INDEX].length || 1;\n        }\n        if (stringIndex < 0) {\n          return [lineIndex, i];\n        }\n      }\n      lineIndex++;\n    }\n    return [lineIndex, 0];\n  }\n\n  /**\n   * Translates a buffer line to a string, with optional start and end columns.\n   * Wide characters will count as two columns in the resulting string. This\n   * function is useful for getting the actual text underneath the raw selection\n   * position.\n   * @param line The line being translated.\n   * @param trimRight Whether to trim whitespace to the right.\n   * @param startCol The column to start at.\n   * @param endCol The column to end at.\n   */\n  public translateBufferLineToString(lineIndex: number, trimRight: boolean, startCol: number = 0, endCol?: number): string {\n    const line = this.lines.get(lineIndex);\n    if (!line) {\n      return '';\n    }\n    return line.translateToString(trimRight, startCol, endCol);\n  }\n\n  public getWrappedRangeForLine(y: number): { first: number, last: number } {\n    let first = y;\n    let last = y;\n    // Scan upwards for wrapped lines\n    while (first > 0 && this.lines.get(first)!.isWrapped) {\n      first--;\n    }\n    // Scan downwards for wrapped lines\n    while (last + 1 < this.lines.length && this.lines.get(last + 1)!.isWrapped) {\n      last++;\n    }\n    return { first, last };\n  }\n\n  /**\n   * Setup the tab stops.\n   * @param i The index to start setting up tab stops from.\n   */\n  public setupTabStops(i?: number): void {\n    if (i !== null && i !== undefined) {\n      if (!this.tabs[i]) {\n        i = this.prevStop(i);\n      }\n    } else {\n      this.tabs = {};\n      i = 0;\n    }\n\n    for (; i < this._cols; i += this._optionsService.rawOptions.tabStopWidth) {\n      this.tabs[i] = true;\n    }\n  }\n\n  /**\n   * Move the cursor to the previous tab stop from the given position (default is current).\n   * @param x The position to move the cursor to the previous tab stop.\n   */\n  public prevStop(x?: number): number {\n    if (x === null || x === undefined) {\n      x = this.x;\n    }\n    while (!this.tabs[--x] && x > 0);\n    return x >= this._cols ? this._cols - 1 : x < 0 ? 0 : x;\n  }\n\n  /**\n   * Move the cursor one tab stop forward from the given position (default is current).\n   * @param x The position to move the cursor one tab stop forward.\n   */\n  public nextStop(x?: number): number {\n    if (x === null || x === undefined) {\n      x = this.x;\n    }\n    while (!this.tabs[++x] && x < this._cols);\n    return x >= this._cols ? this._cols - 1 : x < 0 ? 0 : x;\n  }\n\n  public addMarker(y: number): Marker {\n    const marker = new Marker(y);\n    this.markers.push(marker);\n    marker.register(this.lines.onTrim(amount => {\n      marker.line -= amount;\n      // The marker should be disposed when the line is trimmed from the buffer\n      if (marker.line < 0) {\n        marker.dispose();\n      }\n    }));\n    marker.register(this.lines.onInsert(event => {\n      if (marker.line >= event.index) {\n        marker.line += event.amount;\n      }\n    }));\n    marker.register(this.lines.onDelete(event => {\n      // Delete the marker if it's within the range\n      if (marker.line >= event.index && marker.line < event.index + event.amount) {\n        marker.dispose();\n      }\n\n      // Shift the marker if it's after the deleted range\n      if (marker.line > event.index) {\n        marker.line -= event.amount;\n      }\n    }));\n    marker.register(marker.onDispose(() => this._removeMarker(marker)));\n    return marker;\n  }\n\n  private _removeMarker(marker: Marker): void {\n    this.markers.splice(this.markers.indexOf(marker), 1);\n  }\n\n  public iterator(trimRight: boolean, startIndex?: number, endIndex?: number, startOverscan?: number, endOverscan?: number): IBufferStringIterator {\n    return new BufferStringIterator(this, trimRight, startIndex, endIndex, startOverscan, endOverscan);\n  }\n}\n\n/**\n * Iterator to get unwrapped content strings from the buffer.\n * The iterator returns at least the string data between the borders\n * `startIndex` and `endIndex` (exclusive) and will expand the lines\n * by `startOverscan` to the top and by `endOverscan` to the bottom,\n * if no new line was found in between.\n * It will never read/return string data beyond `startIndex - startOverscan`\n * or `endIndex + endOverscan`. Therefore the first and last line might be truncated.\n * It is possible to always get the full string for the first and last line as well\n * by setting the overscan values to the actual buffer length. This not recommended\n * since it might return the whole buffer within a single string in a worst case scenario.\n */\nexport class BufferStringIterator implements IBufferStringIterator {\n  private _current: number;\n\n  constructor (\n    private _buffer: IBuffer,\n    private _trimRight: boolean,\n    private _startIndex: number = 0,\n    private _endIndex: number = _buffer.lines.length,\n    private _startOverscan: number = 0,\n    private _endOverscan: number = 0\n  ) {\n    if (this._startIndex < 0) {\n      this._startIndex = 0;\n    }\n    if (this._endIndex > this._buffer.lines.length) {\n      this._endIndex = this._buffer.lines.length;\n    }\n    this._current = this._startIndex;\n  }\n\n  public hasNext(): boolean {\n    return this._current < this._endIndex;\n  }\n\n  public next(): IBufferStringIteratorResult {\n    const range = this._buffer.getWrappedRangeForLine(this._current);\n    // limit search window to overscan value at both borders\n    if (range.first < this._startIndex - this._startOverscan) {\n      range.first = this._startIndex - this._startOverscan;\n    }\n    if (range.last > this._endIndex + this._endOverscan) {\n      range.last = this._endIndex + this._endOverscan;\n    }\n    // limit to current buffer length\n    range.first = Math.max(range.first, 0);\n    range.last = Math.min(range.last, this._buffer.lines.length);\n    let content = '';\n    for (let i = range.first; i <= range.last; ++i) {\n      content += this._buffer.translateBufferLineToString(i, this._trimRight);\n    }\n    this._current = range.last + 1;\n    return { range, content };\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CharData, IBufferLine, ICellData, IAttributeData, IExtendedAttrs } from 'common/Types';\nimport { stringFromCodePoint } from 'common/input/TextDecoder';\nimport { CHAR_DATA_CHAR_INDEX, CHAR_DATA_WIDTH_INDEX, CHAR_DATA_ATTR_INDEX, NULL_CELL_CHAR, NULL_CELL_WIDTH, NULL_CELL_CODE, WHITESPACE_CELL_CHAR, Content, BgFlags } from 'common/buffer/Constants';\nimport { CellData } from 'common/buffer/CellData';\nimport { AttributeData, ExtendedAttrs } from 'common/buffer/AttributeData';\n\n/**\n * buffer memory layout:\n *\n *   |             uint32_t             |        uint32_t         |        uint32_t         |\n *   |             `content`            |          `FG`           |          `BG`           |\n *   | wcwidth(2) comb(1) codepoint(21) | flags(8) R(8) G(8) B(8) | flags(8) R(8) G(8) B(8) |\n */\n\n\n/** typed array slots taken by one cell */\nconst CELL_SIZE = 3;\n\n/**\n * Cell member indices.\n *\n * Direct access:\n *    `content = data[column * CELL_SIZE + Cell.CONTENT];`\n *    `fg = data[column * CELL_SIZE + Cell.FG];`\n *    `bg = data[column * CELL_SIZE + Cell.BG];`\n */\nconst enum Cell {\n  CONTENT = 0,\n  FG = 1, // currently simply holds all known attrs\n  BG = 2  // currently unused\n}\n\nexport const DEFAULT_ATTR_DATA = Object.freeze(new AttributeData());\n\n/**\n * Typed array based bufferline implementation.\n *\n * There are 2 ways to insert data into the cell buffer:\n * - `setCellFromCodepoint` + `addCodepointToCell`\n *   Use these for data that is already UTF32.\n *   Used during normal input in `InputHandler` for faster buffer access.\n * - `setCell`\n *   This method takes a CellData object and stores the data in the buffer.\n *   Use `CellData.fromCharData` to create the CellData object (e.g. from JS string).\n *\n * To retrieve data from the buffer use either one of the primitive methods\n * (if only one particular value is needed) or `loadCell`. For `loadCell` in a loop\n * memory allocs / GC pressure can be greatly reduced by reusing the CellData object.\n */\nexport class BufferLine implements IBufferLine {\n  protected _data: Uint32Array;\n  protected _combined: {[index: number]: string} = {};\n  protected _extendedAttrs: {[index: number]: ExtendedAttrs} = {};\n  public length: number;\n\n  constructor(cols: number, fillCellData?: ICellData, public isWrapped: boolean = false) {\n    this._data = new Uint32Array(cols * CELL_SIZE);\n    const cell = fillCellData || CellData.fromCharData([0, NULL_CELL_CHAR, NULL_CELL_WIDTH, NULL_CELL_CODE]);\n    for (let i = 0; i < cols; ++i) {\n      this.setCell(i, cell);\n    }\n    this.length = cols;\n  }\n\n  /**\n   * Get cell data CharData.\n   * @deprecated\n   */\n  public get(index: number): CharData {\n    const content = this._data[index * CELL_SIZE + Cell.CONTENT];\n    const cp = content & Content.CODEPOINT_MASK;\n    return [\n      this._data[index * CELL_SIZE + Cell.FG],\n      (content & Content.IS_COMBINED_MASK)\n        ? this._combined[index]\n        : (cp) ? stringFromCodePoint(cp) : '',\n      content >> Content.WIDTH_SHIFT,\n      (content & Content.IS_COMBINED_MASK)\n        ? this._combined[index].charCodeAt(this._combined[index].length - 1)\n        : cp\n    ];\n  }\n\n  /**\n   * Set cell data from CharData.\n   * @deprecated\n   */\n  public set(index: number, value: CharData): void {\n    this._data[index * CELL_SIZE + Cell.FG] = value[CHAR_DATA_ATTR_INDEX];\n    if (value[CHAR_DATA_CHAR_INDEX].length > 1) {\n      this._combined[index] = value[1];\n      this._data[index * CELL_SIZE + Cell.CONTENT] = index | Content.IS_COMBINED_MASK | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    } else {\n      this._data[index * CELL_SIZE + Cell.CONTENT] = value[CHAR_DATA_CHAR_INDEX].charCodeAt(0) | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    }\n  }\n\n  /**\n   * primitive getters\n   * use these when only one value is needed, otherwise use `loadCell`\n   */\n  public getWidth(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.CONTENT] >> Content.WIDTH_SHIFT;\n  }\n\n  /** Test whether content has width. */\n  public hasWidth(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.CONTENT] & Content.WIDTH_MASK;\n  }\n\n  /** Get FG cell component. */\n  public getFg(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.FG];\n  }\n\n  /** Get BG cell component. */\n  public getBg(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.BG];\n  }\n\n  /**\n   * Test whether contains any chars.\n   * Basically an empty has no content, but other cells might differ in FG/BG\n   * from real empty cells.\n   * */\n  public hasContent(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.CONTENT] & Content.HAS_CONTENT_MASK;\n  }\n\n  /**\n   * Get codepoint of the cell.\n   * To be in line with `code` in CharData this either returns\n   * a single UTF32 codepoint or the last codepoint of a combined string.\n   */\n  public getCodePoint(index: number): number {\n    const content = this._data[index * CELL_SIZE + Cell.CONTENT];\n    if (content & Content.IS_COMBINED_MASK) {\n      return this._combined[index].charCodeAt(this._combined[index].length - 1);\n    }\n    return content & Content.CODEPOINT_MASK;\n  }\n\n  /** Test whether the cell contains a combined string. */\n  public isCombined(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.CONTENT] & Content.IS_COMBINED_MASK;\n  }\n\n  /** Returns the string content of the cell. */\n  public getString(index: number): string {\n    const content = this._data[index * CELL_SIZE + Cell.CONTENT];\n    if (content & Content.IS_COMBINED_MASK) {\n      return this._combined[index];\n    }\n    if (content & Content.CODEPOINT_MASK) {\n      return stringFromCodePoint(content & Content.CODEPOINT_MASK);\n    }\n    // return empty string for empty cells\n    return '';\n  }\n\n  /**\n   * Load data at `index` into `cell`. This is used to access cells in a way that's more friendly\n   * to GC as it significantly reduced the amount of new objects/references needed.\n   */\n  public loadCell(index: number, cell: ICellData): ICellData {\n    const startIndex = index * CELL_SIZE;\n    cell.content = this._data[startIndex + Cell.CONTENT];\n    cell.fg = this._data[startIndex + Cell.FG];\n    cell.bg = this._data[startIndex + Cell.BG];\n    if (cell.content & Content.IS_COMBINED_MASK) {\n      cell.combinedData = this._combined[index];\n    }\n    if (cell.bg & BgFlags.HAS_EXTENDED) {\n      cell.extended = this._extendedAttrs[index];\n    }\n    return cell;\n  }\n\n  /**\n   * Set data at `index` to `cell`.\n   */\n  public setCell(index: number, cell: ICellData): void {\n    if (cell.content & Content.IS_COMBINED_MASK) {\n      this._combined[index] = cell.combinedData;\n    }\n    if (cell.bg & BgFlags.HAS_EXTENDED) {\n      this._extendedAttrs[index] = cell.extended;\n    }\n    this._data[index * CELL_SIZE + Cell.CONTENT] = cell.content;\n    this._data[index * CELL_SIZE + Cell.FG] = cell.fg;\n    this._data[index * CELL_SIZE + Cell.BG] = cell.bg;\n  }\n\n  /**\n   * Set cell data from input handler.\n   * Since the input handler see the incoming chars as UTF32 codepoints,\n   * it gets an optimized access method.\n   */\n  public setCellFromCodePoint(index: number, codePoint: number, width: number, fg: number, bg: number, eAttrs: IExtendedAttrs): void {\n    if (bg & BgFlags.HAS_EXTENDED) {\n      this._extendedAttrs[index] = eAttrs;\n    }\n    this._data[index * CELL_SIZE + Cell.CONTENT] = codePoint | (width << Content.WIDTH_SHIFT);\n    this._data[index * CELL_SIZE + Cell.FG] = fg;\n    this._data[index * CELL_SIZE + Cell.BG] = bg;\n  }\n\n  /**\n   * Add a codepoint to a cell from input handler.\n   * During input stage combining chars with a width of 0 follow and stack\n   * onto a leading char. Since we already set the attrs\n   * by the previous `setDataFromCodePoint` call, we can omit it here.\n   */\n  public addCodepointToCell(index: number, codePoint: number): void {\n    let content = this._data[index * CELL_SIZE + Cell.CONTENT];\n    if (content & Content.IS_COMBINED_MASK) {\n      // we already have a combined string, simply add\n      this._combined[index] += stringFromCodePoint(codePoint);\n    } else {\n      if (content & Content.CODEPOINT_MASK) {\n        // normal case for combining chars:\n        //  - move current leading char + new one into combined string\n        //  - set combined flag\n        this._combined[index] = stringFromCodePoint(content & Content.CODEPOINT_MASK) + stringFromCodePoint(codePoint);\n        content &= ~Content.CODEPOINT_MASK; // set codepoint in buffer to 0\n        content |= Content.IS_COMBINED_MASK;\n      } else {\n        // should not happen - we actually have no data in the cell yet\n        // simply set the data in the cell buffer with a width of 1\n        content = codePoint | (1 << Content.WIDTH_SHIFT);\n      }\n      this._data[index * CELL_SIZE + Cell.CONTENT] = content;\n    }\n  }\n\n  public insertCells(pos: number, n: number, fillCellData: ICellData, eraseAttr?: IAttributeData): void {\n    pos %= this.length;\n\n    // handle fullwidth at pos: reset cell one to the left if pos is second cell of a wide char\n    if (pos && this.getWidth(pos - 1) === 2) {\n      this.setCellFromCodePoint(pos - 1, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n    }\n\n    if (n < this.length - pos) {\n      const cell = new CellData();\n      for (let i = this.length - pos - n - 1; i >= 0; --i) {\n        this.setCell(pos + n + i, this.loadCell(pos + i, cell));\n      }\n      for (let i = 0; i < n; ++i) {\n        this.setCell(pos + i, fillCellData);\n      }\n    } else {\n      for (let i = pos; i < this.length; ++i) {\n        this.setCell(i, fillCellData);\n      }\n    }\n\n    // handle fullwidth at line end: reset last cell if it is first cell of a wide char\n    if (this.getWidth(this.length - 1) === 2) {\n      this.setCellFromCodePoint(this.length - 1, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n    }\n  }\n\n  public deleteCells(pos: number, n: number, fillCellData: ICellData, eraseAttr?: IAttributeData): void {\n    pos %= this.length;\n    if (n < this.length - pos) {\n      const cell = new CellData();\n      for (let i = 0; i < this.length - pos - n; ++i) {\n        this.setCell(pos + i, this.loadCell(pos + n + i, cell));\n      }\n      for (let i = this.length - n; i < this.length; ++i) {\n        this.setCell(i, fillCellData);\n      }\n    } else {\n      for (let i = pos; i < this.length; ++i) {\n        this.setCell(i, fillCellData);\n      }\n    }\n\n    // handle fullwidth at pos:\n    // - reset pos-1 if wide char\n    // - reset pos if width==0 (previous second cell of a wide char)\n    if (pos && this.getWidth(pos - 1) === 2) {\n      this.setCellFromCodePoint(pos - 1, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n    }\n    if (this.getWidth(pos) === 0 && !this.hasContent(pos)) {\n      this.setCellFromCodePoint(pos, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n    }\n  }\n\n  public replaceCells(start: number, end: number, fillCellData: ICellData, eraseAttr?: IAttributeData): void {\n    // handle fullwidth at start: reset cell one to the left if start is second cell of a wide char\n    if (start && this.getWidth(start - 1) === 2) {\n      this.setCellFromCodePoint(start - 1, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n    }\n    // handle fullwidth at last cell + 1: reset to empty cell if it is second part of a wide char\n    if (end < this.length && this.getWidth(end - 1) === 2) {\n      this.setCellFromCodePoint(end, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n    }\n\n    while (start < end  && start < this.length) {\n      this.setCell(start++, fillCellData);\n    }\n  }\n\n  public resize(cols: number, fillCellData: ICellData): void {\n    if (cols === this.length) {\n      return;\n    }\n    if (cols > this.length) {\n      const data = new Uint32Array(cols * CELL_SIZE);\n      if (this.length) {\n        if (cols * CELL_SIZE < this._data.length) {\n          data.set(this._data.subarray(0, cols * CELL_SIZE));\n        } else {\n          data.set(this._data);\n        }\n      }\n      this._data = data;\n      for (let i = this.length; i < cols; ++i) {\n        this.setCell(i, fillCellData);\n      }\n    } else {\n      if (cols) {\n        const data = new Uint32Array(cols * CELL_SIZE);\n        data.set(this._data.subarray(0, cols * CELL_SIZE));\n        this._data = data;\n        // Remove any cut off combined data, FIXME: repeat this for extended attrs\n        const keys = Object.keys(this._combined);\n        for (let i = 0; i < keys.length; i++) {\n          const key = parseInt(keys[i], 10);\n          if (key >= cols) {\n            delete this._combined[key];\n          }\n        }\n      } else {\n        this._data = new Uint32Array(0);\n        this._combined = {};\n      }\n    }\n    this.length = cols;\n  }\n\n  /** fill a line with fillCharData */\n  public fill(fillCellData: ICellData): void {\n    this._combined = {};\n    this._extendedAttrs = {};\n    for (let i = 0; i < this.length; ++i) {\n      this.setCell(i, fillCellData);\n    }\n  }\n\n  /** alter to a full copy of line  */\n  public copyFrom(line: BufferLine): void {\n    if (this.length !== line.length) {\n      this._data = new Uint32Array(line._data);\n    } else {\n      // use high speed copy if lengths are equal\n      this._data.set(line._data);\n    }\n    this.length = line.length;\n    this._combined = {};\n    for (const el in line._combined) {\n      this._combined[el] = line._combined[el];\n    }\n    this._extendedAttrs = {};\n    for (const el in line._extendedAttrs) {\n      this._extendedAttrs[el] = line._extendedAttrs[el];\n    }\n    this.isWrapped = line.isWrapped;\n  }\n\n  /** create a new clone */\n  public clone(): IBufferLine {\n    const newLine = new BufferLine(0);\n    newLine._data = new Uint32Array(this._data);\n    newLine.length = this.length;\n    for (const el in this._combined) {\n      newLine._combined[el] = this._combined[el];\n    }\n    for (const el in this._extendedAttrs) {\n      newLine._extendedAttrs[el] = this._extendedAttrs[el];\n    }\n    newLine.isWrapped = this.isWrapped;\n    return newLine;\n  }\n\n  public getTrimmedLength(): number {\n    for (let i = this.length - 1; i >= 0; --i) {\n      if ((this._data[i * CELL_SIZE + Cell.CONTENT] & Content.HAS_CONTENT_MASK)) {\n        return i + (this._data[i * CELL_SIZE + Cell.CONTENT] >> Content.WIDTH_SHIFT);\n      }\n    }\n    return 0;\n  }\n\n  public copyCellsFrom(src: BufferLine, srcCol: number, destCol: number, length: number, applyInReverse: boolean): void {\n    const srcData = src._data;\n    if (applyInReverse) {\n      for (let cell = length - 1; cell >= 0; cell--) {\n        for (let i = 0; i < CELL_SIZE; i++) {\n          this._data[(destCol + cell) * CELL_SIZE + i] = srcData[(srcCol + cell) * CELL_SIZE + i];\n        }\n      }\n    } else {\n      for (let cell = 0; cell < length; cell++) {\n        for (let i = 0; i < CELL_SIZE; i++) {\n          this._data[(destCol + cell) * CELL_SIZE + i] = srcData[(srcCol + cell) * CELL_SIZE + i];\n        }\n      }\n    }\n\n    // Move any combined data over as needed, FIXME: repeat for extended attrs\n    const srcCombinedKeys = Object.keys(src._combined);\n    for (let i = 0; i < srcCombinedKeys.length; i++) {\n      const key = parseInt(srcCombinedKeys[i], 10);\n      if (key >= srcCol) {\n        this._combined[key - srcCol + destCol] = src._combined[key];\n      }\n    }\n  }\n\n  public translateToString(trimRight: boolean = false, startCol: number = 0, endCol: number = this.length): string {\n    if (trimRight) {\n      endCol = Math.min(endCol, this.getTrimmedLength());\n    }\n    let result = '';\n    while (startCol < endCol) {\n      const content = this._data[startCol * CELL_SIZE + Cell.CONTENT];\n      const cp = content & Content.CODEPOINT_MASK;\n      result += (content & Content.IS_COMBINED_MASK) ? this._combined[startCol] : (cp) ? stringFromCodePoint(cp) : WHITESPACE_CELL_CHAR;\n      startCol += (content >> Content.WIDTH_SHIFT) || 1; // always advance by 1\n    }\n    return result;\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { BufferLine } from 'common/buffer/BufferLine';\nimport { CircularList } from 'common/CircularList';\nimport { IBufferLine, ICellData } from 'common/Types';\n\nexport interface INewLayoutResult {\n  layout: number[];\n  countRemoved: number;\n}\n\n/**\n * Evaluates and returns indexes to be removed after a reflow larger occurs. Lines will be removed\n * when a wrapped line unwraps.\n * @param lines The buffer lines.\n * @param newCols The columns after resize.\n */\nexport function reflowLargerGetLinesToRemove(lines: CircularList<IBufferLine>, oldCols: number, newCols: number, bufferAbsoluteY: number, nullCell: ICellData): number[] {\n  // Gather all BufferLines that need to be removed from the Buffer here so that they can be\n  // batched up and only committed once\n  const toRemove: number[] = [];\n\n  for (let y = 0; y < lines.length - 1; y++) {\n    // Check if this row is wrapped\n    let i = y;\n    let nextLine = lines.get(++i) as BufferLine;\n    if (!nextLine.isWrapped) {\n      continue;\n    }\n\n    // Check how many lines it's wrapped for\n    const wrappedLines: BufferLine[] = [lines.get(y) as BufferLine];\n    while (i < lines.length && nextLine.isWrapped) {\n      wrappedLines.push(nextLine);\n      nextLine = lines.get(++i) as BufferLine;\n    }\n\n    // If these lines contain the cursor don't touch them, the program will handle fixing up wrapped\n    // lines with the cursor\n    if (bufferAbsoluteY >= y && bufferAbsoluteY < i) {\n      y += wrappedLines.length - 1;\n      continue;\n    }\n\n    // Copy buffer data to new locations\n    let destLineIndex = 0;\n    let destCol = getWrappedLineTrimmedLength(wrappedLines, destLineIndex, oldCols);\n    let srcLineIndex = 1;\n    let srcCol = 0;\n    while (srcLineIndex < wrappedLines.length) {\n      const srcTrimmedTineLength = getWrappedLineTrimmedLength(wrappedLines, srcLineIndex, oldCols);\n      const srcRemainingCells = srcTrimmedTineLength - srcCol;\n      const destRemainingCells = newCols - destCol;\n      const cellsToCopy = Math.min(srcRemainingCells, destRemainingCells);\n\n      wrappedLines[destLineIndex].copyCellsFrom(wrappedLines[srcLineIndex], srcCol, destCol, cellsToCopy, false);\n\n      destCol += cellsToCopy;\n      if (destCol === newCols) {\n        destLineIndex++;\n        destCol = 0;\n      }\n      srcCol += cellsToCopy;\n      if (srcCol === srcTrimmedTineLength) {\n        srcLineIndex++;\n        srcCol = 0;\n      }\n\n      // Make sure the last cell isn't wide, if it is copy it to the current dest\n      if (destCol === 0 && destLineIndex !== 0) {\n        if (wrappedLines[destLineIndex - 1].getWidth(newCols - 1) === 2) {\n          wrappedLines[destLineIndex].copyCellsFrom(wrappedLines[destLineIndex - 1], newCols - 1, destCol++, 1, false);\n          // Null out the end of the last row\n          wrappedLines[destLineIndex - 1].setCell(newCols - 1, nullCell);\n        }\n      }\n    }\n\n    // Clear out remaining cells or fragments could remain;\n    wrappedLines[destLineIndex].replaceCells(destCol, newCols, nullCell);\n\n    // Work backwards and remove any rows at the end that only contain null cells\n    let countToRemove = 0;\n    for (let i = wrappedLines.length - 1; i > 0; i--) {\n      if (i > destLineIndex || wrappedLines[i].getTrimmedLength() === 0) {\n        countToRemove++;\n      } else {\n        break;\n      }\n    }\n\n    if (countToRemove > 0) {\n      toRemove.push(y + wrappedLines.length - countToRemove); // index\n      toRemove.push(countToRemove);\n    }\n\n    y += wrappedLines.length - 1;\n  }\n  return toRemove;\n}\n\n/**\n * Creates and return the new layout for lines given an array of indexes to be removed.\n * @param lines The buffer lines.\n * @param toRemove The indexes to remove.\n */\nexport function reflowLargerCreateNewLayout(lines: CircularList<IBufferLine>, toRemove: number[]): INewLayoutResult {\n  const layout: number[] = [];\n  // First iterate through the list and get the actual indexes to use for rows\n  let nextToRemoveIndex = 0;\n  let nextToRemoveStart = toRemove[nextToRemoveIndex];\n  let countRemovedSoFar = 0;\n  for (let i = 0; i < lines.length; i++) {\n    if (nextToRemoveStart === i) {\n      const countToRemove = toRemove[++nextToRemoveIndex];\n\n      // Tell markers that there was a deletion\n      lines.onDeleteEmitter.fire({\n        index: i - countRemovedSoFar,\n        amount: countToRemove\n      });\n\n      i += countToRemove - 1;\n      countRemovedSoFar += countToRemove;\n      nextToRemoveStart = toRemove[++nextToRemoveIndex];\n    } else {\n      layout.push(i);\n    }\n  }\n  return {\n    layout,\n    countRemoved: countRemovedSoFar\n  };\n}\n\n/**\n * Applies a new layout to the buffer. This essentially does the same as many splice calls but it's\n * done all at once in a single iteration through the list since splice is very expensive.\n * @param lines The buffer lines.\n * @param newLayout The new layout to apply.\n */\nexport function reflowLargerApplyNewLayout(lines: CircularList<IBufferLine>, newLayout: number[]): void {\n  // Record original lines so they don't get overridden when we rearrange the list\n  const newLayoutLines: BufferLine[] = [];\n  for (let i = 0; i < newLayout.length; i++) {\n    newLayoutLines.push(lines.get(newLayout[i]) as BufferLine);\n  }\n\n  // Rearrange the list\n  for (let i = 0; i < newLayoutLines.length; i++) {\n    lines.set(i, newLayoutLines[i]);\n  }\n  lines.length = newLayout.length;\n}\n\n/**\n * Gets the new line lengths for a given wrapped line. The purpose of this function it to pre-\n * compute the wrapping points since wide characters may need to be wrapped onto the following line.\n * This function will return an array of numbers of where each line wraps to, the resulting array\n * will only contain the values `newCols` (when the line does not end with a wide character) and\n * `newCols - 1` (when the line does end with a wide character), except for the last value which\n * will contain the remaining items to fill the line.\n *\n * Calling this with a `newCols` value of `1` will lock up.\n *\n * @param wrappedLines The wrapped lines to evaluate.\n * @param oldCols The columns before resize.\n * @param newCols The columns after resize.\n */\nexport function reflowSmallerGetNewLineLengths(wrappedLines: BufferLine[], oldCols: number, newCols: number): number[] {\n  const newLineLengths: number[] = [];\n  const cellsNeeded = wrappedLines.map((l, i) => getWrappedLineTrimmedLength(wrappedLines, i, oldCols)).reduce((p, c) => p + c);\n\n  // Use srcCol and srcLine to find the new wrapping point, use that to get the cellsAvailable and\n  // linesNeeded\n  let srcCol = 0;\n  let srcLine = 0;\n  let cellsAvailable = 0;\n  while (cellsAvailable < cellsNeeded) {\n    if (cellsNeeded - cellsAvailable < newCols) {\n      // Add the final line and exit the loop\n      newLineLengths.push(cellsNeeded - cellsAvailable);\n      break;\n    }\n    srcCol += newCols;\n    const oldTrimmedLength = getWrappedLineTrimmedLength(wrappedLines, srcLine, oldCols);\n    if (srcCol > oldTrimmedLength) {\n      srcCol -= oldTrimmedLength;\n      srcLine++;\n    }\n    const endsWithWide = wrappedLines[srcLine].getWidth(srcCol - 1) === 2;\n    if (endsWithWide) {\n      srcCol--;\n    }\n    const lineLength = endsWithWide ? newCols - 1 : newCols;\n    newLineLengths.push(lineLength);\n    cellsAvailable += lineLength;\n  }\n\n  return newLineLengths;\n}\n\nexport function getWrappedLineTrimmedLength(lines: BufferLine[], i: number, cols: number): number {\n  // If this is the last row in the wrapped line, get the actual trimmed length\n  if (i === lines.length - 1) {\n    return lines[i].getTrimmedLength();\n  }\n  // Detect whether the following line starts with a wide character and the end of the current line\n  // is null, if so then we can be pretty sure the null character should be excluded from the line\n  // length]\n  const endsInNull = !(lines[i].hasContent(cols - 1)) && lines[i].getWidth(cols - 1) === 1;\n  const followingLineStartsWithWide = lines[i + 1].getWidth(0) === 2;\n  if (endsInNull && followingLineStartsWithWide) {\n    return cols - 1;\n  }\n  return cols;\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBuffer, IBufferSet } from 'common/buffer/Types';\nimport { IAttributeData } from 'common/Types';\nimport { Buffer } from 'common/buffer/Buffer';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { IOptionsService, IBufferService } from 'common/services/Services';\nimport { Disposable } from 'common/Lifecycle';\n\n/**\n * The BufferSet represents the set of two buffers used by xterm terminals (normal and alt) and\n * provides also utilities for working with them.\n */\nexport class BufferSet extends Disposable implements IBufferSet {\n  private _normal!: Buffer;\n  private _alt!: Buffer;\n  private _activeBuffer!: Buffer;\n\n  private _onBufferActivate = this.register(new EventEmitter<{activeBuffer: IBuffer, inactiveBuffer: IBuffer}>());\n  public get onBufferActivate(): IEvent<{activeBuffer: IBuffer, inactiveBuffer: IBuffer}> { return this._onBufferActivate.event; }\n\n  /**\n   * Create a new BufferSet for the given terminal.\n   * @param _terminal - The terminal the BufferSet will belong to\n   */\n  constructor(\n    private readonly _optionsService: IOptionsService,\n    private readonly _bufferService: IBufferService\n  ) {\n    super();\n    this.reset();\n  }\n\n  public reset(): void {\n    this._normal = new Buffer(true, this._optionsService, this._bufferService);\n    this._normal.fillViewportRows();\n\n    // The alt buffer should never have scrollback.\n    // See http://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h2-The-Alternate-Screen-Buffer\n    this._alt = new Buffer(false, this._optionsService, this._bufferService);\n    this._activeBuffer = this._normal;\n    this._onBufferActivate.fire({\n      activeBuffer: this._normal,\n      inactiveBuffer: this._alt\n    });\n\n    this.setupTabStops();\n  }\n\n  /**\n   * Returns the alt Buffer of the BufferSet\n   */\n  public get alt(): Buffer {\n    return this._alt;\n  }\n\n  /**\n   * Returns the normal Buffer of the BufferSet\n   */\n  public get active(): Buffer {\n    return this._activeBuffer;\n  }\n\n  /**\n   * Returns the currently active Buffer of the BufferSet\n   */\n  public get normal(): Buffer {\n    return this._normal;\n  }\n\n  /**\n   * Sets the normal Buffer of the BufferSet as its currently active Buffer\n   */\n  public activateNormalBuffer(): void {\n    if (this._activeBuffer === this._normal) {\n      return;\n    }\n    this._normal.x = this._alt.x;\n    this._normal.y = this._alt.y;\n    // The alt buffer should always be cleared when we switch to the normal\n    // buffer. This frees up memory since the alt buffer should always be new\n    // when activated.\n    this._alt.clear();\n    this._activeBuffer = this._normal;\n    this._onBufferActivate.fire({\n      activeBuffer: this._normal,\n      inactiveBuffer: this._alt\n    });\n  }\n\n  /**\n   * Sets the alt Buffer of the BufferSet as its currently active Buffer\n   */\n  public activateAltBuffer(fillAttr?: IAttributeData): void {\n    if (this._activeBuffer === this._alt) {\n      return;\n    }\n    // Since the alt buffer is always cleared when the normal buffer is\n    // activated, we want to fill it when switching to it.\n    this._alt.fillViewportRows(fillAttr);\n    this._alt.x = this._normal.x;\n    this._alt.y = this._normal.y;\n    this._activeBuffer = this._alt;\n    this._onBufferActivate.fire({\n      activeBuffer: this._alt,\n      inactiveBuffer: this._normal\n    });\n  }\n\n  /**\n   * Resizes both normal and alt buffers, adjusting their data accordingly.\n   * @param newCols The new number of columns.\n   * @param newRows The new number of rows.\n   */\n  public resize(newCols: number, newRows: number): void {\n    this._normal.resize(newCols, newRows);\n    this._alt.resize(newCols, newRows);\n  }\n\n  /**\n   * Setup the tab stops.\n   * @param i The index to start setting up tab stops from.\n   */\n  public setupTabStops(i?: number): void {\n    this._normal.setupTabStops(i);\n    this._alt.setupTabStops(i);\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CharData, ICellData, IExtendedAttrs } from 'common/Types';\nimport { stringFromCodePoint } from 'common/input/TextDecoder';\nimport { CHAR_DATA_CHAR_INDEX, CHAR_DATA_WIDTH_INDEX, CHAR_DATA_ATTR_INDEX, Content } from 'common/buffer/Constants';\nimport { AttributeData, ExtendedAttrs } from 'common/buffer/AttributeData';\n\n/**\n * CellData - represents a single Cell in the terminal buffer.\n */\nexport class CellData extends AttributeData implements ICellData {\n  /** Helper to create CellData from CharData. */\n  public static fromCharData(value: CharData): CellData {\n    const obj = new CellData();\n    obj.setFromCharData(value);\n    return obj;\n  }\n  /** Primitives from terminal buffer. */\n  public content = 0;\n  public fg = 0;\n  public bg = 0;\n  public extended: IExtendedAttrs = new ExtendedAttrs();\n  public combinedData = '';\n  /** Whether cell contains a combined string. */\n  public isCombined(): number {\n    return this.content & Content.IS_COMBINED_MASK;\n  }\n  /** Width of the cell. */\n  public getWidth(): number {\n    return this.content >> Content.WIDTH_SHIFT;\n  }\n  /** JS string of the content. */\n  public getChars(): string {\n    if (this.content & Content.IS_COMBINED_MASK) {\n      return this.combinedData;\n    }\n    if (this.content & Content.CODEPOINT_MASK) {\n      return stringFromCodePoint(this.content & Content.CODEPOINT_MASK);\n    }\n    return '';\n  }\n  /**\n   * Codepoint of cell\n   * Note this returns the UTF32 codepoint of single chars,\n   * if content is a combined string it returns the codepoint\n   * of the last char in string to be in line with code in CharData.\n   * */\n  public getCode(): number {\n    return (this.isCombined())\n      ? this.combinedData.charCodeAt(this.combinedData.length - 1)\n      : this.content & Content.CODEPOINT_MASK;\n  }\n  /** Set data from CharData */\n  public setFromCharData(value: CharData): void {\n    this.fg = value[CHAR_DATA_ATTR_INDEX];\n    this.bg = 0;\n    let combined = false;\n    // surrogates and combined strings need special treatment\n    if (value[CHAR_DATA_CHAR_INDEX].length > 2) {\n      combined = true;\n    }\n    else if (value[CHAR_DATA_CHAR_INDEX].length === 2) {\n      const code = value[CHAR_DATA_CHAR_INDEX].charCodeAt(0);\n      // if the 2-char string is a surrogate create single codepoint\n      // everything else is combined\n      if (0xD800 <= code && code <= 0xDBFF) {\n        const second = value[CHAR_DATA_CHAR_INDEX].charCodeAt(1);\n        if (0xDC00 <= second && second <= 0xDFFF) {\n          this.content = ((code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000) | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n        }\n        else {\n          combined = true;\n        }\n      }\n      else {\n        combined = true;\n      }\n    }\n    else {\n      this.content = value[CHAR_DATA_CHAR_INDEX].charCodeAt(0) | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    }\n    if (combined) {\n      this.combinedData = value[CHAR_DATA_CHAR_INDEX];\n      this.content = Content.IS_COMBINED_MASK | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    }\n  }\n  /** Get data as CharData. */\n  public getAsCharData(): CharData {\n    return [this.fg, this.getChars(), this.getWidth(), this.getCode()];\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport const DEFAULT_COLOR = 256;\nexport const DEFAULT_ATTR = (0 << 18) | (DEFAULT_COLOR << 9) | (256 << 0);\n\nexport const CHAR_DATA_ATTR_INDEX = 0;\nexport const CHAR_DATA_CHAR_INDEX = 1;\nexport const CHAR_DATA_WIDTH_INDEX = 2;\nexport const CHAR_DATA_CODE_INDEX = 3;\n\n/**\n * Null cell - a real empty cell (containing nothing).\n * Note that code should always be 0 for a null cell as\n * several test condition of the buffer line rely on this.\n */\nexport const NULL_CELL_CHAR = '';\nexport const NULL_CELL_WIDTH = 1;\nexport const NULL_CELL_CODE = 0;\n\n/**\n * Whitespace cell.\n * This is meant as a replacement for empty cells when needed\n * during rendering lines to preserve correct aligment.\n */\nexport const WHITESPACE_CELL_CHAR = ' ';\nexport const WHITESPACE_CELL_WIDTH = 1;\nexport const WHITESPACE_CELL_CODE = 32;\n\n/**\n * Bitmasks for accessing data in `content`.\n */\nexport const enum Content {\n  /**\n   * bit 1..21    codepoint, max allowed in UTF32 is 0x10FFFF (21 bits taken)\n   *              read:   `codepoint = content & Content.codepointMask;`\n   *              write:  `content |= codepoint & Content.codepointMask;`\n   *                      shortcut if precondition `codepoint <= 0x10FFFF` is met:\n   *                      `content |= codepoint;`\n   */\n  CODEPOINT_MASK = 0x1FFFFF,\n\n  /**\n   * bit 22       flag indication whether a cell contains combined content\n   *              read:   `isCombined = content & Content.isCombined;`\n   *              set:    `content |= Content.isCombined;`\n   *              clear:  `content &= ~Content.isCombined;`\n   */\n  IS_COMBINED_MASK = 0x200000,  // 1 << 21\n\n  /**\n   * bit 1..22    mask to check whether a cell contains any string data\n   *              we need to check for codepoint and isCombined bits to see\n   *              whether a cell contains anything\n   *              read:   `isEmpty = !(content & Content.hasContent)`\n   */\n  HAS_CONTENT_MASK = 0x3FFFFF,\n\n  /**\n   * bit 23..24   wcwidth value of cell, takes 2 bits (ranges from 0..2)\n   *              read:   `width = (content & Content.widthMask) >> Content.widthShift;`\n   *                      `hasWidth = content & Content.widthMask;`\n   *                      as long as wcwidth is highest value in `content`:\n   *                      `width = content >> Content.widthShift;`\n   *              write:  `content |= (width << Content.widthShift) & Content.widthMask;`\n   *                      shortcut if precondition `0 <= width <= 3` is met:\n   *                      `content |= width << Content.widthShift;`\n   */\n  WIDTH_MASK = 0xC00000,   // 3 << 22\n  WIDTH_SHIFT = 22\n}\n\nexport const enum Attributes {\n  /**\n   * bit 1..8     blue in RGB, color in P256 and P16\n   */\n  BLUE_MASK = 0xFF,\n  BLUE_SHIFT = 0,\n  PCOLOR_MASK = 0xFF,\n  PCOLOR_SHIFT = 0,\n\n  /**\n   * bit 9..16    green in RGB\n   */\n  GREEN_MASK = 0xFF00,\n  GREEN_SHIFT = 8,\n\n  /**\n   * bit 17..24   red in RGB\n   */\n  RED_MASK = 0xFF0000,\n  RED_SHIFT = 16,\n\n  /**\n   * bit 25..26   color mode: DEFAULT (0) | P16 (1) | P256 (2) | RGB (3)\n   */\n  CM_MASK = 0x3000000,\n  CM_DEFAULT = 0,\n  CM_P16 = 0x1000000,\n  CM_P256 = 0x2000000,\n  CM_RGB = 0x3000000,\n\n  /**\n   * bit 1..24  RGB room\n   */\n  RGB_MASK = 0xFFFFFF\n}\n\nexport const enum FgFlags {\n  /**\n   * bit 27..32\n   */\n  INVERSE = 0x4000000,\n  BOLD = 0x8000000,\n  UNDERLINE = 0x10000000,\n  BLINK = 0x20000000,\n  INVISIBLE = 0x40000000,\n  STRIKETHROUGH = 0x80000000,\n}\n\nexport const enum BgFlags {\n  /**\n   * bit 27..32 (upper 3 unused)\n   */\n  ITALIC = 0x4000000,\n  DIM = 0x8000000,\n  HAS_EXTENDED = 0x10000000\n}\n\nexport const enum UnderlineStyle {\n  NONE = 0,\n  SINGLE = 1,\n  DOUBLE = 2,\n  CURLY = 3,\n  DOTTED = 4,\n  DASHED = 5\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { Disposable } from 'common/Lifecycle';\nimport { IMarker } from 'common/Types';\n\nexport class Marker extends Disposable implements IMarker {\n  private static _nextId = 1;\n\n  private _id: number = Marker._nextId++;\n  public isDisposed: boolean = false;\n\n  public get id(): number { return this._id; }\n\n  private _onDispose = new EventEmitter<void>();\n  public get onDispose(): IEvent<void> { return this._onDispose.event; }\n\n  constructor(\n    public line: number\n  ) {\n    super();\n  }\n\n  public dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n    this.isDisposed = true;\n    this.line = -1;\n    // Emit before super.dispose such that dispose listeners get a change to react\n    this._onDispose.fire();\n    super.dispose();\n  }\n}\n","/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICharset } from 'common/Types';\n\n/**\n * The character sets supported by the terminal. These enable several languages\n * to be represented within the terminal with only 8-bit encoding. See ISO 2022\n * for a discussion on character sets. Only VT100 character sets are supported.\n */\nexport const CHARSETS: { [key: string]: ICharset | undefined } = {};\n\n/**\n * The default character set, US.\n */\nexport const DEFAULT_CHARSET: ICharset | undefined = CHARSETS['B'];\n\n/**\n * DEC Special Character and Line Drawing Set.\n * Reference: http://vt100.net/docs/vt102-ug/table5-13.html\n * A lot of curses apps use this if they see TERM=xterm.\n * testing: echo -e '\\e(0a\\e(B'\n * The xterm output sometimes seems to conflict with the\n * reference above. xterm seems in line with the reference\n * when running vttest however.\n * The table below now uses xterm's output from vttest.\n */\nCHARSETS['0'] = {\n  '`': '\\u25c6', // '◆'\n  'a': '\\u2592', // '▒'\n  'b': '\\u2409', // '␉' (HT)\n  'c': '\\u240c', // '␌' (FF)\n  'd': '\\u240d', // '␍' (CR)\n  'e': '\\u240a', // '␊' (LF)\n  'f': '\\u00b0', // '°'\n  'g': '\\u00b1', // '±'\n  'h': '\\u2424', // '␤' (NL)\n  'i': '\\u240b', // '␋' (VT)\n  'j': '\\u2518', // '┘'\n  'k': '\\u2510', // '┐'\n  'l': '\\u250c', // '┌'\n  'm': '\\u2514', // '└'\n  'n': '\\u253c', // '┼'\n  'o': '\\u23ba', // '⎺'\n  'p': '\\u23bb', // '⎻'\n  'q': '\\u2500', // '─'\n  'r': '\\u23bc', // '⎼'\n  's': '\\u23bd', // '⎽'\n  't': '\\u251c', // '├'\n  'u': '\\u2524', // '┤'\n  'v': '\\u2534', // '┴'\n  'w': '\\u252c', // '┬'\n  'x': '\\u2502', // '│'\n  'y': '\\u2264', // '≤'\n  'z': '\\u2265', // '≥'\n  '{': '\\u03c0', // 'π'\n  '|': '\\u2260', // '≠'\n  '}': '\\u00a3', // '£'\n  '~': '\\u00b7'  // '·'\n};\n\n/**\n * British character set\n * ESC (A\n * Reference: http://vt100.net/docs/vt220-rm/table2-5.html\n */\nCHARSETS['A'] = {\n  '#': '£'\n};\n\n/**\n * United States character set\n * ESC (B\n */\nCHARSETS['B'] = undefined;\n\n/**\n * Dutch character set\n * ESC (4\n * Reference: http://vt100.net/docs/vt220-rm/table2-6.html\n */\nCHARSETS['4'] = {\n  '#': '£',\n  '@': '¾',\n  '[': 'ij',\n  '\\\\': '½',\n  ']': '|',\n  '{': '¨',\n  '|': 'f',\n  '}': '¼',\n  '~': '´'\n};\n\n/**\n * Finnish character set\n * ESC (C or ESC (5\n * Reference: http://vt100.net/docs/vt220-rm/table2-7.html\n */\nCHARSETS['C'] =\nCHARSETS['5'] = {\n  '[': 'Ä',\n  '\\\\': 'Ö',\n  ']': 'Å',\n  '^': 'Ü',\n  '`': 'é',\n  '{': 'ä',\n  '|': 'ö',\n  '}': 'å',\n  '~': 'ü'\n};\n\n/**\n * French character set\n * ESC (R\n * Reference: http://vt100.net/docs/vt220-rm/table2-8.html\n */\nCHARSETS['R'] = {\n  '#': '£',\n  '@': 'à',\n  '[': '°',\n  '\\\\': 'ç',\n  ']': '§',\n  '{': 'é',\n  '|': 'ù',\n  '}': 'è',\n  '~': '¨'\n};\n\n/**\n * French Canadian character set\n * ESC (Q\n * Reference: http://vt100.net/docs/vt220-rm/table2-9.html\n */\nCHARSETS['Q'] = {\n  '@': 'à',\n  '[': 'â',\n  '\\\\': 'ç',\n  ']': 'ê',\n  '^': 'î',\n  '`': 'ô',\n  '{': 'é',\n  '|': 'ù',\n  '}': 'è',\n  '~': 'û'\n};\n\n/**\n * German character set\n * ESC (K\n * Reference: http://vt100.net/docs/vt220-rm/table2-10.html\n */\nCHARSETS['K'] = {\n  '@': '§',\n  '[': 'Ä',\n  '\\\\': 'Ö',\n  ']': 'Ü',\n  '{': 'ä',\n  '|': 'ö',\n  '}': 'ü',\n  '~': 'ß'\n};\n\n/**\n * Italian character set\n * ESC (Y\n * Reference: http://vt100.net/docs/vt220-rm/table2-11.html\n */\nCHARSETS['Y'] = {\n  '#': '£',\n  '@': '§',\n  '[': '°',\n  '\\\\': 'ç',\n  ']': 'é',\n  '`': 'ù',\n  '{': 'à',\n  '|': 'ò',\n  '}': 'è',\n  '~': 'ì'\n};\n\n/**\n * Norwegian/Danish character set\n * ESC (E or ESC (6\n * Reference: http://vt100.net/docs/vt220-rm/table2-12.html\n */\nCHARSETS['E'] =\nCHARSETS['6'] = {\n  '@': 'Ä',\n  '[': 'Æ',\n  '\\\\': 'Ø',\n  ']': 'Å',\n  '^': 'Ü',\n  '`': 'ä',\n  '{': 'æ',\n  '|': 'ø',\n  '}': 'å',\n  '~': 'ü'\n};\n\n/**\n * Spanish character set\n * ESC (Z\n * Reference: http://vt100.net/docs/vt220-rm/table2-13.html\n */\nCHARSETS['Z'] = {\n  '#': '£',\n  '@': '§',\n  '[': '¡',\n  '\\\\': 'Ñ',\n  ']': '¿',\n  '{': '°',\n  '|': 'ñ',\n  '}': 'ç'\n};\n\n/**\n * Swedish character set\n * ESC (H or ESC (7\n * Reference: http://vt100.net/docs/vt220-rm/table2-14.html\n */\nCHARSETS['H'] =\nCHARSETS['7'] = {\n  '@': 'É',\n  '[': 'Ä',\n  '\\\\': 'Ö',\n  ']': 'Å',\n  '^': 'Ü',\n  '`': 'é',\n  '{': 'ä',\n  '|': 'ö',\n  '}': 'å',\n  '~': 'ü'\n};\n\n/**\n * Swiss character set\n * ESC (=\n * Reference: http://vt100.net/docs/vt220-rm/table2-15.html\n */\nCHARSETS['='] = {\n  '#': 'ù',\n  '@': 'à',\n  '[': 'é',\n  '\\\\': 'ç',\n  ']': 'ê',\n  '^': 'î',\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  '_': 'è',\n  '`': 'ô',\n  '{': 'ä',\n  '|': 'ö',\n  '}': 'ü',\n  '~': 'û'\n};\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/**\n * C0 control codes\n * See = https://en.wikipedia.org/wiki/C0_and_C1_control_codes\n */\nexport namespace C0 {\n  /** Null (Caret = ^@, C = \\0) */\n  export const NUL = '\\x00';\n  /** Start of Heading (Caret = ^A) */\n  export const SOH = '\\x01';\n  /** Start of Text (Caret = ^B) */\n  export const STX = '\\x02';\n  /** End of Text (Caret = ^C) */\n  export const ETX = '\\x03';\n  /** End of Transmission (Caret = ^D) */\n  export const EOT = '\\x04';\n  /** Enquiry (Caret = ^E) */\n  export const ENQ = '\\x05';\n  /** Acknowledge (Caret = ^F) */\n  export const ACK = '\\x06';\n  /** Bell (Caret = ^G, C = \\a) */\n  export const BEL = '\\x07';\n  /** Backspace (Caret = ^H, C = \\b) */\n  export const BS  = '\\x08';\n  /** Character Tabulation, Horizontal Tabulation (Caret = ^I, C = \\t) */\n  export const HT  = '\\x09';\n  /** Line Feed (Caret = ^J, C = \\n) */\n  export const LF  = '\\x0a';\n  /** Line Tabulation, Vertical Tabulation (Caret = ^K, C = \\v) */\n  export const VT  = '\\x0b';\n  /** Form Feed (Caret = ^L, C = \\f) */\n  export const FF  = '\\x0c';\n  /** Carriage Return (Caret = ^M, C = \\r) */\n  export const CR  = '\\x0d';\n  /** Shift Out (Caret = ^N) */\n  export const SO  = '\\x0e';\n  /** Shift In (Caret = ^O) */\n  export const SI  = '\\x0f';\n  /** Data Link Escape (Caret = ^P) */\n  export const DLE = '\\x10';\n  /** Device Control One (XON) (Caret = ^Q) */\n  export const DC1 = '\\x11';\n  /** Device Control Two (Caret = ^R) */\n  export const DC2 = '\\x12';\n  /** Device Control Three (XOFF) (Caret = ^S) */\n  export const DC3 = '\\x13';\n  /** Device Control Four (Caret = ^T) */\n  export const DC4 = '\\x14';\n  /** Negative Acknowledge (Caret = ^U) */\n  export const NAK = '\\x15';\n  /** Synchronous Idle (Caret = ^V) */\n  export const SYN = '\\x16';\n  /** End of Transmission Block (Caret = ^W) */\n  export const ETB = '\\x17';\n  /** Cancel (Caret = ^X) */\n  export const CAN = '\\x18';\n  /** End of Medium (Caret = ^Y) */\n  export const EM  = '\\x19';\n  /** Substitute (Caret = ^Z) */\n  export const SUB = '\\x1a';\n  /** Escape (Caret = ^[, C = \\e) */\n  export const ESC = '\\x1b';\n  /** File Separator (Caret = ^\\) */\n  export const FS  = '\\x1c';\n  /** Group Separator (Caret = ^]) */\n  export const GS  = '\\x1d';\n  /** Record Separator (Caret = ^^) */\n  export const RS  = '\\x1e';\n  /** Unit Separator (Caret = ^_) */\n  export const US  = '\\x1f';\n  /** Space */\n  export const SP  = '\\x20';\n  /** Delete (Caret = ^?) */\n  export const DEL = '\\x7f';\n}\n\n/**\n * C1 control codes\n * See = https://en.wikipedia.org/wiki/C0_and_C1_control_codes\n */\nexport namespace C1 {\n  /** padding character */\n  export const PAD = '\\x80';\n  /** High Octet Preset */\n  export const HOP = '\\x81';\n  /** Break Permitted Here */\n  export const BPH = '\\x82';\n  /** No Break Here */\n  export const NBH = '\\x83';\n  /** Index */\n  export const IND = '\\x84';\n  /** Next Line */\n  export const NEL = '\\x85';\n  /** Start of Selected Area */\n  export const SSA = '\\x86';\n  /** End of Selected Area */\n  export const ESA = '\\x87';\n  /** Horizontal Tabulation Set */\n  export const HTS = '\\x88';\n  /** Horizontal Tabulation With Justification */\n  export const HTJ = '\\x89';\n  /** Vertical Tabulation Set */\n  export const VTS = '\\x8a';\n  /** Partial Line Down */\n  export const PLD = '\\x8b';\n  /** Partial Line Up */\n  export const PLU = '\\x8c';\n  /** Reverse Index */\n  export const RI = '\\x8d';\n  /** Single-Shift 2 */\n  export const SS2 = '\\x8e';\n  /** Single-Shift 3 */\n  export const SS3 = '\\x8f';\n  /** Device Control String */\n  export const DCS = '\\x90';\n  /** Private Use 1 */\n  export const PU1 = '\\x91';\n  /** Private Use 2 */\n  export const PU2 = '\\x92';\n  /** Set Transmit State */\n  export const STS = '\\x93';\n  /** Destructive backspace, intended to eliminate ambiguity about meaning of BS. */\n  export const CCH = '\\x94';\n  /** Message Waiting */\n  export const MW = '\\x95';\n  /** Start of Protected Area */\n  export const SPA = '\\x96';\n  /** End of Protected Area */\n  export const EPA = '\\x97';\n  /** Start of String */\n  export const SOS = '\\x98';\n  /** Single Graphic Character Introducer */\n  export const SGCI = '\\x99';\n  /** Single Character Introducer */\n  export const SCI = '\\x9a';\n  /** Control Sequence Introducer */\n  export const CSI = '\\x9b';\n  /** String Terminator */\n  export const ST = '\\x9c';\n  /** Operating System Command */\n  export const OSC = '\\x9d';\n  /** Privacy Message */\n  export const PM = '\\x9e';\n  /** Application Program Command */\n  export const APC = '\\x9f';\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/**\n * Polyfill - Convert UTF32 codepoint into JS string.\n * Note: The built-in String.fromCodePoint happens to be much slower\n *       due to additional sanity checks. We can avoid them since\n *       we always operate on legal UTF32 (granted by the input decoders)\n *       and use this faster version instead.\n */\nexport function stringFromCodePoint(codePoint: number): string {\n  if (codePoint > 0xFFFF) {\n    codePoint -= 0x10000;\n    return String.fromCharCode((codePoint >> 10) + 0xD800) + String.fromCharCode((codePoint % 0x400) + 0xDC00);\n  }\n  return String.fromCharCode(codePoint);\n}\n\n/**\n * Convert UTF32 char codes into JS string.\n * Basically the same as `stringFromCodePoint` but for multiple codepoints\n * in a loop (which is a lot faster).\n */\nexport function utf32ToString(data: Uint32Array, start: number = 0, end: number = data.length): string {\n  let result = '';\n  for (let i = start; i < end; ++i) {\n    let codepoint = data[i];\n    if (codepoint > 0xFFFF) {\n      // JS strings are encoded as UTF16, thus a non BMP codepoint gets converted into a surrogate pair\n      // conversion rules:\n      //  - subtract 0x10000 from code point, leaving a 20 bit number\n      //  - add high 10 bits to 0xD800  --> first surrogate\n      //  - add low 10 bits to 0xDC00   --> second surrogate\n      codepoint -= 0x10000;\n      result += String.fromCharCode((codepoint >> 10) + 0xD800) + String.fromCharCode((codepoint % 0x400) + 0xDC00);\n    } else {\n      result += String.fromCharCode(codepoint);\n    }\n  }\n  return result;\n}\n\n/**\n * StringToUtf32 - decodes UTF16 sequences into UTF32 codepoints.\n * To keep the decoder in line with JS strings it handles single surrogates as UCS2.\n */\nexport class StringToUtf32 {\n  private _interim: number = 0;\n\n  /**\n   * Clears interim and resets decoder to clean state.\n   */\n  public clear(): void {\n    this._interim = 0;\n  }\n\n  /**\n   * Decode JS string to UTF32 codepoints.\n   * The methods assumes stream input and will store partly transmitted\n   * surrogate pairs and decode them with the next data chunk.\n   * Note: The method does no bound checks for target, therefore make sure\n   * the provided input data does not exceed the size of `target`.\n   * Returns the number of written codepoints in `target`.\n   */\n  public decode(input: string, target: Uint32Array): number {\n    const length = input.length;\n\n    if (!length) {\n      return 0;\n    }\n\n    let size = 0;\n    let startPos = 0;\n\n    // handle leftover surrogate high\n    if (this._interim) {\n      const second = input.charCodeAt(startPos++);\n      if (0xDC00 <= second && second <= 0xDFFF) {\n        target[size++] = (this._interim - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n      } else {\n        // illegal codepoint (USC2 handling)\n        target[size++] = this._interim;\n        target[size++] = second;\n      }\n      this._interim = 0;\n    }\n\n    for (let i = startPos; i < length; ++i) {\n      const code = input.charCodeAt(i);\n      // surrogate pair first\n      if (0xD800 <= code && code <= 0xDBFF) {\n        if (++i >= length) {\n          this._interim = code;\n          return size;\n        }\n        const second = input.charCodeAt(i);\n        if (0xDC00 <= second && second <= 0xDFFF) {\n          target[size++] = (code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n        } else {\n          // illegal codepoint (USC2 handling)\n          target[size++] = code;\n          target[size++] = second;\n        }\n        continue;\n      }\n      if (code === 0xFEFF) {\n        // BOM\n        continue;\n      }\n      target[size++] = code;\n    }\n    return size;\n  }\n}\n\n/**\n * Utf8Decoder - decodes UTF8 byte sequences into UTF32 codepoints.\n */\nexport class Utf8ToUtf32 {\n  public interim: Uint8Array = new Uint8Array(3);\n\n  /**\n   * Clears interim bytes and resets decoder to clean state.\n   */\n  public clear(): void {\n    this.interim.fill(0);\n  }\n\n  /**\n   * Decodes UTF8 byte sequences in `input` to UTF32 codepoints in `target`.\n   * The methods assumes stream input and will store partly transmitted bytes\n   * and decode them with the next data chunk.\n   * Note: The method does no bound checks for target, therefore make sure\n   * the provided data chunk does not exceed the size of `target`.\n   * Returns the number of written codepoints in `target`.\n   */\n  public decode(input: Uint8Array, target: Uint32Array): number {\n    const length = input.length;\n\n    if (!length) {\n      return 0;\n    }\n\n    let size = 0;\n    let byte1: number;\n    let byte2: number;\n    let byte3: number;\n    let byte4: number;\n    let codepoint = 0;\n    let startPos = 0;\n\n    // handle leftover bytes\n    if (this.interim[0]) {\n      let discardInterim = false;\n      let cp = this.interim[0];\n      cp &= ((((cp & 0xE0) === 0xC0)) ? 0x1F : (((cp & 0xF0) === 0xE0)) ? 0x0F : 0x07);\n      let pos = 0;\n      let tmp: number;\n      while ((tmp = this.interim[++pos] & 0x3F) && pos < 4) {\n        cp <<= 6;\n        cp |= tmp;\n      }\n      // missing bytes - read ahead from input\n      const type = (((this.interim[0] & 0xE0) === 0xC0)) ? 2 : (((this.interim[0] & 0xF0) === 0xE0)) ? 3 : 4;\n      const missing = type - pos;\n      while (startPos < missing) {\n        if (startPos >= length) {\n          return 0;\n        }\n        tmp = input[startPos++];\n        if ((tmp & 0xC0) !== 0x80) {\n          // wrong continuation, discard interim bytes completely\n          startPos--;\n          discardInterim = true;\n          break;\n        } else {\n          // need to save so we can continue short inputs in next call\n          this.interim[pos++] = tmp;\n          cp <<= 6;\n          cp |= tmp & 0x3F;\n        }\n      }\n      if (!discardInterim) {\n        // final test is type dependent\n        if (type === 2) {\n          if (cp < 0x80) {\n            // wrong starter byte\n            startPos--;\n          } else {\n            target[size++] = cp;\n          }\n        } else if (type === 3) {\n          if (cp < 0x0800 || (cp >= 0xD800 && cp <= 0xDFFF) || cp === 0xFEFF) {\n            // illegal codepoint or BOM\n          } else {\n            target[size++] = cp;\n          }\n        } else {\n          if (cp < 0x010000 || cp > 0x10FFFF) {\n            // illegal codepoint\n          } else {\n            target[size++] = cp;\n          }\n        }\n      }\n      this.interim.fill(0);\n    }\n\n    // loop through input\n    const fourStop = length - 4;\n    let i = startPos;\n    while (i < length) {\n      /**\n       * ASCII shortcut with loop unrolled to 4 consecutive ASCII chars.\n       * This is a compromise between speed gain for ASCII\n       * and penalty for non ASCII:\n       * For best ASCII performance the char should be stored directly into target,\n       * but even a single attempt to write to target and compare afterwards\n       * penalizes non ASCII really bad (-50%), thus we load the char into byteX first,\n       * which reduces ASCII performance by ~15%.\n       * This trial for ASCII reduces non ASCII performance by ~10% which seems acceptible\n       * compared to the gains.\n       * Note that this optimization only takes place for 4 consecutive ASCII chars,\n       * for any shorter it bails out. Worst case - all 4 bytes being read but\n       * thrown away due to the last being a non ASCII char (-10% performance).\n       */\n      while (i < fourStop\n        && !((byte1 = input[i]) & 0x80)\n        && !((byte2 = input[i + 1]) & 0x80)\n        && !((byte3 = input[i + 2]) & 0x80)\n        && !((byte4 = input[i + 3]) & 0x80))\n      {\n        target[size++] = byte1;\n        target[size++] = byte2;\n        target[size++] = byte3;\n        target[size++] = byte4;\n        i += 4;\n      }\n\n      // reread byte1\n      byte1 = input[i++];\n\n      // 1 byte\n      if (byte1 < 0x80) {\n        target[size++] = byte1;\n\n        // 2 bytes\n      } else if ((byte1 & 0xE0) === 0xC0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x1F) << 6 | (byte2 & 0x3F);\n        if (codepoint < 0x80) {\n          // wrong starter byte\n          i--;\n          continue;\n        }\n        target[size++] = codepoint;\n\n        // 3 bytes\n      } else if ((byte1 & 0xF0) === 0xE0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          return size;\n        }\n        byte3 = input[i++];\n        if ((byte3 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x0F) << 12 | (byte2 & 0x3F) << 6 | (byte3 & 0x3F);\n        if (codepoint < 0x0800 || (codepoint >= 0xD800 && codepoint <= 0xDFFF) || codepoint === 0xFEFF) {\n          // illegal codepoint or BOM, no i-- here\n          continue;\n        }\n        target[size++] = codepoint;\n\n        // 4 bytes\n      } else if ((byte1 & 0xF8) === 0xF0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          return size;\n        }\n        byte3 = input[i++];\n        if ((byte3 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          this.interim[2] = byte3;\n          return size;\n        }\n        byte4 = input[i++];\n        if ((byte4 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x07) << 18 | (byte2 & 0x3F) << 12 | (byte3 & 0x3F) << 6 | (byte4 & 0x3F);\n        if (codepoint < 0x010000 || codepoint > 0x10FFFF) {\n          // illegal codepoint, no i-- here\n          continue;\n        }\n        target[size++] = codepoint;\n      } else {\n        // illegal byte, just skip\n      }\n    }\n    return size;\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\nimport { IUnicodeVersionProvider } from 'common/services/Services';\nimport { fill } from 'common/TypedArrayUtils';\n\ntype CharWidth = 0 | 1 | 2;\n\nconst BMP_COMBINING = [\n  [0x0300, 0x036F], [0x0483, 0x0486], [0x0488, 0x0489],\n  [0x0591, 0x05BD], [0x05BF, 0x05BF], [0x05C1, 0x05C2],\n  [0x05C4, 0x05C5], [0x05C7, 0x05C7], [0x0600, 0x0603],\n  [0x0610, 0x0615], [0x064B, 0x065E], [0x0670, 0x0670],\n  [0x06D6, 0x06E4], [0x06E7, 0x06E8], [0x06EA, 0x06ED],\n  [0x070F, 0x070F], [0x0711, 0x0711], [0x0730, 0x074A],\n  [0x07A6, 0x07B0], [0x07EB, 0x07F3], [0x0901, 0x0902],\n  [0x093C, 0x093C], [0x0941, 0x0948], [0x094D, 0x094D],\n  [0x0951, 0x0954], [0x0962, 0x0963], [0x0981, 0x0981],\n  [0x09BC, 0x09BC], [0x09C1, 0x09C4], [0x09CD, 0x09CD],\n  [0x09E2, 0x09E3], [0x0A01, 0x0A02], [0x0A3C, 0x0A3C],\n  [0x0A41, 0x0A42], [0x0A47, 0x0A48], [0x0A4B, 0x0A4D],\n  [0x0A70, 0x0A71], [0x0A81, 0x0A82], [0x0ABC, 0x0ABC],\n  [0x0AC1, 0x0AC5], [0x0AC7, 0x0AC8], [0x0ACD, 0x0ACD],\n  [0x0AE2, 0x0AE3], [0x0B01, 0x0B01], [0x0B3C, 0x0B3C],\n  [0x0B3F, 0x0B3F], [0x0B41, 0x0B43], [0x0B4D, 0x0B4D],\n  [0x0B56, 0x0B56], [0x0B82, 0x0B82], [0x0BC0, 0x0BC0],\n  [0x0BCD, 0x0BCD], [0x0C3E, 0x0C40], [0x0C46, 0x0C48],\n  [0x0C4A, 0x0C4D], [0x0C55, 0x0C56], [0x0CBC, 0x0CBC],\n  [0x0CBF, 0x0CBF], [0x0CC6, 0x0CC6], [0x0CCC, 0x0CCD],\n  [0x0CE2, 0x0CE3], [0x0D41, 0x0D43], [0x0D4D, 0x0D4D],\n  [0x0DCA, 0x0DCA], [0x0DD2, 0x0DD4], [0x0DD6, 0x0DD6],\n  [0x0E31, 0x0E31], [0x0E34, 0x0E3A], [0x0E47, 0x0E4E],\n  [0x0EB1, 0x0EB1], [0x0EB4, 0x0EB9], [0x0EBB, 0x0EBC],\n  [0x0EC8, 0x0ECD], [0x0F18, 0x0F19], [0x0F35, 0x0F35],\n  [0x0F37, 0x0F37], [0x0F39, 0x0F39], [0x0F71, 0x0F7E],\n  [0x0F80, 0x0F84], [0x0F86, 0x0F87], [0x0F90, 0x0F97],\n  [0x0F99, 0x0FBC], [0x0FC6, 0x0FC6], [0x102D, 0x1030],\n  [0x1032, 0x1032], [0x1036, 0x1037], [0x1039, 0x1039],\n  [0x1058, 0x1059], [0x1160, 0x11FF], [0x135F, 0x135F],\n  [0x1712, 0x1714], [0x1732, 0x1734], [0x1752, 0x1753],\n  [0x1772, 0x1773], [0x17B4, 0x17B5], [0x17B7, 0x17BD],\n  [0x17C6, 0x17C6], [0x17C9, 0x17D3], [0x17DD, 0x17DD],\n  [0x180B, 0x180D], [0x18A9, 0x18A9], [0x1920, 0x1922],\n  [0x1927, 0x1928], [0x1932, 0x1932], [0x1939, 0x193B],\n  [0x1A17, 0x1A18], [0x1B00, 0x1B03], [0x1B34, 0x1B34],\n  [0x1B36, 0x1B3A], [0x1B3C, 0x1B3C], [0x1B42, 0x1B42],\n  [0x1B6B, 0x1B73], [0x1DC0, 0x1DCA], [0x1DFE, 0x1DFF],\n  [0x200B, 0x200F], [0x202A, 0x202E], [0x2060, 0x2063],\n  [0x206A, 0x206F], [0x20D0, 0x20EF], [0x302A, 0x302F],\n  [0x3099, 0x309A], [0xA806, 0xA806], [0xA80B, 0xA80B],\n  [0xA825, 0xA826], [0xFB1E, 0xFB1E], [0xFE00, 0xFE0F],\n  [0xFE20, 0xFE23], [0xFEFF, 0xFEFF], [0xFFF9, 0xFFFB]\n];\nconst HIGH_COMBINING = [\n  [0x10A01, 0x10A03], [0x10A05, 0x10A06], [0x10A0C, 0x10A0F],\n  [0x10A38, 0x10A3A], [0x10A3F, 0x10A3F], [0x1D167, 0x1D169],\n  [0x1D173, 0x1D182], [0x1D185, 0x1D18B], [0x1D1AA, 0x1D1AD],\n  [0x1D242, 0x1D244], [0xE0001, 0xE0001], [0xE0020, 0xE007F],\n  [0xE0100, 0xE01EF]\n];\n\n// BMP lookup table, lazy initialized during first addon loading\nlet table: Uint8Array;\n\nfunction bisearch(ucs: number, data: number[][]): boolean {\n  let min = 0;\n  let max = data.length - 1;\n  let mid;\n  if (ucs < data[0][0] || ucs > data[max][1]) {\n    return false;\n  }\n  while (max >= min) {\n    mid = (min + max) >> 1;\n    if (ucs > data[mid][1]) {\n      min = mid + 1;\n    } else if (ucs < data[mid][0]) {\n      max = mid - 1;\n    } else {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport class UnicodeV6 implements IUnicodeVersionProvider {\n  public readonly version = '6';\n\n  constructor() {\n    // init lookup table once\n    if (!table) {\n      table = new Uint8Array(65536);\n      fill(table, 1);\n      table[0] = 0;\n      // control chars\n      fill(table, 0, 1, 32);\n      fill(table, 0, 0x7f, 0xa0);\n\n      // apply wide char rules first\n      // wide chars\n      fill(table, 2, 0x1100, 0x1160);\n      table[0x2329] = 2;\n      table[0x232a] = 2;\n      fill(table, 2, 0x2e80, 0xa4d0);\n      table[0x303f] = 1;  // wrongly in last line\n\n      fill(table, 2, 0xac00, 0xd7a4);\n      fill(table, 2, 0xf900, 0xfb00);\n      fill(table, 2, 0xfe10, 0xfe1a);\n      fill(table, 2, 0xfe30, 0xfe70);\n      fill(table, 2, 0xff00, 0xff61);\n      fill(table, 2, 0xffe0, 0xffe7);\n\n      // apply combining last to ensure we overwrite\n      // wrongly wide set chars:\n      //    the original algo evals combining first and falls\n      //    through to wide check so we simply do here the opposite\n      // combining 0\n      for (let r = 0; r < BMP_COMBINING.length; ++r) {\n        fill(table, 0, BMP_COMBINING[r][0], BMP_COMBINING[r][1] + 1);\n      }\n    }\n  }\n\n  public wcwidth(num: number): CharWidth {\n    if (num < 32) return 0;\n    if (num < 127) return 1;\n    if (num < 65536) return table[num] as CharWidth;\n    if (bisearch(num, HIGH_COMBINING)) return 0;\n    if ((num >= 0x20000 && num <= 0x2fffd) || (num >= 0x30000 && num <= 0x3fffd)) return 2;\n    return 1;\n  }\n}\n","\n/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\ndeclare const setTimeout: (handler: () => void, timeout?: number) => void;\n\n/**\n * Safety watermark to avoid memory exhaustion and browser engine crash on fast data input.\n * Enable flow control to avoid this limit and make sure that your backend correctly\n * propagates this to the underlying pty. (see docs for further instructions)\n * Since this limit is meant as a safety parachute to prevent browser crashs,\n * it is set to a very high number. Typically xterm.js gets unresponsive with\n * a 100 times lower number (>500 kB).\n */\nconst DISCARD_WATERMARK = 50000000; // ~50 MB\n\n/**\n * The max number of ms to spend on writes before allowing the renderer to\n * catch up with a 0ms setTimeout. A value of < 33 to keep us close to\n * 30fps, and a value of < 16 to try to run at 60fps. Of course, the real FPS\n * depends on the time it takes for the renderer to draw the frame.\n */\nconst WRITE_TIMEOUT_MS = 12;\n\n/**\n * Threshold of max held chunks in the write buffer, that were already processed.\n * This is a tradeoff between extensive write buffer shifts (bad runtime) and high\n * memory consumption by data thats not used anymore.\n */\nconst WRITE_BUFFER_LENGTH_THRESHOLD = 50;\n\n// queueMicrotask polyfill for nodejs < v11\nconst qmt: (cb: () => void) => void = (typeof queueMicrotask === 'undefined')\n  ? (cb: () => void) => { Promise.resolve().then(cb); }\n  : queueMicrotask;\n\n\nexport class WriteBuffer {\n  private _writeBuffer: (string | Uint8Array)[] = [];\n  private _callbacks: ((() => void) | undefined)[] = [];\n  private _pendingData = 0;\n  private _bufferOffset = 0;\n  private _isSyncWriting = false;\n  private _syncCalls = 0;\n\n  constructor(private _action: (data: string | Uint8Array, promiseResult?: boolean) => void | Promise<boolean>) { }\n\n  /**\n   * @deprecated Unreliable, to be removed soon.\n   */\n  public writeSync(data: string | Uint8Array, maxSubsequentCalls?: number): void {\n    // stop writeSync recursions with maxSubsequentCalls argument\n    // This is dangerous to use as it will lose the current data chunk\n    // and return immediately.\n    if (maxSubsequentCalls !== undefined && this._syncCalls > maxSubsequentCalls) {\n      // comment next line if a whole loop block should only contain x `writeSync` calls\n      // (total flat vs. deep nested limit)\n      this._syncCalls = 0;\n      return;\n    }\n    // append chunk to buffer\n    this._pendingData += data.length;\n    this._writeBuffer.push(data);\n    this._callbacks.push(undefined);\n\n    // increase recursion counter\n    this._syncCalls++;\n    // exit early if another writeSync loop is active\n    if (this._isSyncWriting) {\n      return;\n    }\n    this._isSyncWriting = true;\n\n    // force sync processing on pending data chunks to avoid in-band data scrambling\n    // does the same as innerWrite but without event loop\n    // we have to do it here as single loop steps to not corrupt loop subject\n    // by another writeSync call triggered from _action\n    let chunk: string | Uint8Array | undefined;\n    while (chunk = this._writeBuffer.shift()) {\n      this._action(chunk);\n      const cb = this._callbacks.shift();\n      if (cb) cb();\n    }\n    // reset to avoid reprocessing of chunks with scheduled innerWrite call\n    // stopping scheduled innerWrite by offset > length condition\n    this._pendingData = 0;\n    this._bufferOffset = 0x7FFFFFFF;\n\n    // allow another writeSync to loop\n    this._isSyncWriting = false;\n    this._syncCalls = 0;\n  }\n\n  public write(data: string | Uint8Array, callback?: () => void): void {\n    if (this._pendingData > DISCARD_WATERMARK) {\n      throw new Error('write data discarded, use flow control to avoid losing data');\n    }\n\n    // schedule chunk processing for next event loop run\n    if (!this._writeBuffer.length) {\n      this._bufferOffset = 0;\n      setTimeout(() => this._innerWrite());\n    }\n\n    this._pendingData += data.length;\n    this._writeBuffer.push(data);\n    this._callbacks.push(callback);\n  }\n\n  /**\n   * Inner write call, that enters the sliced chunk processing by timing.\n   *\n   * `lastTime` indicates, when the last _innerWrite call had started.\n   * It is used to aggregate async handler execution under a timeout constraint\n   * effectively lowering the redrawing needs, schematically:\n   *\n   *   macroTask _innerWrite:\n   *     if (Date.now() - (lastTime | 0) < WRITE_TIMEOUT_MS):\n   *        schedule microTask _innerWrite(lastTime)\n   *     else:\n   *        schedule macroTask _innerWrite(0)\n   *\n   *   overall execution order on task queues:\n   *\n   *   macrotasks:  [...]  -->  _innerWrite(0)  -->  [...]  -->  screenUpdate  -->  [...]\n   *         m  t:                    |\n   *         i  a:                  [...]\n   *         c  s:                    |\n   *         r  k:              while < timeout:\n   *         o  s:                _innerWrite(timeout)\n   *\n   * `promiseResult` depicts the promise resolve value of an async handler.\n   * This value gets carried forward through all saved stack states of the\n   * paused parser for proper continuation.\n   *\n   * Note, for pure sync code `lastTime` and `promiseResult` have no meaning.\n   */\n  protected _innerWrite(lastTime: number = 0, promiseResult: boolean = true): void {\n    const startTime = lastTime || Date.now();\n    while (this._writeBuffer.length > this._bufferOffset) {\n      const data = this._writeBuffer[this._bufferOffset];\n      const result = this._action(data, promiseResult);\n      if (result) {\n        /**\n         * If we get a promise as return value, we re-schedule the continuation\n         * as thenable on the promise and exit right away.\n         *\n         * The exit here means, that we block input processing at the current active chunk,\n         * the exact execution position within the chunk is preserved by the saved\n         * stack content in InputHandler and EscapeSequenceParser.\n         *\n         * Resuming happens automatically from that saved stack state.\n         * Also the resolved promise value is passed along the callstack to\n         * `EscapeSequenceParser.parse` to correctly resume the stopped handler loop.\n         *\n         * Exceptions on async handlers will be logged to console async, but do not interrupt\n         * the input processing (continues with next handler at the current input position).\n         */\n\n        /**\n         * If a promise takes long to resolve, we should schedule continuation behind setTimeout.\n         * This might already be too late, if our .then enters really late (executor + prev thens took very long).\n         * This cannot be solved here for the handler itself (it is the handlers responsibility to slice hard work),\n         * but we can at least schedule a screen update as we gain control.\n         */\n        const continuation: (r: boolean) => void = (r: boolean) => Date.now() - startTime >= WRITE_TIMEOUT_MS\n          ? setTimeout(() => this._innerWrite(0, r))\n          : this._innerWrite(startTime, r);\n\n        /**\n         * Optimization considerations:\n         * The continuation above favors FPS over throughput by eval'ing `startTime` on resolve.\n         * This might schedule too many screen updates with bad throughput drops (in case a slow\n         * resolving handler sliced its work properly behind setTimeout calls). We cannot spot\n         * this condition here, also the renderer has no way to spot nonsense updates either.\n         * FIXME: A proper fix for this would track the FPS at the renderer entry level separately.\n         *\n         * If favoring of FPS shows bad throughtput impact, use the following instead. It favors\n         * throughput by eval'ing `startTime` upfront pulling at least one more chunk into the\n         * current microtask queue (executed before setTimeout).\n         */\n        // const continuation: (r: boolean) => void = Date.now() - startTime >= WRITE_TIMEOUT_MS\n        //   ? r => setTimeout(() => this._innerWrite(0, r))\n        //   : r => this._innerWrite(startTime, r);\n\n        // Handle exceptions synchronously to current band position, idea:\n        // 1. spawn a single microtask which we allow to throw hard\n        // 2. spawn a promise immediately resolving to `true`\n        // (executed on the same queue, thus properly aligned before continuation happens)\n        result.catch(err => {\n          qmt(() => {throw err;});\n          return Promise.resolve(false);\n        }).then(continuation);\n        return;\n      }\n\n      const cb = this._callbacks[this._bufferOffset];\n      if (cb) cb();\n      this._bufferOffset++;\n      this._pendingData -= data.length;\n\n      if (Date.now() - startTime >= WRITE_TIMEOUT_MS) {\n        break;\n      }\n    }\n    if (this._writeBuffer.length > this._bufferOffset) {\n      // Allow renderer to catch up before processing the next batch\n      // trim already processed chunks if we are above threshold\n      if (this._bufferOffset > WRITE_BUFFER_LENGTH_THRESHOLD) {\n        this._writeBuffer = this._writeBuffer.slice(this._bufferOffset);\n        this._callbacks = this._callbacks.slice(this._bufferOffset);\n        this._bufferOffset = 0;\n      }\n      setTimeout(() => this._innerWrite());\n    } else {\n      this._writeBuffer.length = 0;\n      this._callbacks.length = 0;\n      this._pendingData = 0;\n      this._bufferOffset = 0;\n    }\n  }\n}\n","/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n\n// 'rgb:' rule - matching: r/g/b | rr/gg/bb | rrr/ggg/bbb | rrrr/gggg/bbbb (hex digits)\nconst RGB_REX = /^([\\da-f]{1})\\/([\\da-f]{1})\\/([\\da-f]{1})$|^([\\da-f]{2})\\/([\\da-f]{2})\\/([\\da-f]{2})$|^([\\da-f]{3})\\/([\\da-f]{3})\\/([\\da-f]{3})$|^([\\da-f]{4})\\/([\\da-f]{4})\\/([\\da-f]{4})$/;\n// '#...' rule - matching any hex digits\nconst HASH_REX = /^[\\da-f]+$/;\n\n/**\n * Parse color spec to RGB values (8 bit per channel).\n * See `man xparsecolor` for details about certain format specifications.\n *\n * Supported formats:\n * - rgb:<red>/<green>/<blue> with <red>, <green>, <blue> in h | hh | hhh | hhhh\n * - #RGB, #RRGGBB, #RRRGGGBBB, #RRRRGGGGBBBB\n *\n * All other formats like rgbi: or device-independent string specifications\n * with float numbering are not supported.\n */\nexport function parseColor(data: string): [number, number, number] | undefined {\n  if (!data) return;\n  // also handle uppercases\n  let low = data.toLowerCase();\n  if (low.indexOf('rgb:') === 0) {\n    // 'rgb:' specifier\n    low = low.slice(4);\n    const m = RGB_REX.exec(low);\n    if (m) {\n      const base = m[1] ? 15 : m[4] ? 255 : m[7] ? 4095 : 65535;\n      return [\n        Math.round(parseInt(m[1] || m[4] || m[7] || m[10], 16) / base * 255),\n        Math.round(parseInt(m[2] || m[5] || m[8] || m[11], 16) / base * 255),\n        Math.round(parseInt(m[3] || m[6] || m[9] || m[12], 16) / base * 255)\n      ];\n    }\n  } else if (low.indexOf('#') === 0) {\n    // '#' specifier\n    low = low.slice(1);\n    if (HASH_REX.exec(low) && [3, 6, 9, 12].includes(low.length)) {\n      const adv = low.length / 3;\n      const result: [number, number, number] = [0, 0, 0];\n      for (let i = 0; i < 3; ++i) {\n        const c = parseInt(low.slice(adv * i, adv * i + adv), 16);\n        result[i] = adv === 1 ? c << 4 : adv === 2 ? c : adv === 3 ? c >> 4 : c >> 8;\n      }\n      return result;\n    }\n  }\n\n  // Named colors are currently not supported due to the large addition to the xterm.js bundle size\n  // they would add. In order to support named colors, we would need some way of optionally loading\n  // additional payloads so startup/download time is not bloated (see #3530).\n}\n\n// pad hex output to requested bit width\nfunction pad(n: number, bits: number): string {\n  const s = n.toString(16);\n  const s2 = s.length < 2 ? '0' + s : s;\n  switch (bits) {\n    case 4:\n      return s[0];\n    case 8:\n      return s2;\n    case 12:\n      return (s2 + s2).slice(0, 3);\n    default:\n      return s2 + s2;\n  }\n}\n\n/**\n * Convert a given color to rgb:../../.. string of `bits` depth.\n */\nexport function toRgbString(color: [number, number, number], bits: number = 16): string {\n  const [r, g, b] = color;\n  return `rgb:${pad(r, bits)}/${pad(g, bits)}/${pad(b, bits)}`;\n}\n","/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/**\n * Internal states of EscapeSequenceParser.\n */\nexport const enum ParserState {\n  GROUND = 0,\n  ESCAPE = 1,\n  ESCAPE_INTERMEDIATE = 2,\n  CSI_ENTRY = 3,\n  CSI_PARAM = 4,\n  CSI_INTERMEDIATE = 5,\n  CSI_IGNORE = 6,\n  SOS_PM_APC_STRING = 7,\n  OSC_STRING = 8,\n  DCS_ENTRY = 9,\n  DCS_PARAM = 10,\n  DCS_IGNORE = 11,\n  DCS_INTERMEDIATE = 12,\n  DCS_PASSTHROUGH = 13\n}\n\n/**\n* Internal actions of EscapeSequenceParser.\n*/\nexport const enum ParserAction {\n  IGNORE = 0,\n  ERROR = 1,\n  PRINT = 2,\n  EXECUTE = 3,\n  OSC_START = 4,\n  OSC_PUT = 5,\n  OSC_END = 6,\n  CSI_DISPATCH = 7,\n  PARAM = 8,\n  COLLECT = 9,\n  ESC_DISPATCH = 10,\n  CLEAR = 11,\n  DCS_HOOK = 12,\n  DCS_PUT = 13,\n  DCS_UNHOOK = 14\n}\n\n/**\n * Internal states of OscParser.\n */\nexport const enum OscState {\n  START = 0,\n  ID = 1,\n  PAYLOAD = 2,\n  ABORT = 3\n}\n\n// payload limit for OSC and DCS\nexport const PAYLOAD_LIMIT = 10000000;\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\nimport { IDcsHandler, IParams, IHandlerCollection, IDcsParser, DcsFallbackHandlerType, ISubParserStackState } from 'common/parser/Types';\nimport { utf32ToString } from 'common/input/TextDecoder';\nimport { Params } from 'common/parser/Params';\nimport { PAYLOAD_LIMIT } from 'common/parser/Constants';\n\nconst EMPTY_HANDLERS: IDcsHandler[] = [];\n\nexport class DcsParser implements IDcsParser {\n  private _handlers: IHandlerCollection<IDcsHandler> = Object.create(null);\n  private _active: IDcsHandler[] = EMPTY_HANDLERS;\n  private _ident: number = 0;\n  private _handlerFb: DcsFallbackHandlerType = () => { };\n  private _stack: ISubParserStackState = {\n    paused: false,\n    loopPosition: 0,\n    fallThrough: false\n  };\n\n  public dispose(): void {\n    this._handlers = Object.create(null);\n    this._handlerFb = () => { };\n    this._active = EMPTY_HANDLERS;\n  }\n\n  public registerHandler(ident: number, handler: IDcsHandler): IDisposable {\n    if (this._handlers[ident] === undefined) {\n      this._handlers[ident] = [];\n    }\n    const handlerList = this._handlers[ident];\n    handlerList.push(handler);\n    return {\n      dispose: () => {\n        const handlerIndex = handlerList.indexOf(handler);\n        if (handlerIndex !== -1) {\n          handlerList.splice(handlerIndex, 1);\n        }\n      }\n    };\n  }\n\n  public clearHandler(ident: number): void {\n    if (this._handlers[ident]) delete this._handlers[ident];\n  }\n\n  public setHandlerFallback(handler: DcsFallbackHandlerType): void {\n    this._handlerFb = handler;\n  }\n\n  public reset(): void {\n    // force cleanup leftover handlers\n    if (this._active.length) {\n      for (let j = this._stack.paused ? this._stack.loopPosition - 1 : this._active.length - 1; j >= 0; --j) {\n        this._active[j].unhook(false);\n      }\n    }\n    this._stack.paused = false;\n    this._active = EMPTY_HANDLERS;\n    this._ident = 0;\n  }\n\n  public hook(ident: number, params: IParams): void {\n    // always reset leftover handlers\n    this.reset();\n    this._ident = ident;\n    this._active = this._handlers[ident] || EMPTY_HANDLERS;\n    if (!this._active.length) {\n      this._handlerFb(this._ident, 'HOOK', params);\n    } else {\n      for (let j = this._active.length - 1; j >= 0; j--) {\n        this._active[j].hook(params);\n      }\n    }\n  }\n\n  public put(data: Uint32Array, start: number, end: number): void {\n    if (!this._active.length) {\n      this._handlerFb(this._ident, 'PUT', utf32ToString(data, start, end));\n    } else {\n      for (let j = this._active.length - 1; j >= 0; j--) {\n        this._active[j].put(data, start, end);\n      }\n    }\n  }\n\n  public unhook(success: boolean, promiseResult: boolean = true): void | Promise<boolean> {\n    if (!this._active.length) {\n      this._handlerFb(this._ident, 'UNHOOK', success);\n    } else {\n      let handlerResult: boolean | Promise<boolean> = false;\n      let j = this._active.length - 1;\n      let fallThrough = false;\n      if (this._stack.paused) {\n        j = this._stack.loopPosition - 1;\n        handlerResult = promiseResult;\n        fallThrough = this._stack.fallThrough;\n        this._stack.paused = false;\n      }\n      if (!fallThrough && handlerResult === false) {\n        for (; j >= 0; j--) {\n          handlerResult = this._active[j].unhook(success);\n          if (handlerResult === true) {\n            break;\n          } else if (handlerResult instanceof Promise) {\n            this._stack.paused = true;\n            this._stack.loopPosition = j;\n            this._stack.fallThrough = false;\n            return handlerResult;\n          }\n        }\n        j--;\n      }\n      // cleanup left over handlers (fallThrough for async)\n      for (; j >= 0; j--) {\n        handlerResult = this._active[j].unhook(false);\n        if (handlerResult instanceof Promise) {\n          this._stack.paused = true;\n          this._stack.loopPosition = j;\n          this._stack.fallThrough = true;\n          return handlerResult;\n        }\n      }\n    }\n    this._active = EMPTY_HANDLERS;\n    this._ident = 0;\n  }\n}\n\n// predefine empty params as [0] (ZDM)\nconst EMPTY_PARAMS = new Params();\nEMPTY_PARAMS.addParam(0);\n\n/**\n * Convenient class to create a DCS handler from a single callback function.\n * Note: The payload is currently limited to 50 MB (hardcoded).\n */\nexport class DcsHandler implements IDcsHandler {\n  private _data = '';\n  private _params: IParams = EMPTY_PARAMS;\n  private _hitLimit: boolean = false;\n\n  constructor(private _handler: (data: string, params: IParams) => boolean | Promise<boolean>) { }\n\n  public hook(params: IParams): void {\n    // since we need to preserve params until `unhook`, we have to clone it\n    // (only borrowed from parser and spans multiple parser states)\n    // perf optimization:\n    // clone only, if we have non empty params, otherwise stick with default\n    this._params = (params.length > 1 || params.params[0]) ? params.clone() : EMPTY_PARAMS;\n    this._data = '';\n    this._hitLimit = false;\n  }\n\n  public put(data: Uint32Array, start: number, end: number): void {\n    if (this._hitLimit) {\n      return;\n    }\n    this._data += utf32ToString(data, start, end);\n    if (this._data.length > PAYLOAD_LIMIT) {\n      this._data = '';\n      this._hitLimit = true;\n    }\n  }\n\n  public unhook(success: boolean): boolean | Promise<boolean> {\n    let ret: boolean | Promise<boolean> = false;\n    if (this._hitLimit) {\n      ret = false;\n    } else if (success) {\n      ret = this._handler(this._data, this._params);\n      if (ret instanceof Promise) {\n        // need to hold data and params until `ret` got resolved\n        // dont care for errors, data will be freed anyway on next start\n        return ret.then(res => {\n          this._params = EMPTY_PARAMS;\n          this._data = '';\n          this._hitLimit = false;\n          return res;\n        });\n      }\n    }\n    this._params = EMPTY_PARAMS;\n    this._data = '';\n    this._hitLimit = false;\n    return ret;\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IParsingState, IDcsHandler, IEscapeSequenceParser, IParams, IOscHandler, IHandlerCollection, CsiHandlerType, OscFallbackHandlerType, IOscParser, EscHandlerType, IDcsParser, DcsFallbackHandlerType, IFunctionIdentifier, ExecuteFallbackHandlerType, CsiFallbackHandlerType, EscFallbackHandlerType, PrintHandlerType, PrintFallbackHandlerType, ExecuteHandlerType, IParserStackState, ParserStackType, ResumableHandlersType } from 'common/parser/Types';\nimport { ParserState, ParserAction } from 'common/parser/Constants';\nimport { Disposable } from 'common/Lifecycle';\nimport { IDisposable } from 'common/Types';\nimport { fill } from 'common/TypedArrayUtils';\nimport { Params } from 'common/parser/Params';\nimport { OscParser } from 'common/parser/OscParser';\nimport { DcsParser } from 'common/parser/DcsParser';\n\n/**\n * Table values are generated like this:\n *    index:  currentState << TableValue.INDEX_STATE_SHIFT | charCode\n *    value:  action << TableValue.TRANSITION_ACTION_SHIFT | nextState\n */\nconst enum TableAccess {\n  TRANSITION_ACTION_SHIFT = 4,\n  TRANSITION_STATE_MASK = 15,\n  INDEX_STATE_SHIFT = 8\n}\n\n/**\n * Transition table for EscapeSequenceParser.\n */\nexport class TransitionTable {\n  public table: Uint8Array;\n\n  constructor(length: number) {\n    this.table = new Uint8Array(length);\n  }\n\n  /**\n   * Set default transition.\n   * @param action default action\n   * @param next default next state\n   */\n  public setDefault(action: ParserAction, next: ParserState): void {\n    fill(this.table, action << TableAccess.TRANSITION_ACTION_SHIFT | next);\n  }\n\n  /**\n   * Add a transition to the transition table.\n   * @param code input character code\n   * @param state current parser state\n   * @param action parser action to be done\n   * @param next next parser state\n   */\n  public add(code: number, state: ParserState, action: ParserAction, next: ParserState): void {\n    this.table[state << TableAccess.INDEX_STATE_SHIFT | code] = action << TableAccess.TRANSITION_ACTION_SHIFT | next;\n  }\n\n  /**\n   * Add transitions for multiple input character codes.\n   * @param codes input character code array\n   * @param state current parser state\n   * @param action parser action to be done\n   * @param next next parser state\n   */\n  public addMany(codes: number[], state: ParserState, action: ParserAction, next: ParserState): void {\n    for (let i = 0; i < codes.length; i++) {\n      this.table[state << TableAccess.INDEX_STATE_SHIFT | codes[i]] = action << TableAccess.TRANSITION_ACTION_SHIFT | next;\n    }\n  }\n}\n\n\n// Pseudo-character placeholder for printable non-ascii characters (unicode).\nconst NON_ASCII_PRINTABLE = 0xA0;\n\n\n/**\n * VT500 compatible transition table.\n * Taken from https://vt100.net/emu/dec_ansi_parser.\n */\nexport const VT500_TRANSITION_TABLE = (function (): TransitionTable {\n  const table: TransitionTable = new TransitionTable(4095);\n\n  // range macro for byte\n  const BYTE_VALUES = 256;\n  const blueprint = Array.apply(null, Array(BYTE_VALUES)).map((unused: any, i: number) => i);\n  const r = (start: number, end: number): number[] => blueprint.slice(start, end);\n\n  // Default definitions.\n  const PRINTABLES = r(0x20, 0x7f); // 0x20 (SP) included, 0x7F (DEL) excluded\n  const EXECUTABLES = r(0x00, 0x18);\n  EXECUTABLES.push(0x19);\n  EXECUTABLES.push.apply(EXECUTABLES, r(0x1c, 0x20));\n\n  const states: number[] = r(ParserState.GROUND, ParserState.DCS_PASSTHROUGH + 1);\n  let state: any;\n\n  // set default transition\n  table.setDefault(ParserAction.ERROR, ParserState.GROUND);\n  // printables\n  table.addMany(PRINTABLES, ParserState.GROUND, ParserAction.PRINT, ParserState.GROUND);\n  // global anywhere rules\n  for (state in states) {\n    table.addMany([0x18, 0x1a, 0x99, 0x9a], state, ParserAction.EXECUTE, ParserState.GROUND);\n    table.addMany(r(0x80, 0x90), state, ParserAction.EXECUTE, ParserState.GROUND);\n    table.addMany(r(0x90, 0x98), state, ParserAction.EXECUTE, ParserState.GROUND);\n    table.add(0x9c, state, ParserAction.IGNORE, ParserState.GROUND); // ST as terminator\n    table.add(0x1b, state, ParserAction.CLEAR, ParserState.ESCAPE);  // ESC\n    table.add(0x9d, state, ParserAction.OSC_START, ParserState.OSC_STRING);  // OSC\n    table.addMany([0x98, 0x9e, 0x9f], state, ParserAction.IGNORE, ParserState.SOS_PM_APC_STRING);\n    table.add(0x9b, state, ParserAction.CLEAR, ParserState.CSI_ENTRY);  // CSI\n    table.add(0x90, state, ParserAction.CLEAR, ParserState.DCS_ENTRY);  // DCS\n  }\n  // rules for executables and 7f\n  table.addMany(EXECUTABLES, ParserState.GROUND, ParserAction.EXECUTE, ParserState.GROUND);\n  table.addMany(EXECUTABLES, ParserState.ESCAPE, ParserAction.EXECUTE, ParserState.ESCAPE);\n  table.add(0x7f, ParserState.ESCAPE, ParserAction.IGNORE, ParserState.ESCAPE);\n  table.addMany(EXECUTABLES, ParserState.OSC_STRING, ParserAction.IGNORE, ParserState.OSC_STRING);\n  table.addMany(EXECUTABLES, ParserState.CSI_ENTRY, ParserAction.EXECUTE, ParserState.CSI_ENTRY);\n  table.add(0x7f, ParserState.CSI_ENTRY, ParserAction.IGNORE, ParserState.CSI_ENTRY);\n  table.addMany(EXECUTABLES, ParserState.CSI_PARAM, ParserAction.EXECUTE, ParserState.CSI_PARAM);\n  table.add(0x7f, ParserState.CSI_PARAM, ParserAction.IGNORE, ParserState.CSI_PARAM);\n  table.addMany(EXECUTABLES, ParserState.CSI_IGNORE, ParserAction.EXECUTE, ParserState.CSI_IGNORE);\n  table.addMany(EXECUTABLES, ParserState.CSI_INTERMEDIATE, ParserAction.EXECUTE, ParserState.CSI_INTERMEDIATE);\n  table.add(0x7f, ParserState.CSI_INTERMEDIATE, ParserAction.IGNORE, ParserState.CSI_INTERMEDIATE);\n  table.addMany(EXECUTABLES, ParserState.ESCAPE_INTERMEDIATE, ParserAction.EXECUTE, ParserState.ESCAPE_INTERMEDIATE);\n  table.add(0x7f, ParserState.ESCAPE_INTERMEDIATE, ParserAction.IGNORE, ParserState.ESCAPE_INTERMEDIATE);\n  // osc\n  table.add(0x5d, ParserState.ESCAPE, ParserAction.OSC_START, ParserState.OSC_STRING);\n  table.addMany(PRINTABLES, ParserState.OSC_STRING, ParserAction.OSC_PUT, ParserState.OSC_STRING);\n  table.add(0x7f, ParserState.OSC_STRING, ParserAction.OSC_PUT, ParserState.OSC_STRING);\n  table.addMany([0x9c, 0x1b, 0x18, 0x1a, 0x07], ParserState.OSC_STRING, ParserAction.OSC_END, ParserState.GROUND);\n  table.addMany(r(0x1c, 0x20), ParserState.OSC_STRING, ParserAction.IGNORE, ParserState.OSC_STRING);\n  // sos/pm/apc does nothing\n  table.addMany([0x58, 0x5e, 0x5f], ParserState.ESCAPE, ParserAction.IGNORE, ParserState.SOS_PM_APC_STRING);\n  table.addMany(PRINTABLES, ParserState.SOS_PM_APC_STRING, ParserAction.IGNORE, ParserState.SOS_PM_APC_STRING);\n  table.addMany(EXECUTABLES, ParserState.SOS_PM_APC_STRING, ParserAction.IGNORE, ParserState.SOS_PM_APC_STRING);\n  table.add(0x9c, ParserState.SOS_PM_APC_STRING, ParserAction.IGNORE, ParserState.GROUND);\n  table.add(0x7f, ParserState.SOS_PM_APC_STRING, ParserAction.IGNORE, ParserState.SOS_PM_APC_STRING);\n  // csi entries\n  table.add(0x5b, ParserState.ESCAPE, ParserAction.CLEAR, ParserState.CSI_ENTRY);\n  table.addMany(r(0x40, 0x7f), ParserState.CSI_ENTRY, ParserAction.CSI_DISPATCH, ParserState.GROUND);\n  table.addMany(r(0x30, 0x3c), ParserState.CSI_ENTRY, ParserAction.PARAM, ParserState.CSI_PARAM);\n  table.addMany([0x3c, 0x3d, 0x3e, 0x3f], ParserState.CSI_ENTRY, ParserAction.COLLECT, ParserState.CSI_PARAM);\n  table.addMany(r(0x30, 0x3c), ParserState.CSI_PARAM, ParserAction.PARAM, ParserState.CSI_PARAM);\n  table.addMany(r(0x40, 0x7f), ParserState.CSI_PARAM, ParserAction.CSI_DISPATCH, ParserState.GROUND);\n  table.addMany([0x3c, 0x3d, 0x3e, 0x3f], ParserState.CSI_PARAM, ParserAction.IGNORE, ParserState.CSI_IGNORE);\n  table.addMany(r(0x20, 0x40), ParserState.CSI_IGNORE, ParserAction.IGNORE, ParserState.CSI_IGNORE);\n  table.add(0x7f, ParserState.CSI_IGNORE, ParserAction.IGNORE, ParserState.CSI_IGNORE);\n  table.addMany(r(0x40, 0x7f), ParserState.CSI_IGNORE, ParserAction.IGNORE, ParserState.GROUND);\n  table.addMany(r(0x20, 0x30), ParserState.CSI_ENTRY, ParserAction.COLLECT, ParserState.CSI_INTERMEDIATE);\n  table.addMany(r(0x20, 0x30), ParserState.CSI_INTERMEDIATE, ParserAction.COLLECT, ParserState.CSI_INTERMEDIATE);\n  table.addMany(r(0x30, 0x40), ParserState.CSI_INTERMEDIATE, ParserAction.IGNORE, ParserState.CSI_IGNORE);\n  table.addMany(r(0x40, 0x7f), ParserState.CSI_INTERMEDIATE, ParserAction.CSI_DISPATCH, ParserState.GROUND);\n  table.addMany(r(0x20, 0x30), ParserState.CSI_PARAM, ParserAction.COLLECT, ParserState.CSI_INTERMEDIATE);\n  // esc_intermediate\n  table.addMany(r(0x20, 0x30), ParserState.ESCAPE, ParserAction.COLLECT, ParserState.ESCAPE_INTERMEDIATE);\n  table.addMany(r(0x20, 0x30), ParserState.ESCAPE_INTERMEDIATE, ParserAction.COLLECT, ParserState.ESCAPE_INTERMEDIATE);\n  table.addMany(r(0x30, 0x7f), ParserState.ESCAPE_INTERMEDIATE, ParserAction.ESC_DISPATCH, ParserState.GROUND);\n  table.addMany(r(0x30, 0x50), ParserState.ESCAPE, ParserAction.ESC_DISPATCH, ParserState.GROUND);\n  table.addMany(r(0x51, 0x58), ParserState.ESCAPE, ParserAction.ESC_DISPATCH, ParserState.GROUND);\n  table.addMany([0x59, 0x5a, 0x5c], ParserState.ESCAPE, ParserAction.ESC_DISPATCH, ParserState.GROUND);\n  table.addMany(r(0x60, 0x7f), ParserState.ESCAPE, ParserAction.ESC_DISPATCH, ParserState.GROUND);\n  // dcs entry\n  table.add(0x50, ParserState.ESCAPE, ParserAction.CLEAR, ParserState.DCS_ENTRY);\n  table.addMany(EXECUTABLES, ParserState.DCS_ENTRY, ParserAction.IGNORE, ParserState.DCS_ENTRY);\n  table.add(0x7f, ParserState.DCS_ENTRY, ParserAction.IGNORE, ParserState.DCS_ENTRY);\n  table.addMany(r(0x1c, 0x20), ParserState.DCS_ENTRY, ParserAction.IGNORE, ParserState.DCS_ENTRY);\n  table.addMany(r(0x20, 0x30), ParserState.DCS_ENTRY, ParserAction.COLLECT, ParserState.DCS_INTERMEDIATE);\n  table.addMany(r(0x30, 0x3c), ParserState.DCS_ENTRY, ParserAction.PARAM, ParserState.DCS_PARAM);\n  table.addMany([0x3c, 0x3d, 0x3e, 0x3f], ParserState.DCS_ENTRY, ParserAction.COLLECT, ParserState.DCS_PARAM);\n  table.addMany(EXECUTABLES, ParserState.DCS_IGNORE, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.addMany(r(0x20, 0x80), ParserState.DCS_IGNORE, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.addMany(r(0x1c, 0x20), ParserState.DCS_IGNORE, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.addMany(EXECUTABLES, ParserState.DCS_PARAM, ParserAction.IGNORE, ParserState.DCS_PARAM);\n  table.add(0x7f, ParserState.DCS_PARAM, ParserAction.IGNORE, ParserState.DCS_PARAM);\n  table.addMany(r(0x1c, 0x20), ParserState.DCS_PARAM, ParserAction.IGNORE, ParserState.DCS_PARAM);\n  table.addMany(r(0x30, 0x3c), ParserState.DCS_PARAM, ParserAction.PARAM, ParserState.DCS_PARAM);\n  table.addMany([0x3c, 0x3d, 0x3e, 0x3f], ParserState.DCS_PARAM, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.addMany(r(0x20, 0x30), ParserState.DCS_PARAM, ParserAction.COLLECT, ParserState.DCS_INTERMEDIATE);\n  table.addMany(EXECUTABLES, ParserState.DCS_INTERMEDIATE, ParserAction.IGNORE, ParserState.DCS_INTERMEDIATE);\n  table.add(0x7f, ParserState.DCS_INTERMEDIATE, ParserAction.IGNORE, ParserState.DCS_INTERMEDIATE);\n  table.addMany(r(0x1c, 0x20), ParserState.DCS_INTERMEDIATE, ParserAction.IGNORE, ParserState.DCS_INTERMEDIATE);\n  table.addMany(r(0x20, 0x30), ParserState.DCS_INTERMEDIATE, ParserAction.COLLECT, ParserState.DCS_INTERMEDIATE);\n  table.addMany(r(0x30, 0x40), ParserState.DCS_INTERMEDIATE, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.addMany(r(0x40, 0x7f), ParserState.DCS_INTERMEDIATE, ParserAction.DCS_HOOK, ParserState.DCS_PASSTHROUGH);\n  table.addMany(r(0x40, 0x7f), ParserState.DCS_PARAM, ParserAction.DCS_HOOK, ParserState.DCS_PASSTHROUGH);\n  table.addMany(r(0x40, 0x7f), ParserState.DCS_ENTRY, ParserAction.DCS_HOOK, ParserState.DCS_PASSTHROUGH);\n  table.addMany(EXECUTABLES, ParserState.DCS_PASSTHROUGH, ParserAction.DCS_PUT, ParserState.DCS_PASSTHROUGH);\n  table.addMany(PRINTABLES, ParserState.DCS_PASSTHROUGH, ParserAction.DCS_PUT, ParserState.DCS_PASSTHROUGH);\n  table.add(0x7f, ParserState.DCS_PASSTHROUGH, ParserAction.IGNORE, ParserState.DCS_PASSTHROUGH);\n  table.addMany([0x1b, 0x9c, 0x18, 0x1a], ParserState.DCS_PASSTHROUGH, ParserAction.DCS_UNHOOK, ParserState.GROUND);\n  // special handling of unicode chars\n  table.add(NON_ASCII_PRINTABLE, ParserState.GROUND, ParserAction.PRINT, ParserState.GROUND);\n  table.add(NON_ASCII_PRINTABLE, ParserState.OSC_STRING, ParserAction.OSC_PUT, ParserState.OSC_STRING);\n  table.add(NON_ASCII_PRINTABLE, ParserState.CSI_IGNORE, ParserAction.IGNORE, ParserState.CSI_IGNORE);\n  table.add(NON_ASCII_PRINTABLE, ParserState.DCS_IGNORE, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.add(NON_ASCII_PRINTABLE, ParserState.DCS_PASSTHROUGH, ParserAction.DCS_PUT, ParserState.DCS_PASSTHROUGH);\n  return table;\n})();\n\n\n/**\n * EscapeSequenceParser.\n * This class implements the ANSI/DEC compatible parser described by\n * Paul Williams (https://vt100.net/emu/dec_ansi_parser).\n *\n * To implement custom ANSI compliant escape sequences it is not needed to\n * alter this parser, instead consider registering a custom handler.\n * For non ANSI compliant sequences change the transition table with\n * the optional `transitions` constructor argument and\n * reimplement the `parse` method.\n *\n * This parser is currently hardcoded to operate in ZDM (Zero Default Mode)\n * as suggested by the original parser, thus empty parameters are set to 0.\n * This this is not in line with the latest ECMA-48 specification\n * (ZDM was part of the early specs and got completely removed later on).\n *\n * Other than the original parser from vt100.net this parser supports\n * sub parameters in digital parameters separated by colons. Empty sub parameters\n * are set to -1 (no ZDM for sub parameters).\n *\n * About prefix and intermediate bytes:\n * This parser follows the assumptions of the vt100.net parser with these restrictions:\n * - only one prefix byte is allowed as first parameter byte, byte range 0x3c .. 0x3f\n * - max. two intermediates are respected, byte range 0x20 .. 0x2f\n * Note that this is not in line with ECMA-48 which does not limit either of those.\n * Furthermore ECMA-48 allows the prefix byte range at any param byte position. Currently\n * there are no known sequences that follow the broader definition of the specification.\n *\n * TODO: implement error recovery hook via error handler return values\n */\nexport class EscapeSequenceParser extends Disposable implements IEscapeSequenceParser {\n  public initialState: number;\n  public currentState: number;\n  public precedingCodepoint: number;\n\n  // buffers over several parse calls\n  protected _params: Params;\n  protected _collect: number;\n\n  // handler lookup containers\n  protected _printHandler: PrintHandlerType;\n  protected _executeHandlers: { [flag: number]: ExecuteHandlerType };\n  protected _csiHandlers: IHandlerCollection<CsiHandlerType>;\n  protected _escHandlers: IHandlerCollection<EscHandlerType>;\n  protected _oscParser: IOscParser;\n  protected _dcsParser: IDcsParser;\n  protected _errorHandler: (state: IParsingState) => IParsingState;\n\n  // fallback handlers\n  protected _printHandlerFb: PrintFallbackHandlerType;\n  protected _executeHandlerFb: ExecuteFallbackHandlerType;\n  protected _csiHandlerFb: CsiFallbackHandlerType;\n  protected _escHandlerFb: EscFallbackHandlerType;\n  protected _errorHandlerFb: (state: IParsingState) => IParsingState;\n\n  // parser stack save for async handler support\n  protected _parseStack: IParserStackState = {\n    state: ParserStackType.NONE,\n    handlers: [],\n    handlerPos: 0,\n    transition: 0,\n    chunkPos: 0\n  };\n\n  constructor(\n    protected readonly _transitions: TransitionTable = VT500_TRANSITION_TABLE\n  ) {\n    super();\n\n    this.initialState = ParserState.GROUND;\n    this.currentState = this.initialState;\n    this._params = new Params(); // defaults to 32 storable params/subparams\n    this._params.addParam(0);    // ZDM\n    this._collect = 0;\n    this.precedingCodepoint = 0;\n\n    // set default fallback handlers and handler lookup containers\n    this._printHandlerFb = (data, start, end): void => { };\n    this._executeHandlerFb = (code: number): void => { };\n    this._csiHandlerFb = (ident: number, params: IParams): void => { };\n    this._escHandlerFb = (ident: number): void => { };\n    this._errorHandlerFb = (state: IParsingState): IParsingState => state;\n    this._printHandler = this._printHandlerFb;\n    this._executeHandlers = Object.create(null);\n    this._csiHandlers = Object.create(null);\n    this._escHandlers = Object.create(null);\n    this._oscParser = new OscParser();\n    this._dcsParser = new DcsParser();\n    this._errorHandler = this._errorHandlerFb;\n\n    // swallow 7bit ST (ESC+\\)\n    this.registerEscHandler({ final: '\\\\' }, () => true);\n  }\n\n  protected _identifier(id: IFunctionIdentifier, finalRange: number[] = [0x40, 0x7e]): number {\n    let res = 0;\n    if (id.prefix) {\n      if (id.prefix.length > 1) {\n        throw new Error('only one byte as prefix supported');\n      }\n      res = id.prefix.charCodeAt(0);\n      if (res && 0x3c > res || res > 0x3f) {\n        throw new Error('prefix must be in range 0x3c .. 0x3f');\n      }\n    }\n    if (id.intermediates) {\n      if (id.intermediates.length > 2) {\n        throw new Error('only two bytes as intermediates are supported');\n      }\n      for (let i = 0; i < id.intermediates.length; ++i) {\n        const intermediate = id.intermediates.charCodeAt(i);\n        if (0x20 > intermediate || intermediate > 0x2f) {\n          throw new Error('intermediate must be in range 0x20 .. 0x2f');\n        }\n        res <<= 8;\n        res |= intermediate;\n      }\n    }\n    if (id.final.length !== 1) {\n      throw new Error('final must be a single byte');\n    }\n    const finalCode = id.final.charCodeAt(0);\n    if (finalRange[0] > finalCode || finalCode > finalRange[1]) {\n      throw new Error(`final must be in range ${finalRange[0]} .. ${finalRange[1]}`);\n    }\n    res <<= 8;\n    res |= finalCode;\n\n    return res;\n  }\n\n  public identToString(ident: number): string {\n    const res: string[] = [];\n    while (ident) {\n      res.push(String.fromCharCode(ident & 0xFF));\n      ident >>= 8;\n    }\n    return res.reverse().join('');\n  }\n\n  public dispose(): void {\n    this._csiHandlers = Object.create(null);\n    this._executeHandlers = Object.create(null);\n    this._escHandlers = Object.create(null);\n    this._oscParser.dispose();\n    this._dcsParser.dispose();\n  }\n\n  public setPrintHandler(handler: PrintHandlerType): void {\n    this._printHandler = handler;\n  }\n  public clearPrintHandler(): void {\n    this._printHandler = this._printHandlerFb;\n  }\n\n  public registerEscHandler(id: IFunctionIdentifier, handler: EscHandlerType): IDisposable {\n    const ident = this._identifier(id, [0x30, 0x7e]);\n    if (this._escHandlers[ident] === undefined) {\n      this._escHandlers[ident] = [];\n    }\n    const handlerList = this._escHandlers[ident];\n    handlerList.push(handler);\n    return {\n      dispose: () => {\n        const handlerIndex = handlerList.indexOf(handler);\n        if (handlerIndex !== -1) {\n          handlerList.splice(handlerIndex, 1);\n        }\n      }\n    };\n  }\n  public clearEscHandler(id: IFunctionIdentifier): void {\n    if (this._escHandlers[this._identifier(id, [0x30, 0x7e])]) delete this._escHandlers[this._identifier(id, [0x30, 0x7e])];\n  }\n  public setEscHandlerFallback(handler: EscFallbackHandlerType): void {\n    this._escHandlerFb = handler;\n  }\n\n  public setExecuteHandler(flag: string, handler: ExecuteHandlerType): void {\n    this._executeHandlers[flag.charCodeAt(0)] = handler;\n  }\n  public clearExecuteHandler(flag: string): void {\n    if (this._executeHandlers[flag.charCodeAt(0)]) delete this._executeHandlers[flag.charCodeAt(0)];\n  }\n  public setExecuteHandlerFallback(handler: ExecuteFallbackHandlerType): void {\n    this._executeHandlerFb = handler;\n  }\n\n  public registerCsiHandler(id: IFunctionIdentifier, handler: CsiHandlerType): IDisposable {\n    const ident = this._identifier(id);\n    if (this._csiHandlers[ident] === undefined) {\n      this._csiHandlers[ident] = [];\n    }\n    const handlerList = this._csiHandlers[ident];\n    handlerList.push(handler);\n    return {\n      dispose: () => {\n        const handlerIndex = handlerList.indexOf(handler);\n        if (handlerIndex !== -1) {\n          handlerList.splice(handlerIndex, 1);\n        }\n      }\n    };\n  }\n  public clearCsiHandler(id: IFunctionIdentifier): void {\n    if (this._csiHandlers[this._identifier(id)]) delete this._csiHandlers[this._identifier(id)];\n  }\n  public setCsiHandlerFallback(callback: (ident: number, params: IParams) => void): void {\n    this._csiHandlerFb = callback;\n  }\n\n  public registerDcsHandler(id: IFunctionIdentifier, handler: IDcsHandler): IDisposable {\n    return this._dcsParser.registerHandler(this._identifier(id), handler);\n  }\n  public clearDcsHandler(id: IFunctionIdentifier): void {\n    this._dcsParser.clearHandler(this._identifier(id));\n  }\n  public setDcsHandlerFallback(handler: DcsFallbackHandlerType): void {\n    this._dcsParser.setHandlerFallback(handler);\n  }\n\n  public registerOscHandler(ident: number, handler: IOscHandler): IDisposable {\n    return this._oscParser.registerHandler(ident, handler);\n  }\n  public clearOscHandler(ident: number): void {\n    this._oscParser.clearHandler(ident);\n  }\n  public setOscHandlerFallback(handler: OscFallbackHandlerType): void {\n    this._oscParser.setHandlerFallback(handler);\n  }\n\n  public setErrorHandler(callback: (state: IParsingState) => IParsingState): void {\n    this._errorHandler = callback;\n  }\n  public clearErrorHandler(): void {\n    this._errorHandler = this._errorHandlerFb;\n  }\n\n  /**\n   * Reset parser to initial values.\n   *\n   * This can also be used to lift the improper continuation error condition\n   * when dealing with async handlers. Use this only as a last resort to silence\n   * that error when the terminal has no pending data to be processed. Note that\n   * the interrupted async handler might continue its work in the future messing\n   * up the terminal state even further.\n   */\n  public reset(): void {\n    this.currentState = this.initialState;\n    this._oscParser.reset();\n    this._dcsParser.reset();\n    this._params.reset();\n    this._params.addParam(0); // ZDM\n    this._collect = 0;\n    this.precedingCodepoint = 0;\n    // abort pending continuation from async handler\n    // Here the RESET type indicates, that the next parse call will\n    // ignore any saved stack, instead continues sync with next codepoint from GROUND\n    if (this._parseStack.state !== ParserStackType.NONE) {\n      this._parseStack.state = ParserStackType.RESET;\n      this._parseStack.handlers = []; // also release handlers ref\n    }\n  }\n\n  /**\n   * Async parse support.\n   */\n  protected _preserveStack(\n    state: ParserStackType,\n    handlers: ResumableHandlersType,\n    handlerPos: number,\n    transition: number,\n    chunkPos: number\n  ): void {\n    this._parseStack.state = state;\n    this._parseStack.handlers = handlers;\n    this._parseStack.handlerPos = handlerPos;\n    this._parseStack.transition = transition;\n    this._parseStack.chunkPos = chunkPos;\n  }\n\n  /**\n   * Parse UTF32 codepoints in `data` up to `length`.\n   *\n   * Note: For several actions with high data load the parsing is optimized\n   * by using local read ahead loops with hardcoded conditions to\n   * avoid costly table lookups. Make sure that any change of table values\n   * will be reflected in the loop conditions as well and vice versa.\n   * Affected states/actions:\n   * - GROUND:PRINT\n   * - CSI_PARAM:PARAM\n   * - DCS_PARAM:PARAM\n   * - OSC_STRING:OSC_PUT\n   * - DCS_PASSTHROUGH:DCS_PUT\n   *\n   * Note on asynchronous handler support:\n   * Any handler returning a promise will be treated as asynchronous.\n   * To keep the in-band blocking working for async handlers, `parse` pauses execution,\n   * creates a stack save and returns the promise to the caller.\n   * For proper continuation of the paused state it is important\n   * to await the promise resolving. On resolve the parse must be repeated\n   * with the same chunk of data and the resolved value in `promiseResult`\n   * until no promise is returned.\n   *\n   * Important: With only sync handlers defined, parsing is completely synchronous as well.\n   * As soon as an async handler is involved, synchronous parsing is not possible anymore.\n   *\n   * Boilerplate for proper parsing of multiple chunks with async handlers:\n   *\n   * ```typescript\n   * async function parseMultipleChunks(chunks: Uint32Array[]): Promise<void> {\n   *   for (const chunk of chunks) {\n   *     let result: void | Promise<boolean>;\n   *     let prev: boolean | undefined;\n   *     while (result = parser.parse(chunk, chunk.length, prev)) {\n   *       prev = await result;\n   *     }\n   *   }\n   *   // finished parsing all chunks...\n   * }\n   * ```\n   */\n  public parse(data: Uint32Array, length: number, promiseResult?: boolean): void | Promise<boolean> {\n    let code = 0;\n    let transition = 0;\n    let start = 0;\n    let handlerResult: void | boolean | Promise<boolean>;\n\n    // resume from async handler\n    if (this._parseStack.state) {\n      // allow sync parser reset even in continuation mode\n      // Note: can be used to recover parser from improper continuation error below\n      if (this._parseStack.state === ParserStackType.RESET) {\n        this._parseStack.state = ParserStackType.NONE;\n        start = this._parseStack.chunkPos + 1; // continue with next codepoint in GROUND\n      } else {\n        if (promiseResult === undefined || this._parseStack.state === ParserStackType.FAIL) {\n          /**\n           * Reject further parsing on improper continuation after pausing.\n           * This is a really bad condition with screwed up execution order and prolly messed up\n           * terminal state, therefore we exit hard with an exception and reject any further parsing.\n           *\n           * Note: With `Terminal.write` usage this exception should never occur, as the top level\n           * calls are guaranteed to handle async conditions properly. If you ever encounter this\n           * exception in your terminal integration it indicates, that you injected data chunks to\n           * `InputHandler.parse` or `EscapeSequenceParser.parse` synchronously without waiting for\n           * continuation of a running async handler.\n           *\n           * It is possible to get rid of this error by calling `reset`. But dont rely on that,\n           * as the pending async handler still might mess up the terminal later. Instead fix the faulty\n           * async handling, so this error will not be thrown anymore.\n           */\n          this._parseStack.state = ParserStackType.FAIL;\n          throw new Error('improper continuation due to previous async handler, giving up parsing');\n        }\n\n        // we have to resume the old handler loop if:\n        // - return value of the promise was `false`\n        // - handlers are not exhausted yet\n        const handlers = this._parseStack.handlers;\n        let handlerPos = this._parseStack.handlerPos - 1;\n        switch (this._parseStack.state) {\n          case ParserStackType.CSI:\n            if (promiseResult === false && handlerPos > -1) {\n              for (; handlerPos >= 0; handlerPos--) {\n                handlerResult = (handlers as CsiHandlerType[])[handlerPos](this._params);\n                if (handlerResult === true) {\n                  break;\n                } else if (handlerResult instanceof Promise) {\n                  this._parseStack.handlerPos = handlerPos;\n                  return handlerResult;\n                }\n              }\n            }\n            this._parseStack.handlers = [];\n            break;\n          case ParserStackType.ESC:\n            if (promiseResult === false && handlerPos > -1) {\n              for (; handlerPos >= 0; handlerPos--) {\n                handlerResult = (handlers as EscHandlerType[])[handlerPos]();\n                if (handlerResult === true) {\n                  break;\n                } else if (handlerResult instanceof Promise) {\n                  this._parseStack.handlerPos = handlerPos;\n                  return handlerResult;\n                }\n              }\n            }\n            this._parseStack.handlers = [];\n            break;\n          case ParserStackType.DCS:\n            code = data[this._parseStack.chunkPos];\n            handlerResult = this._dcsParser.unhook(code !== 0x18 && code !== 0x1a, promiseResult);\n            if (handlerResult) {\n              return handlerResult;\n            }\n            if (code === 0x1b) this._parseStack.transition |= ParserState.ESCAPE;\n            this._params.reset();\n            this._params.addParam(0); // ZDM\n            this._collect = 0;\n            break;\n          case ParserStackType.OSC:\n            code = data[this._parseStack.chunkPos];\n            handlerResult = this._oscParser.end(code !== 0x18 && code !== 0x1a, promiseResult);\n            if (handlerResult) {\n              return handlerResult;\n            }\n            if (code === 0x1b) this._parseStack.transition |= ParserState.ESCAPE;\n            this._params.reset();\n            this._params.addParam(0); // ZDM\n            this._collect = 0;\n            break;\n        }\n        // cleanup before continuing with the main sync loop\n        this._parseStack.state = ParserStackType.NONE;\n        start = this._parseStack.chunkPos + 1;\n        this.precedingCodepoint = 0;\n        this.currentState = this._parseStack.transition & TableAccess.TRANSITION_STATE_MASK;\n      }\n    }\n\n    // continue with main sync loop\n\n    // process input string\n    for (let i = start; i < length; ++i) {\n      code = data[i];\n\n      // normal transition & action lookup\n      transition = this._transitions.table[this.currentState << TableAccess.INDEX_STATE_SHIFT | (code < 0xa0 ? code : NON_ASCII_PRINTABLE)];\n      switch (transition >> TableAccess.TRANSITION_ACTION_SHIFT) {\n        case ParserAction.PRINT:\n          // read ahead with loop unrolling\n          // Note: 0x20 (SP) is included, 0x7F (DEL) is excluded\n          for (let j = i + 1; ; ++j) {\n            if (j >= length || (code = data[j]) < 0x20 || (code > 0x7e && code < NON_ASCII_PRINTABLE)) {\n              this._printHandler(data, i, j);\n              i = j - 1;\n              break;\n            }\n            if (++j >= length || (code = data[j]) < 0x20 || (code > 0x7e && code < NON_ASCII_PRINTABLE)) {\n              this._printHandler(data, i, j);\n              i = j - 1;\n              break;\n            }\n            if (++j >= length || (code = data[j]) < 0x20 || (code > 0x7e && code < NON_ASCII_PRINTABLE)) {\n              this._printHandler(data, i, j);\n              i = j - 1;\n              break;\n            }\n            if (++j >= length || (code = data[j]) < 0x20 || (code > 0x7e && code < NON_ASCII_PRINTABLE)) {\n              this._printHandler(data, i, j);\n              i = j - 1;\n              break;\n            }\n          }\n          break;\n        case ParserAction.EXECUTE:\n          if (this._executeHandlers[code]) this._executeHandlers[code]();\n          else this._executeHandlerFb(code);\n          this.precedingCodepoint = 0;\n          break;\n        case ParserAction.IGNORE:\n          break;\n        case ParserAction.ERROR:\n          const inject: IParsingState = this._errorHandler(\n            {\n              position: i,\n              code,\n              currentState: this.currentState,\n              collect: this._collect,\n              params: this._params,\n              abort: false\n            });\n          if (inject.abort) return;\n          // inject values: currently not implemented\n          break;\n        case ParserAction.CSI_DISPATCH:\n          // Trigger CSI Handler\n          const handlers = this._csiHandlers[this._collect << 8 | code];\n          let j = handlers ? handlers.length - 1 : -1;\n          for (; j >= 0; j--) {\n            // true means success and to stop bubbling\n            // a promise indicates an async handler that needs to finish before progressing\n            handlerResult = handlers[j](this._params);\n            if (handlerResult === true) {\n              break;\n            } else if (handlerResult instanceof Promise) {\n              this._preserveStack(ParserStackType.CSI, handlers, j, transition, i);\n              return handlerResult;\n            }\n          }\n          if (j < 0) {\n            this._csiHandlerFb(this._collect << 8 | code, this._params);\n          }\n          this.precedingCodepoint = 0;\n          break;\n        case ParserAction.PARAM:\n          // inner loop: digits (0x30 - 0x39) and ; (0x3b) and : (0x3a)\n          do {\n            switch (code) {\n              case 0x3b:\n                this._params.addParam(0);  // ZDM\n                break;\n              case 0x3a:\n                this._params.addSubParam(-1);\n                break;\n              default:  // 0x30 - 0x39\n                this._params.addDigit(code - 48);\n            }\n          } while (++i < length && (code = data[i]) > 0x2f && code < 0x3c);\n          i--;\n          break;\n        case ParserAction.COLLECT:\n          this._collect <<= 8;\n          this._collect |= code;\n          break;\n        case ParserAction.ESC_DISPATCH:\n          const handlersEsc = this._escHandlers[this._collect << 8 | code];\n          let jj = handlersEsc ? handlersEsc.length - 1 : -1;\n          for (; jj >= 0; jj--) {\n            // true means success and to stop bubbling\n            // a promise indicates an async handler that needs to finish before progressing\n            handlerResult = handlersEsc[jj]();\n            if (handlerResult === true) {\n              break;\n            } else if (handlerResult instanceof Promise) {\n              this._preserveStack(ParserStackType.ESC, handlersEsc, jj, transition, i);\n              return handlerResult;\n            }\n          }\n          if (jj < 0) {\n            this._escHandlerFb(this._collect << 8 | code);\n          }\n          this.precedingCodepoint = 0;\n          break;\n        case ParserAction.CLEAR:\n          this._params.reset();\n          this._params.addParam(0); // ZDM\n          this._collect = 0;\n          break;\n        case ParserAction.DCS_HOOK:\n          this._dcsParser.hook(this._collect << 8 | code, this._params);\n          break;\n        case ParserAction.DCS_PUT:\n          // inner loop - exit DCS_PUT: 0x18, 0x1a, 0x1b, 0x7f, 0x80 - 0x9f\n          // unhook triggered by: 0x1b, 0x9c (success) and 0x18, 0x1a (abort)\n          for (let j = i + 1; ; ++j) {\n            if (j >= length || (code = data[j]) === 0x18 || code === 0x1a || code === 0x1b || (code > 0x7f && code < NON_ASCII_PRINTABLE)) {\n              this._dcsParser.put(data, i, j);\n              i = j - 1;\n              break;\n            }\n          }\n          break;\n        case ParserAction.DCS_UNHOOK:\n          handlerResult = this._dcsParser.unhook(code !== 0x18 && code !== 0x1a);\n          if (handlerResult) {\n            this._preserveStack(ParserStackType.DCS, [], 0, transition, i);\n            return handlerResult;\n          }\n          if (code === 0x1b) transition |= ParserState.ESCAPE;\n          this._params.reset();\n          this._params.addParam(0); // ZDM\n          this._collect = 0;\n          this.precedingCodepoint = 0;\n          break;\n        case ParserAction.OSC_START:\n          this._oscParser.start();\n          break;\n        case ParserAction.OSC_PUT:\n          // inner loop: 0x20 (SP) included, 0x7F (DEL) included\n          for (let j = i + 1; ; j++) {\n            if (j >= length || (code = data[j]) < 0x20 || (code > 0x7f && code < NON_ASCII_PRINTABLE)) {\n              this._oscParser.put(data, i, j);\n              i = j - 1;\n              break;\n            }\n          }\n          break;\n        case ParserAction.OSC_END:\n          handlerResult = this._oscParser.end(code !== 0x18 && code !== 0x1a);\n          if (handlerResult) {\n            this._preserveStack(ParserStackType.OSC, [], 0, transition, i);\n            return handlerResult;\n          }\n          if (code === 0x1b) transition |= ParserState.ESCAPE;\n          this._params.reset();\n          this._params.addParam(0); // ZDM\n          this._collect = 0;\n          this.precedingCodepoint = 0;\n          break;\n      }\n      this.currentState = transition & TableAccess.TRANSITION_STATE_MASK;\n    }\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IOscHandler, IHandlerCollection, OscFallbackHandlerType, IOscParser, ISubParserStackState } from 'common/parser/Types';\nimport { OscState, PAYLOAD_LIMIT } from 'common/parser/Constants';\nimport { utf32ToString } from 'common/input/TextDecoder';\nimport { IDisposable } from 'common/Types';\n\nconst EMPTY_HANDLERS: IOscHandler[] = [];\n\nexport class OscParser implements IOscParser {\n  private _state = OscState.START;\n  private _active = EMPTY_HANDLERS;\n  private _id = -1;\n  private _handlers: IHandlerCollection<IOscHandler> = Object.create(null);\n  private _handlerFb: OscFallbackHandlerType = () => { };\n  private _stack: ISubParserStackState = {\n    paused: false,\n    loopPosition: 0,\n    fallThrough: false\n  };\n\n  public registerHandler(ident: number, handler: IOscHandler): IDisposable {\n    if (this._handlers[ident] === undefined) {\n      this._handlers[ident] = [];\n    }\n    const handlerList = this._handlers[ident];\n    handlerList.push(handler);\n    return {\n      dispose: () => {\n        const handlerIndex = handlerList.indexOf(handler);\n        if (handlerIndex !== -1) {\n          handlerList.splice(handlerIndex, 1);\n        }\n      }\n    };\n  }\n  public clearHandler(ident: number): void {\n    if (this._handlers[ident]) delete this._handlers[ident];\n  }\n  public setHandlerFallback(handler: OscFallbackHandlerType): void {\n    this._handlerFb = handler;\n  }\n\n  public dispose(): void {\n    this._handlers = Object.create(null);\n    this._handlerFb = () => { };\n    this._active = EMPTY_HANDLERS;\n  }\n\n  public reset(): void {\n    // force cleanup handlers if payload was already sent\n    if (this._state === OscState.PAYLOAD) {\n      for (let j = this._stack.paused ? this._stack.loopPosition - 1 : this._active.length - 1; j >= 0; --j) {\n        this._active[j].end(false);\n      }\n    }\n    this._stack.paused = false;\n    this._active = EMPTY_HANDLERS;\n    this._id = -1;\n    this._state = OscState.START;\n  }\n\n  private _start(): void {\n    this._active = this._handlers[this._id] || EMPTY_HANDLERS;\n    if (!this._active.length) {\n      this._handlerFb(this._id, 'START');\n    } else {\n      for (let j = this._active.length - 1; j >= 0; j--) {\n        this._active[j].start();\n      }\n    }\n  }\n\n  private _put(data: Uint32Array, start: number, end: number): void {\n    if (!this._active.length) {\n      this._handlerFb(this._id, 'PUT', utf32ToString(data, start, end));\n    } else {\n      for (let j = this._active.length - 1; j >= 0; j--) {\n        this._active[j].put(data, start, end);\n      }\n    }\n  }\n\n  public start(): void {\n    // always reset leftover handlers\n    this.reset();\n    this._state = OscState.ID;\n  }\n\n  /**\n   * Put data to current OSC command.\n   * Expects the identifier of the OSC command in the form\n   * OSC id ; payload ST/BEL\n   * Payload chunks are not further processed and get\n   * directly passed to the handlers.\n   */\n  public put(data: Uint32Array, start: number, end: number): void {\n    if (this._state === OscState.ABORT) {\n      return;\n    }\n    if (this._state === OscState.ID) {\n      while (start < end) {\n        const code = data[start++];\n        if (code === 0x3b) {\n          this._state = OscState.PAYLOAD;\n          this._start();\n          break;\n        }\n        if (code < 0x30 || 0x39 < code) {\n          this._state = OscState.ABORT;\n          return;\n        }\n        if (this._id === -1) {\n          this._id = 0;\n        }\n        this._id = this._id * 10 + code - 48;\n      }\n    }\n    if (this._state === OscState.PAYLOAD && end - start > 0) {\n      this._put(data, start, end);\n    }\n  }\n\n  /**\n   * Indicates end of an OSC command.\n   * Whether the OSC got aborted or finished normally\n   * is indicated by `success`.\n   */\n  public end(success: boolean, promiseResult: boolean = true): void | Promise<boolean> {\n    if (this._state === OscState.START) {\n      return;\n    }\n    // do nothing if command was faulty\n    if (this._state !== OscState.ABORT) {\n      // if we are still in ID state and get an early end\n      // means that the command has no payload thus we still have\n      // to announce START and send END right after\n      if (this._state === OscState.ID) {\n        this._start();\n      }\n\n      if (!this._active.length) {\n        this._handlerFb(this._id, 'END', success);\n      } else {\n        let handlerResult: boolean | Promise<boolean> = false;\n        let j = this._active.length - 1;\n        let fallThrough = false;\n        if (this._stack.paused) {\n          j = this._stack.loopPosition - 1;\n          handlerResult = promiseResult;\n          fallThrough = this._stack.fallThrough;\n          this._stack.paused = false;\n        }\n        if (!fallThrough && handlerResult === false) {\n          for (; j >= 0; j--) {\n            handlerResult = this._active[j].end(success);\n            if (handlerResult === true) {\n              break;\n            } else if (handlerResult instanceof Promise) {\n              this._stack.paused = true;\n              this._stack.loopPosition = j;\n              this._stack.fallThrough = false;\n              return handlerResult;\n            }\n          }\n          j--;\n        }\n        // cleanup left over handlers\n        // we always have to call .end for proper cleanup,\n        // here we use `success` to indicate whether a handler should execute\n        for (; j >= 0; j--) {\n          handlerResult = this._active[j].end(false);\n          if (handlerResult instanceof Promise) {\n            this._stack.paused = true;\n            this._stack.loopPosition = j;\n            this._stack.fallThrough = true;\n            return handlerResult;\n          }\n        }\n      }\n\n    }\n    this._active = EMPTY_HANDLERS;\n    this._id = -1;\n    this._state = OscState.START;\n  }\n}\n\n/**\n * Convenient class to allow attaching string based handler functions\n * as OSC handlers.\n */\nexport class OscHandler implements IOscHandler {\n  private _data = '';\n  private _hitLimit: boolean = false;\n\n  constructor(private _handler: (data: string) => boolean | Promise<boolean>) { }\n\n  public start(): void {\n    this._data = '';\n    this._hitLimit = false;\n  }\n\n  public put(data: Uint32Array, start: number, end: number): void {\n    if (this._hitLimit) {\n      return;\n    }\n    this._data += utf32ToString(data, start, end);\n    if (this._data.length > PAYLOAD_LIMIT) {\n      this._data = '';\n      this._hitLimit = true;\n    }\n  }\n\n  public end(success: boolean): boolean | Promise<boolean> {\n    let ret: boolean | Promise<boolean> = false;\n    if (this._hitLimit) {\n      ret = false;\n    } else if (success) {\n      ret = this._handler(this._data);\n      if (ret instanceof Promise) {\n        // need to hold data until `ret` got resolved\n        // dont care for errors, data will be freed anyway on next start\n        return ret.then(res => {\n          this._data = '';\n          this._hitLimit = false;\n          return res;\n        });\n      }\n    }\n    this._data = '';\n    this._hitLimit = false;\n    return ret;\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\nimport { IParams, ParamsArray } from 'common/parser/Types';\n\n// max value supported for a single param/subparam (clamped to positive int32 range)\nconst MAX_VALUE = 0x7FFFFFFF;\n// max allowed subparams for a single sequence (hardcoded limitation)\nconst MAX_SUBPARAMS = 256;\n\n/**\n * Params storage class.\n * This type is used by the parser to accumulate sequence parameters and sub parameters\n * and transmit them to the input handler actions.\n *\n * NOTES:\n *  - params object for action handlers is borrowed, use `.toArray` or `.clone` to get a copy\n *  - never read beyond `params.length - 1` (likely to contain arbitrary data)\n *  - `.getSubParams` returns a borrowed typed array, use `.getSubParamsAll` for cloned sub params\n *  - hardcoded limitations:\n *    - max. value for a single (sub) param is 2^31 - 1 (greater values are clamped to that)\n *    - max. 256 sub params possible\n *    - negative values are not allowed beside -1 (placeholder for default value)\n *\n * About ZDM (Zero Default Mode):\n * ZDM is not orchestrated by this class. If the parser is in ZDM,\n * it should add 0 for empty params, otherwise -1. This does not apply\n * to subparams, empty subparams should always be added with -1.\n */\nexport class Params implements IParams {\n  // params store and length\n  public params: Int32Array;\n  public length: number;\n\n  // sub params store and length\n  protected _subParams: Int32Array;\n  protected _subParamsLength: number;\n\n  // sub params offsets from param: param idx --> [start, end] offset\n  private _subParamsIdx: Uint16Array;\n  private _rejectDigits: boolean;\n  private _rejectSubDigits: boolean;\n  private _digitIsSub: boolean;\n\n  /**\n   * Create a `Params` type from JS array representation.\n   */\n  public static fromArray(values: ParamsArray): Params {\n    const params = new Params();\n    if (!values.length) {\n      return params;\n    }\n    // skip leading sub params\n    for (let i = (Array.isArray(values[0])) ? 1 : 0; i < values.length; ++i) {\n      const value = values[i];\n      if (Array.isArray(value)) {\n        for (let k = 0; k < value.length; ++k) {\n          params.addSubParam(value[k]);\n        }\n      } else {\n        params.addParam(value);\n      }\n    }\n    return params;\n  }\n\n  /**\n   * @param maxLength max length of storable parameters\n   * @param maxSubParamsLength max length of storable sub parameters\n   */\n  constructor(public maxLength: number = 32, public maxSubParamsLength: number = 32) {\n    if (maxSubParamsLength > MAX_SUBPARAMS) {\n      throw new Error('maxSubParamsLength must not be greater than 256');\n    }\n    this.params = new Int32Array(maxLength);\n    this.length = 0;\n    this._subParams = new Int32Array(maxSubParamsLength);\n    this._subParamsLength = 0;\n    this._subParamsIdx = new Uint16Array(maxLength);\n    this._rejectDigits = false;\n    this._rejectSubDigits = false;\n    this._digitIsSub = false;\n  }\n\n  /**\n   * Clone object.\n   */\n  public clone(): Params {\n    const newParams = new Params(this.maxLength, this.maxSubParamsLength);\n    newParams.params.set(this.params);\n    newParams.length = this.length;\n    newParams._subParams.set(this._subParams);\n    newParams._subParamsLength = this._subParamsLength;\n    newParams._subParamsIdx.set(this._subParamsIdx);\n    newParams._rejectDigits = this._rejectDigits;\n    newParams._rejectSubDigits = this._rejectSubDigits;\n    newParams._digitIsSub = this._digitIsSub;\n    return newParams;\n  }\n\n  /**\n   * Get a JS array representation of the current parameters and sub parameters.\n   * The array is structured as follows:\n   *    sequence: \"1;2:3:4;5::6\"\n   *    array   : [1, 2, [3, 4], 5, [-1, 6]]\n   */\n  public toArray(): ParamsArray {\n    const res: ParamsArray = [];\n    for (let i = 0; i < this.length; ++i) {\n      res.push(this.params[i]);\n      const start = this._subParamsIdx[i] >> 8;\n      const end = this._subParamsIdx[i] & 0xFF;\n      if (end - start > 0) {\n        res.push(Array.prototype.slice.call(this._subParams, start, end));\n      }\n    }\n    return res;\n  }\n\n  /**\n   * Reset to initial empty state.\n   */\n  public reset(): void {\n    this.length = 0;\n    this._subParamsLength = 0;\n    this._rejectDigits = false;\n    this._rejectSubDigits = false;\n    this._digitIsSub = false;\n  }\n\n  /**\n   * Add a parameter value.\n   * `Params` only stores up to `maxLength` parameters, any later\n   * parameter will be ignored.\n   * Note: VT devices only stored up to 16 values, xterm seems to\n   * store up to 30.\n   */\n  public addParam(value: number): void {\n    this._digitIsSub = false;\n    if (this.length >= this.maxLength) {\n      this._rejectDigits = true;\n      return;\n    }\n    if (value < -1) {\n      throw new Error('values lesser than -1 are not allowed');\n    }\n    this._subParamsIdx[this.length] = this._subParamsLength << 8 | this._subParamsLength;\n    this.params[this.length++] = value > MAX_VALUE ? MAX_VALUE : value;\n  }\n\n  /**\n   * Add a sub parameter value.\n   * The sub parameter is automatically associated with the last parameter value.\n   * Thus it is not possible to add a subparameter without any parameter added yet.\n   * `Params` only stores up to `subParamsLength` sub parameters, any later\n   * sub parameter will be ignored.\n   */\n  public addSubParam(value: number): void {\n    this._digitIsSub = true;\n    if (!this.length) {\n      return;\n    }\n    if (this._rejectDigits || this._subParamsLength >= this.maxSubParamsLength) {\n      this._rejectSubDigits = true;\n      return;\n    }\n    if (value < -1) {\n      throw new Error('values lesser than -1 are not allowed');\n    }\n    this._subParams[this._subParamsLength++] = value > MAX_VALUE ? MAX_VALUE : value;\n    this._subParamsIdx[this.length - 1]++;\n  }\n\n  /**\n   * Whether parameter at index `idx` has sub parameters.\n   */\n  public hasSubParams(idx: number): boolean {\n    return ((this._subParamsIdx[idx] & 0xFF) - (this._subParamsIdx[idx] >> 8) > 0);\n  }\n\n  /**\n   * Return sub parameters for parameter at index `idx`.\n   * Note: The values are borrowed, thus you need to copy\n   * the values if you need to hold them in nonlocal scope.\n   */\n  public getSubParams(idx: number): Int32Array | null {\n    const start = this._subParamsIdx[idx] >> 8;\n    const end = this._subParamsIdx[idx] & 0xFF;\n    if (end - start > 0) {\n      return this._subParams.subarray(start, end);\n    }\n    return null;\n  }\n\n  /**\n   * Return all sub parameters as {idx: subparams} mapping.\n   * Note: The values are not borrowed.\n   */\n  public getSubParamsAll(): {[idx: number]: Int32Array} {\n    const result: {[idx: number]: Int32Array} = {};\n    for (let i = 0; i < this.length; ++i) {\n      const start = this._subParamsIdx[i] >> 8;\n      const end = this._subParamsIdx[i] & 0xFF;\n      if (end - start > 0) {\n        result[i] = this._subParams.slice(start, end);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Add a single digit value to current parameter.\n   * This is used by the parser to account digits on a char by char basis.\n   */\n  public addDigit(value: number): void {\n    let length;\n    if (this._rejectDigits\n      || !(length = this._digitIsSub ? this._subParamsLength : this.length)\n      || (this._digitIsSub && this._rejectSubDigits)\n    ) {\n      return;\n    }\n\n    const store = this._digitIsSub ? this._subParams : this.params;\n    const cur = store[length - 1];\n    store[length - 1] = ~cur ? Math.min(cur * 10 + value, MAX_VALUE) : value;\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ITerminalAddon, IDisposable, Terminal } from 'xterm';\n\nexport interface ILoadedAddon {\n  instance: ITerminalAddon;\n  dispose: () => void;\n  isDisposed: boolean;\n}\n\nexport class AddonManager implements IDisposable {\n  protected _addons: ILoadedAddon[] = [];\n\n  constructor() {\n  }\n\n  public dispose(): void {\n    for (let i = this._addons.length - 1; i >= 0; i--) {\n      this._addons[i].instance.dispose();\n    }\n  }\n\n  public loadAddon(terminal: Terminal, instance: ITerminalAddon): void {\n    const loadedAddon: ILoadedAddon = {\n      instance,\n      dispose: instance.dispose,\n      isDisposed: false\n    };\n    this._addons.push(loadedAddon);\n    instance.dispose = () => this._wrappedAddonDispose(loadedAddon);\n    instance.activate(terminal as any);\n  }\n\n  private _wrappedAddonDispose(loadedAddon: ILoadedAddon): void {\n    if (loadedAddon.isDisposed) {\n      // Do nothing if already disposed\n      return;\n    }\n    let index = -1;\n    for (let i = 0; i < this._addons.length; i++) {\n      if (this._addons[i] === loadedAddon) {\n        index = i;\n        break;\n      }\n    }\n    if (index === -1) {\n      throw new Error('Could not dispose an addon that has not been loaded');\n    }\n    loadedAddon.isDisposed = true;\n    loadedAddon.dispose.apply(loadedAddon.instance);\n    this._addons.splice(index, 1);\n  }\n}\n","/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBuffer as IBufferApi, IBufferLine as IBufferLineApi, IBufferCell as IBufferCellApi } from 'xterm';\nimport { IBuffer } from 'common/buffer/Types';\nimport { BufferLineApiView } from 'common/public/BufferLineApiView';\nimport { CellData } from 'common/buffer/CellData';\n\nexport class BufferApiView implements IBufferApi {\n  constructor(\n    private _buffer: IBuffer,\n    public readonly type: 'normal' | 'alternate'\n  ) { }\n\n  public init(buffer: IBuffer): BufferApiView {\n    this._buffer = buffer;\n    return this;\n  }\n\n  public get cursorY(): number { return this._buffer.y; }\n  public get cursorX(): number { return this._buffer.x; }\n  public get viewportY(): number { return this._buffer.ydisp; }\n  public get baseY(): number { return this._buffer.ybase; }\n  public get length(): number { return this._buffer.lines.length; }\n  public getLine(y: number): IBufferLineApi | undefined {\n    const line = this._buffer.lines.get(y);\n    if (!line) {\n      return undefined;\n    }\n    return new BufferLineApiView(line);\n  }\n  public getNullCell(): IBufferCellApi { return new CellData(); }\n}\n","/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CellData } from 'common/buffer/CellData';\nimport { IBufferLine, ICellData } from 'common/Types';\nimport { IBufferCell as IBufferCellApi, IBufferLine as IBufferLineApi } from 'xterm';\n\nexport class BufferLineApiView implements IBufferLineApi {\n  constructor(private _line: IBufferLine) { }\n\n  public get isWrapped(): boolean { return this._line.isWrapped; }\n  public get length(): number { return this._line.length; }\n  public getCell(x: number, cell?: IBufferCellApi): IBufferCellApi | undefined {\n    if (x < 0 || x >= this._line.length) {\n      return undefined;\n    }\n\n    if (cell) {\n      this._line.loadCell(x, cell as ICellData);\n      return cell;\n    }\n    return this._line.loadCell(x, new CellData());\n  }\n  public translateToString(trimRight?: boolean, startColumn?: number, endColumn?: number): string {\n    return this._line.translateToString(trimRight, startColumn, endColumn);\n  }\n}\n","/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBuffer as IBufferApi, IBufferNamespace as IBufferNamespaceApi } from 'xterm';\nimport { BufferApiView } from 'common/public/BufferApiView';\nimport { IEvent, EventEmitter } from 'common/EventEmitter';\nimport { ICoreTerminal } from 'common/Types';\n\nexport class BufferNamespaceApi implements IBufferNamespaceApi {\n  private _normal: BufferApiView;\n  private _alternate: BufferApiView;\n  private _onBufferChange = new EventEmitter<IBufferApi>();\n  public get onBufferChange(): IEvent<IBufferApi> { return this._onBufferChange.event; }\n\n  constructor(private _core: ICoreTerminal) {\n    this._normal = new BufferApiView(this._core.buffers.normal, 'normal');\n    this._alternate = new BufferApiView(this._core.buffers.alt, 'alternate');\n    this._core.buffers.onBufferActivate(() => this._onBufferChange.fire(this.active));\n  }\n  public get active(): IBufferApi {\n    if (this._core.buffers.active === this._core.buffers.normal) { return this.normal; }\n    if (this._core.buffers.active === this._core.buffers.alt) { return this.alternate; }\n    throw new Error('Active buffer is neither normal nor alternate');\n  }\n  public get normal(): IBufferApi {\n    return this._normal.init(this._core.buffers.normal);\n  }\n  public get alternate(): IBufferApi {\n    return this._alternate.init(this._core.buffers.alt);\n  }\n}\n","/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IParams } from 'common/parser/Types';\nimport { IDisposable, IFunctionIdentifier, IParser } from 'xterm';\nimport { ICoreTerminal } from 'common/Types';\n\nexport class ParserApi implements IParser {\n  constructor(private _core: ICoreTerminal) { }\n\n  public registerCsiHandler(id: IFunctionIdentifier, callback: (params: (number | number[])[]) => boolean | Promise<boolean>): IDisposable {\n    return this._core.registerCsiHandler(id, (params: IParams) => callback(params.toArray()));\n  }\n  public addCsiHandler(id: IFunctionIdentifier, callback: (params: (number | number[])[]) => boolean | Promise<boolean>): IDisposable {\n    return this.registerCsiHandler(id, callback);\n  }\n  public registerDcsHandler(id: IFunctionIdentifier, callback: (data: string, param: (number | number[])[]) => boolean | Promise<boolean>): IDisposable {\n    return this._core.registerDcsHandler(id, (data: string, params: IParams) => callback(data, params.toArray()));\n  }\n  public addDcsHandler(id: IFunctionIdentifier, callback: (data: string, param: (number | number[])[]) => boolean | Promise<boolean>): IDisposable {\n    return this.registerDcsHandler(id, callback);\n  }\n  public registerEscHandler(id: IFunctionIdentifier, handler: () => boolean | Promise<boolean>): IDisposable {\n    return this._core.registerEscHandler(id, handler);\n  }\n  public addEscHandler(id: IFunctionIdentifier, handler: () => boolean | Promise<boolean>): IDisposable {\n    return this.registerEscHandler(id, handler);\n  }\n  public registerOscHandler(ident: number, callback: (data: string) => boolean | Promise<boolean>): IDisposable {\n    return this._core.registerOscHandler(ident, callback);\n  }\n  public addOscHandler(ident: number, callback: (data: string) => boolean | Promise<boolean>): IDisposable {\n    return this.registerOscHandler(ident, callback);\n  }\n}\n","/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICoreTerminal } from 'common/Types';\nimport { IUnicodeHandling, IUnicodeVersionProvider } from 'xterm';\n\nexport class UnicodeApi implements IUnicodeHandling {\n  constructor(private _core: ICoreTerminal) { }\n\n  public register(provider: IUnicodeVersionProvider): void {\n    this._core.unicodeService.register(provider);\n  }\n\n  public get versions(): string[] {\n    return this._core.unicodeService.versions;\n  }\n\n  public get activeVersion(): string {\n    return this._core.unicodeService.activeVersion;\n  }\n\n  public set activeVersion(version: string) {\n    this._core.unicodeService.activeVersion = version;\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBufferService, IOptionsService } from 'common/services/Services';\nimport { BufferSet } from 'common/buffer/BufferSet';\nimport { IBufferSet, IBuffer } from 'common/buffer/Types';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { Disposable } from 'common/Lifecycle';\nimport { IAttributeData, IBufferLine, ScrollSource } from 'common/Types';\n\nexport const MINIMUM_COLS = 2; // Less than 2 can mess with wide chars\nexport const MINIMUM_ROWS = 1;\n\nexport class BufferService extends Disposable implements IBufferService {\n  public serviceBrand: any;\n\n  public cols: number;\n  public rows: number;\n  public buffers: IBufferSet;\n  /** Whether the user is scrolling (locks the scroll position) */\n  public isUserScrolling: boolean = false;\n\n  private _onResize = new EventEmitter<{ cols: number, rows: number }>();\n  public get onResize(): IEvent<{ cols: number, rows: number }> { return this._onResize.event; }\n  private _onScroll = new EventEmitter<number>();\n  public get onScroll(): IEvent<number> { return this._onScroll.event; }\n\n  public get buffer(): IBuffer { return this.buffers.active; }\n\n  /** An IBufferline to clone/copy from for new blank lines */\n  private _cachedBlankLine: IBufferLine | undefined;\n\n  constructor(\n    @IOptionsService private _optionsService: IOptionsService\n  ) {\n    super();\n    this.cols = Math.max(_optionsService.rawOptions.cols || 0, MINIMUM_COLS);\n    this.rows = Math.max(_optionsService.rawOptions.rows || 0, MINIMUM_ROWS);\n    this.buffers = new BufferSet(_optionsService, this);\n  }\n\n  public dispose(): void {\n    super.dispose();\n    this.buffers.dispose();\n  }\n\n  public resize(cols: number, rows: number): void {\n    this.cols = cols;\n    this.rows = rows;\n    this.buffers.resize(cols, rows);\n    this.buffers.setupTabStops(this.cols);\n    this._onResize.fire({ cols, rows });\n  }\n\n  public reset(): void {\n    this.buffers.reset();\n    this.isUserScrolling = false;\n  }\n\n  /**\n   * Scroll the terminal down 1 row, creating a blank line.\n   * @param isWrapped Whether the new line is wrapped from the previous line.\n   */\n  public scroll(eraseAttr: IAttributeData, isWrapped: boolean = false): void {\n    const buffer = this.buffer;\n\n    let newLine: IBufferLine | undefined;\n    newLine = this._cachedBlankLine;\n    if (!newLine || newLine.length !== this.cols || newLine.getFg(0) !== eraseAttr.fg || newLine.getBg(0) !== eraseAttr.bg) {\n      newLine = buffer.getBlankLine(eraseAttr, isWrapped);\n      this._cachedBlankLine = newLine;\n    }\n    newLine.isWrapped = isWrapped;\n\n    const topRow = buffer.ybase + buffer.scrollTop;\n    const bottomRow = buffer.ybase + buffer.scrollBottom;\n\n    if (buffer.scrollTop === 0) {\n      // Determine whether the buffer is going to be trimmed after insertion.\n      const willBufferBeTrimmed = buffer.lines.isFull;\n\n      // Insert the line using the fastest method\n      if (bottomRow === buffer.lines.length - 1) {\n        if (willBufferBeTrimmed) {\n          buffer.lines.recycle().copyFrom(newLine);\n        } else {\n          buffer.lines.push(newLine.clone());\n        }\n      } else {\n        buffer.lines.splice(bottomRow + 1, 0, newLine.clone());\n      }\n\n      // Only adjust ybase and ydisp when the buffer is not trimmed\n      if (!willBufferBeTrimmed) {\n        buffer.ybase++;\n        // Only scroll the ydisp with ybase if the user has not scrolled up\n        if (!this.isUserScrolling) {\n          buffer.ydisp++;\n        }\n      } else {\n        // When the buffer is full and the user has scrolled up, keep the text\n        // stable unless ydisp is right at the top\n        if (this.isUserScrolling) {\n          buffer.ydisp = Math.max(buffer.ydisp - 1, 0);\n        }\n      }\n    } else {\n      // scrollTop is non-zero which means no line will be going to the\n      // scrollback, instead we can just shift them in-place.\n      const scrollRegionHeight = bottomRow - topRow + 1 /* as it's zero-based */;\n      buffer.lines.shiftElements(topRow + 1, scrollRegionHeight - 1, -1);\n      buffer.lines.set(bottomRow, newLine.clone());\n    }\n\n    // Move the viewport to the bottom of the buffer unless the user is\n    // scrolling.\n    if (!this.isUserScrolling) {\n      buffer.ydisp = buffer.ybase;\n    }\n\n    this._onScroll.fire(buffer.ydisp);\n  }\n\n  /**\n   * Scroll the display of the terminal\n   * @param disp The number of lines to scroll down (negative scroll up).\n   * @param suppressScrollEvent Don't emit the scroll event as scrollLines. This is used\n   * to avoid unwanted events being handled by the viewport when the event was triggered from the\n   * viewport originally.\n   */\n  public scrollLines(disp: number, suppressScrollEvent?: boolean, source?: ScrollSource): void {\n    const buffer = this.buffer;\n    if (disp < 0) {\n      if (buffer.ydisp === 0) {\n        return;\n      }\n      this.isUserScrolling = true;\n    } else if (disp + buffer.ydisp >= buffer.ybase) {\n      this.isUserScrolling = false;\n    }\n\n    const oldYdisp = buffer.ydisp;\n    buffer.ydisp = Math.max(Math.min(buffer.ydisp + disp, buffer.ybase), 0);\n\n    // No change occurred, don't trigger scroll/refresh\n    if (oldYdisp === buffer.ydisp) {\n      return;\n    }\n\n    if (!suppressScrollEvent) {\n      this._onScroll.fire(buffer.ydisp);\n    }\n  }\n\n  /**\n   * Scroll the display of the terminal by a number of pages.\n   * @param pageCount The number of pages to scroll (negative scrolls up).\n   */\n  public scrollPages(pageCount: number): void {\n    this.scrollLines(pageCount * (this.rows - 1));\n  }\n\n  /**\n   * Scrolls the display of the terminal to the top.\n   */\n  public scrollToTop(): void {\n    this.scrollLines(-this.buffer.ydisp);\n  }\n\n  /**\n   * Scrolls the display of the terminal to the bottom.\n   */\n  public scrollToBottom(): void {\n    this.scrollLines(this.buffer.ybase - this.buffer.ydisp);\n  }\n\n  public scrollToLine(line: number): void {\n    const scrollAmount = line - this.buffer.ydisp;\n    if (scrollAmount !== 0) {\n      this.scrollLines(scrollAmount);\n    }\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICharsetService } from 'common/services/Services';\nimport { ICharset } from 'common/Types';\n\nexport class CharsetService implements ICharsetService {\n  public serviceBrand: any;\n\n  public charset: ICharset | undefined;\n  public glevel: number = 0;\n\n  private _charsets: (ICharset | undefined)[] = [];\n\n  public reset(): void {\n    this.charset = undefined;\n    this._charsets = [];\n    this.glevel = 0;\n  }\n\n  public setgLevel(g: number): void {\n    this.glevel = g;\n    this.charset = this._charsets[g];\n  }\n\n  public setgCharset(g: number, charset: ICharset | undefined): void {\n    this._charsets[g] = charset;\n    if (this.glevel === g) {\n      this.charset = charset;\n    }\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\nimport { IBufferService, ICoreService, ICoreMouseService } from 'common/services/Services';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { ICoreMouseProtocol, ICoreMouseEvent, CoreMouseEncoding, CoreMouseEventType, CoreMouseButton, CoreMouseAction } from 'common/Types';\n\n/**\n * Supported default protocols.\n */\nconst DEFAULT_PROTOCOLS: {[key: string]: ICoreMouseProtocol} = {\n  /**\n   * NONE\n   * Events: none\n   * Modifiers: none\n   */\n  NONE: {\n    events: CoreMouseEventType.NONE,\n    restrict: () => false\n  },\n  /**\n   * X10\n   * Events: mousedown\n   * Modifiers: none\n   */\n  X10: {\n    events: CoreMouseEventType.DOWN,\n    restrict: (e: ICoreMouseEvent) => {\n      // no wheel, no move, no up\n      if (e.button === CoreMouseButton.WHEEL || e.action !== CoreMouseAction.DOWN) {\n        return false;\n      }\n      // no modifiers\n      e.ctrl = false;\n      e.alt = false;\n      e.shift = false;\n      return true;\n    }\n  },\n  /**\n   * VT200\n   * Events: mousedown / mouseup / wheel\n   * Modifiers: all\n   */\n  VT200: {\n    events: CoreMouseEventType.DOWN | CoreMouseEventType.UP | CoreMouseEventType.WHEEL,\n    restrict: (e: ICoreMouseEvent) => {\n      // no move\n      if (e.action === CoreMouseAction.MOVE) {\n        return false;\n      }\n      return true;\n    }\n  },\n  /**\n   * DRAG\n   * Events: mousedown / mouseup / wheel / mousedrag\n   * Modifiers: all\n   */\n  DRAG: {\n    events: CoreMouseEventType.DOWN | CoreMouseEventType.UP | CoreMouseEventType.WHEEL | CoreMouseEventType.DRAG,\n    restrict: (e: ICoreMouseEvent) => {\n      // no move without button\n      if (e.action === CoreMouseAction.MOVE && e.button === CoreMouseButton.NONE) {\n        return false;\n      }\n      return true;\n    }\n  },\n  /**\n   * ANY\n   * Events: all mouse related events\n   * Modifiers: all\n   */\n  ANY: {\n    events:\n      CoreMouseEventType.DOWN | CoreMouseEventType.UP | CoreMouseEventType.WHEEL\n      | CoreMouseEventType.DRAG | CoreMouseEventType.MOVE,\n    restrict: (e: ICoreMouseEvent) => true\n  }\n};\n\nconst enum Modifiers {\n  SHIFT = 4,\n  ALT = 8,\n  CTRL = 16\n}\n\n// helper for default encoders to generate the event code.\nfunction eventCode(e: ICoreMouseEvent, isSGR: boolean): number {\n  let code = (e.ctrl ? Modifiers.CTRL : 0) | (e.shift ? Modifiers.SHIFT : 0) | (e.alt ? Modifiers.ALT : 0);\n  if (e.button === CoreMouseButton.WHEEL) {\n    code |= 64;\n    code |= e.action;\n  } else {\n    code |= e.button & 3;\n    if (e.button & 4) {\n      code |= 64;\n    }\n    if (e.button & 8) {\n      code |= 128;\n    }\n    if (e.action === CoreMouseAction.MOVE) {\n      code |= CoreMouseAction.MOVE;\n    } else if (e.action === CoreMouseAction.UP && !isSGR) {\n      // special case - only SGR can report button on release\n      // all others have to go with NONE\n      code |= CoreMouseButton.NONE;\n    }\n  }\n  return code;\n}\n\nconst S = String.fromCharCode;\n\n/**\n * Supported default encodings.\n */\nconst DEFAULT_ENCODINGS: {[key: string]: CoreMouseEncoding} = {\n  /**\n   * DEFAULT - CSI M Pb Px Py\n   * Single byte encoding for coords and event code.\n   * Can encode values up to 223 (1-based).\n   */\n  DEFAULT: (e: ICoreMouseEvent) => {\n    const params = [eventCode(e, false) + 32, e.col + 32, e.row + 32];\n    // supress mouse report if we exceed addressible range\n    // Note this is handled differently by emulators\n    // - xterm:         sends 0;0 coords instead\n    // - vte, konsole:  no report\n    if (params[0] > 255 || params[1] > 255 || params[2] > 255) {\n      return '';\n    }\n    return `\\x1b[M${S(params[0])}${S(params[1])}${S(params[2])}`;\n  },\n  /**\n   * SGR - CSI < Pb ; Px ; Py M|m\n   * No encoding limitation.\n   * Can report button on release and works with a well formed sequence.\n   */\n  SGR: (e: ICoreMouseEvent) => {\n    const final = (e.action === CoreMouseAction.UP && e.button !== CoreMouseButton.WHEEL) ? 'm' : 'M';\n    return `\\x1b[<${eventCode(e, true)};${e.col};${e.row}${final}`;\n  }\n};\n\n/**\n * CoreMouseService\n *\n * Provides mouse tracking reports with different protocols and encodings.\n *  - protocols: NONE (default), X10, VT200, DRAG, ANY\n *  - encodings: DEFAULT, SGR (UTF8, URXVT removed in #2507)\n *\n * Custom protocols/encodings can be added by `addProtocol` / `addEncoding`.\n * To activate a protocol/encoding, set `activeProtocol` / `activeEncoding`.\n * Switching a protocol will send a notification event `onProtocolChange`\n * with a list of needed events to track.\n *\n * The service handles the mouse tracking state and decides whether to send\n * a tracking report to the backend based on protocol and encoding limitations.\n * To send a mouse event call `triggerMouseEvent`.\n */\nexport class CoreMouseService implements ICoreMouseService {\n  private _protocols: {[name: string]: ICoreMouseProtocol} = {};\n  private _encodings: {[name: string]: CoreMouseEncoding} = {};\n  private _activeProtocol: string = '';\n  private _activeEncoding: string = '';\n  private _onProtocolChange = new EventEmitter<CoreMouseEventType>();\n  private _lastEvent: ICoreMouseEvent | null = null;\n\n  constructor(\n    @IBufferService private readonly _bufferService: IBufferService,\n    @ICoreService private readonly _coreService: ICoreService\n  ) {\n    // register default protocols and encodings\n    for (const name of Object.keys(DEFAULT_PROTOCOLS)) this.addProtocol(name, DEFAULT_PROTOCOLS[name]);\n    for (const name of Object.keys(DEFAULT_ENCODINGS)) this.addEncoding(name, DEFAULT_ENCODINGS[name]);\n    // call reset to set defaults\n    this.reset();\n  }\n\n  public addProtocol(name: string, protocol: ICoreMouseProtocol): void {\n    this._protocols[name] = protocol;\n  }\n\n  public addEncoding(name: string, encoding: CoreMouseEncoding): void {\n    this._encodings[name] = encoding;\n  }\n\n  public get activeProtocol(): string {\n    return this._activeProtocol;\n  }\n\n  public get areMouseEventsActive(): boolean {\n    return this._protocols[this._activeProtocol].events !== 0;\n  }\n\n  public set activeProtocol(name: string) {\n    if (!this._protocols[name]) {\n      throw new Error(`unknown protocol \"${name}\"`);\n    }\n    this._activeProtocol = name;\n    this._onProtocolChange.fire(this._protocols[name].events);\n  }\n\n  public get activeEncoding(): string {\n    return this._activeEncoding;\n  }\n\n  public set activeEncoding(name: string) {\n    if (!this._encodings[name]) {\n      throw new Error(`unknown encoding \"${name}\"`);\n    }\n    this._activeEncoding = name;\n  }\n\n  public reset(): void {\n    this.activeProtocol = 'NONE';\n    this.activeEncoding = 'DEFAULT';\n    this._lastEvent = null;\n  }\n\n  /**\n   * Event to announce changes in mouse tracking.\n   */\n  public get onProtocolChange(): IEvent<CoreMouseEventType> {\n    return this._onProtocolChange.event;\n  }\n\n  /**\n   * Triggers a mouse event to be sent.\n   *\n   * Returns true if the event passed all protocol restrictions and a report\n   * was sent, otherwise false. The return value may be used to decide whether\n   * the default event action in the bowser component should be omitted.\n   *\n   * Note: The method will change values of the given event object\n   * to fullfill protocol and encoding restrictions.\n   */\n  public triggerMouseEvent(e: ICoreMouseEvent): boolean {\n    // range check for col/row\n    if (e.col < 0 || e.col >= this._bufferService.cols\n        || e.row < 0 || e.row >= this._bufferService.rows) {\n      return false;\n    }\n\n    // filter nonsense combinations of button + action\n    if (e.button === CoreMouseButton.WHEEL && e.action === CoreMouseAction.MOVE) {\n      return false;\n    }\n    if (e.button === CoreMouseButton.NONE && e.action !== CoreMouseAction.MOVE) {\n      return false;\n    }\n    if (e.button !== CoreMouseButton.WHEEL && (e.action === CoreMouseAction.LEFT || e.action === CoreMouseAction.RIGHT)) {\n      return false;\n    }\n\n    // report 1-based coords\n    e.col++;\n    e.row++;\n\n    // debounce move at grid level\n    if (e.action === CoreMouseAction.MOVE && this._lastEvent && this._compareEvents(this._lastEvent, e)) {\n      return false;\n    }\n\n    // apply protocol restrictions\n    if (!this._protocols[this._activeProtocol].restrict(e)) {\n      return false;\n    }\n\n    // encode report and send\n    const report = this._encodings[this._activeEncoding](e);\n    if (report) {\n      // always send DEFAULT as binary data\n      if (this._activeEncoding === 'DEFAULT') {\n        this._coreService.triggerBinaryEvent(report);\n      } else {\n        this._coreService.triggerDataEvent(report, true);\n      }\n    }\n\n    this._lastEvent = e;\n\n    return true;\n  }\n\n  public explainEvents(events: CoreMouseEventType): {[event: string]: boolean} {\n    return {\n      down: !!(events & CoreMouseEventType.DOWN),\n      up: !!(events & CoreMouseEventType.UP),\n      drag: !!(events & CoreMouseEventType.DRAG),\n      move: !!(events & CoreMouseEventType.MOVE),\n      wheel: !!(events & CoreMouseEventType.WHEEL)\n    };\n  }\n\n  private _compareEvents(e1: ICoreMouseEvent, e2: ICoreMouseEvent): boolean {\n    if (e1.col !== e2.col) return false;\n    if (e1.row !== e2.row) return false;\n    if (e1.button !== e2.button) return false;\n    if (e1.action !== e2.action) return false;\n    if (e1.ctrl !== e2.ctrl) return false;\n    if (e1.alt !== e2.alt) return false;\n    if (e1.shift !== e2.shift) return false;\n    return true;\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICoreService, ILogService, IOptionsService, IBufferService } from 'common/services/Services';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { IDecPrivateModes, IModes } from 'common/Types';\nimport { clone } from 'common/Clone';\nimport { Disposable } from 'common/Lifecycle';\n\nconst DEFAULT_MODES: IModes = Object.freeze({\n  insertMode: false\n});\n\nconst DEFAULT_DEC_PRIVATE_MODES: IDecPrivateModes = Object.freeze({\n  applicationCursorKeys: false,\n  applicationKeypad: false,\n  bracketedPasteMode: false,\n  origin: false,\n  reverseWraparound: false,\n  sendFocus: false,\n  wraparound: true // defaults: xterm - true, vt100 - false\n});\n\nexport class CoreService extends Disposable implements ICoreService {\n  public serviceBrand: any;\n\n  public isCursorInitialized: boolean = false;\n  public isCursorHidden: boolean = false;\n  public modes: IModes;\n  public decPrivateModes: IDecPrivateModes;\n\n  // Circular dependency, this must be unset or memory will leak after Terminal.dispose\n  private _scrollToBottom: (() => void) | undefined;\n\n  private _onData = this.register(new EventEmitter<string>());\n  public get onData(): IEvent<string> { return this._onData.event; }\n  private _onUserInput = this.register(new EventEmitter<void>());\n  public get onUserInput(): IEvent<void> { return this._onUserInput.event; }\n  private _onBinary = this.register(new EventEmitter<string>());\n  public get onBinary(): IEvent<string> { return this._onBinary.event; }\n\n  constructor(\n    // TODO: Move this into a service\n    scrollToBottom: () => void,\n    @IBufferService private readonly _bufferService: IBufferService,\n    @ILogService private readonly _logService: ILogService,\n    @IOptionsService private readonly _optionsService: IOptionsService\n  ) {\n    super();\n    this._scrollToBottom = scrollToBottom;\n    this.register({ dispose: () => this._scrollToBottom = undefined });\n    this.modes = clone(DEFAULT_MODES);\n    this.decPrivateModes = clone(DEFAULT_DEC_PRIVATE_MODES);\n  }\n\n  public reset(): void {\n    this.modes = clone(DEFAULT_MODES);\n    this.decPrivateModes = clone(DEFAULT_DEC_PRIVATE_MODES);\n  }\n\n  public triggerDataEvent(data: string, wasUserInput: boolean = false): void {\n    // Prevents all events to pty process if stdin is disabled\n    if (this._optionsService.rawOptions.disableStdin) {\n      return;\n    }\n\n    // Input is being sent to the terminal, the terminal should focus the prompt.\n    const buffer = this._bufferService.buffer;\n    if (buffer.ybase !== buffer.ydisp) {\n      this._scrollToBottom!();\n    }\n\n    // Fire onUserInput so listeners can react as well (eg. clear selection)\n    if (wasUserInput) {\n      this._onUserInput.fire();\n    }\n\n    // Fire onData API\n    this._logService.debug(`sending data \"${data}\"`, () => data.split('').map(e => e.charCodeAt(0)));\n    this._onData.fire(data);\n  }\n\n  public triggerBinaryEvent(data: string): void {\n    if (this._optionsService.rawOptions.disableStdin) {\n      return;\n    }\n    this._logService.debug(`sending binary \"${data}\"`, () => data.split('').map(e => e.charCodeAt(0)));\n    this._onBinary.fire(data);\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBufferService, IDirtyRowService } from 'common/services/Services';\n\nexport class DirtyRowService implements IDirtyRowService {\n  public serviceBrand: any;\n\n  private _start!: number;\n  private _end!: number;\n\n  public get start(): number { return this._start; }\n  public get end(): number { return this._end; }\n\n  constructor(\n    @IBufferService private readonly _bufferService: IBufferService\n  ) {\n    this.clearRange();\n  }\n\n  public clearRange(): void {\n    this._start = this._bufferService.buffer.y;\n    this._end = this._bufferService.buffer.y;\n  }\n\n  public markDirty(y: number): void {\n    if (y < this._start) {\n      this._start = y;\n    } else if (y > this._end) {\n      this._end = y;\n    }\n  }\n\n  public markRangeDirty(y1: number, y2: number): void {\n    if (y1 > y2) {\n      const temp = y1;\n      y1 = y2;\n      y2 = temp;\n    }\n    if (y1 < this._start) {\n      this._start = y1;\n    }\n    if (y2 > this._end) {\n      this._end = y2;\n    }\n  }\n\n  public markAllDirty(): void {\n    this.markRangeDirty(0, this._bufferService.rows - 1);\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n *\n * This was heavily inspired from microsoft/vscode's dependency injection system (MIT).\n */\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IInstantiationService, IServiceIdentifier } from 'common/services/Services';\nimport { getServiceDependencies } from 'common/services/ServiceRegistry';\n\nexport class ServiceCollection {\n\n  private _entries = new Map<IServiceIdentifier<any>, any>();\n\n  constructor(...entries: [IServiceIdentifier<any>, any][]) {\n    for (const [id, service] of entries) {\n      this.set(id, service);\n    }\n  }\n\n  public set<T>(id: IServiceIdentifier<T>, instance: T): T {\n    const result = this._entries.get(id);\n    this._entries.set(id, instance);\n    return result;\n  }\n\n  public forEach(callback: (id: IServiceIdentifier<any>, instance: any) => any): void {\n    this._entries.forEach((value, key) => callback(key, value));\n  }\n\n  public has(id: IServiceIdentifier<any>): boolean {\n    return this._entries.has(id);\n  }\n\n  public get<T>(id: IServiceIdentifier<T>): T | undefined {\n    return this._entries.get(id);\n  }\n}\n\nexport class InstantiationService implements IInstantiationService {\n  public serviceBrand: undefined;\n\n  private readonly _services: ServiceCollection = new ServiceCollection();\n\n  constructor() {\n    this._services.set(IInstantiationService, this);\n  }\n\n  public setService<T>(id: IServiceIdentifier<T>, instance: T): void {\n    this._services.set(id, instance);\n  }\n\n  public getService<T>(id: IServiceIdentifier<T>): T | undefined {\n    return this._services.get(id);\n  }\n\n  public createInstance<T>(ctor: any, ...args: any[]): T {\n    const serviceDependencies = getServiceDependencies(ctor).sort((a, b) => a.index - b.index);\n\n    const serviceArgs: any[] = [];\n    for (const dependency of serviceDependencies) {\n      const service = this._services.get(dependency.id);\n      if (!service) {\n        throw new Error(`[createInstance] ${ctor.name} depends on UNKNOWN service ${dependency.id}.`);\n      }\n      serviceArgs.push(service);\n    }\n\n    const firstServiceArgPos = serviceDependencies.length > 0 ? serviceDependencies[0].index : args.length;\n\n    // check for argument mismatches, adjust static args if needed\n    if (args.length !== firstServiceArgPos) {\n      throw new Error(`[createInstance] First service dependency of ${ctor.name} at position ${firstServiceArgPos + 1} conflicts with ${args.length} static arguments`);\n    }\n\n    // now create the instance\n    return new ctor(...[...args, ...serviceArgs]);\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ILogService, IOptionsService, LogLevelEnum } from 'common/services/Services';\n\ntype LogType = (message?: any, ...optionalParams: any[]) => void;\n\ninterface IConsole {\n  log: LogType;\n  error: LogType;\n  info: LogType;\n  trace: LogType;\n  warn: LogType;\n}\n\n// console is available on both node.js and browser contexts but the common\n// module doesn't depend on them so we need to explicitly declare it.\ndeclare const console: IConsole;\n\nconst optionsKeyToLogLevel: { [key: string]: LogLevelEnum } = {\n  debug: LogLevelEnum.DEBUG,\n  info: LogLevelEnum.INFO,\n  warn: LogLevelEnum.WARN,\n  error: LogLevelEnum.ERROR,\n  off: LogLevelEnum.OFF\n};\n\nconst LOG_PREFIX = 'xterm.js: ';\n\nexport class LogService implements ILogService {\n  public serviceBrand: any;\n\n  public logLevel: LogLevelEnum = LogLevelEnum.OFF;\n\n  constructor(\n    @IOptionsService private readonly _optionsService: IOptionsService\n  ) {\n    this._updateLogLevel();\n    this._optionsService.onOptionChange(key => {\n      if (key === 'logLevel') {\n        this._updateLogLevel();\n      }\n    });\n  }\n\n  private _updateLogLevel(): void {\n    this.logLevel = optionsKeyToLogLevel[this._optionsService.rawOptions.logLevel];\n  }\n\n  private _evalLazyOptionalParams(optionalParams: any[]): void {\n    for (let i = 0; i < optionalParams.length; i++) {\n      if (typeof optionalParams[i] === 'function') {\n        optionalParams[i] = optionalParams[i]();\n      }\n    }\n  }\n\n  private _log(type: LogType, message: string, optionalParams: any[]): void {\n    this._evalLazyOptionalParams(optionalParams);\n    type.call(console, LOG_PREFIX + message, ...optionalParams);\n  }\n\n  public debug(message: string, ...optionalParams: any[]): void {\n    if (this.logLevel <= LogLevelEnum.DEBUG) {\n      this._log(console.log, message, optionalParams);\n    }\n  }\n\n  public info(message: string, ...optionalParams: any[]): void {\n    if (this.logLevel <= LogLevelEnum.INFO) {\n      this._log(console.info, message, optionalParams);\n    }\n  }\n\n  public warn(message: string, ...optionalParams: any[]): void {\n    if (this.logLevel <= LogLevelEnum.WARN) {\n      this._log(console.warn, message, optionalParams);\n    }\n  }\n\n  public error(message: string, ...optionalParams: any[]): void {\n    if (this.logLevel <= LogLevelEnum.ERROR) {\n      this._log(console.error, message, optionalParams);\n    }\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IOptionsService, ITerminalOptions, FontWeight } from 'common/services/Services';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { isMac } from 'common/Platform';\n\n// Source: https://freesound.org/people/altemark/sounds/45759/\n// This sound is released under the Creative Commons Attribution 3.0 Unported\n// (CC BY 3.0) license. It was created by 'altemark'. No modifications have been\n// made, apart from the conversion to base64.\nexport const DEFAULT_BELL_SOUND = 'data:audio/mp3;base64,SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU4LjMyLjEwNAAAAAAAAAAAAAAA//tQxAADB8AhSmxhIIEVCSiJrDCQBTcu3UrAIwUdkRgQbFAZC1CQEwTJ9mjRvBA4UOLD8nKVOWfh+UlK3z/177OXrfOdKl7pyn3Xf//WreyTRUoAWgBgkOAGbZHBgG1OF6zM82DWbZaUmMBptgQhGjsyYqc9ae9XFz280948NMBWInljyzsNRFLPWdnZGWrddDsjK1unuSrVN9jJsK8KuQtQCtMBjCEtImISdNKJOopIpBFpNSMbIHCSRpRR5iakjTiyzLhchUUBwCgyKiweBv/7UsQbg8isVNoMPMjAAAA0gAAABEVFGmgqK////9bP/6XCykxBTUUzLjEwMKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq';\n\nexport const DEFAULT_OPTIONS: Readonly<ITerminalOptions> = {\n  cols: 80,\n  rows: 24,\n  cursorBlink: false,\n  cursorStyle: 'block',\n  cursorWidth: 1,\n  customGlyphs: true,\n  bellSound: DEFAULT_BELL_SOUND,\n  bellStyle: 'none',\n  drawBoldTextInBrightColors: true,\n  fastScrollModifier: 'alt',\n  fastScrollSensitivity: 5,\n  fontFamily: 'courier-new, courier, monospace',\n  fontSize: 15,\n  fontWeight: 'normal',\n  fontWeightBold: 'bold',\n  lineHeight: 1.0,\n  linkTooltipHoverDuration: 500,\n  letterSpacing: 0,\n  logLevel: 'info',\n  scrollback: 1000,\n  scrollSensitivity: 1,\n  screenReaderMode: false,\n  macOptionIsMeta: false,\n  macOptionClickForcesSelection: false,\n  minimumContrastRatio: 1,\n  disableStdin: false,\n  allowProposedApi: true,\n  allowTransparency: false,\n  tabStopWidth: 8,\n  theme: {},\n  rightClickSelectsWord: isMac,\n  rendererType: 'canvas',\n  windowOptions: {},\n  windowsMode: false,\n  wordSeparator: ' ()[]{}\\',\"`',\n  altClickMovesCursor: true,\n  convertEol: false,\n  termName: 'xterm',\n  cancelEvents: false\n};\n\nconst FONT_WEIGHT_OPTIONS: Extract<FontWeight, string>[] = ['normal', 'bold', '100', '200', '300', '400', '500', '600', '700', '800', '900'];\n\nexport class OptionsService implements IOptionsService {\n  public serviceBrand: any;\n\n  public readonly rawOptions: ITerminalOptions;\n  public options: ITerminalOptions;\n\n  private _onOptionChange = new EventEmitter<string>();\n  public get onOptionChange(): IEvent<string> { return this._onOptionChange.event; }\n\n  constructor(options: Partial<ITerminalOptions>) {\n    // set the default value of each option\n    const defaultOptions = { ...DEFAULT_OPTIONS };\n    for (const key in options) {\n      if (key in defaultOptions) {\n        try {\n          const newValue = options[key];\n          defaultOptions[key] = this._sanitizeAndValidateOption(key, newValue);\n        } catch (e) {\n          console.error(e);\n        }\n      }\n    }\n\n    // set up getters and setters for each option\n    this.rawOptions = defaultOptions;\n    this.options = { ... defaultOptions };\n    this._setupOptions();\n  }\n\n  private _setupOptions(): void {\n    const getter = (propName: string): any => {\n      if (!(propName in DEFAULT_OPTIONS)) {\n        throw new Error(`No option with key \"${propName}\"`);\n      }\n      return this.rawOptions[propName];\n    };\n\n    const setter = (propName: string, value: any): void => {\n      if (!(propName in DEFAULT_OPTIONS)) {\n        throw new Error(`No option with key \"${propName}\"`);\n      }\n\n      value = this._sanitizeAndValidateOption(propName, value);\n      // Don't fire an option change event if they didn't change\n      if (this.rawOptions[propName] !== value) {\n        this.rawOptions[propName] = value;\n        this._onOptionChange.fire(propName);\n      }\n    };\n\n    for (const propName in this.rawOptions) {\n      const desc = {\n        get: getter.bind(this, propName),\n        set: setter.bind(this, propName)\n      };\n      Object.defineProperty(this.options, propName, desc);\n    }\n  }\n\n  public setOption(key: string, value: any): void {\n    this.options[key] = value;\n  }\n\n  private _sanitizeAndValidateOption(key: string, value: any): any {\n    switch (key) {\n      case 'bellStyle':\n      case 'cursorStyle':\n      case 'rendererType':\n      case 'wordSeparator':\n        if (!value) {\n          value = DEFAULT_OPTIONS[key];\n        }\n        break;\n      case 'fontWeight':\n      case 'fontWeightBold':\n        if (typeof value === 'number' && 1 <= value && value <= 1000) {\n          // already valid numeric value\n          break;\n        }\n        value = FONT_WEIGHT_OPTIONS.includes(value) ? value : DEFAULT_OPTIONS[key];\n        break;\n      case 'cursorWidth':\n        value = Math.floor(value);\n        // Fall through for bounds check\n      case 'lineHeight':\n      case 'tabStopWidth':\n        if (value < 1) {\n          throw new Error(`${key} cannot be less than 1, value: ${value}`);\n        }\n        break;\n      case 'minimumContrastRatio':\n        value = Math.max(1, Math.min(21, Math.round(value * 10) / 10));\n        break;\n      case 'scrollback':\n        value = Math.min(value, 4294967295);\n        if (value < 0) {\n          throw new Error(`${key} cannot be less than 0, value: ${value}`);\n        }\n        break;\n      case 'fastScrollSensitivity':\n      case 'scrollSensitivity':\n        if (value <= 0) {\n          throw new Error(`${key} cannot be less than or equal to 0, value: ${value}`);\n        }\n      case 'rows':\n      case 'cols':\n        if (!value && value !== 0) {\n          throw new Error(`${key} must be numeric, value: ${value}`);\n        }\n        break;\n    }\n    return value;\n  }\n\n  public getOption(key: string): any {\n    return this.options[key];\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n *\n * This was heavily inspired from microsoft/vscode's dependency injection system (MIT).\n */\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IServiceIdentifier } from 'common/services/Services';\n\nconst DI_TARGET = 'di$target';\nconst DI_DEPENDENCIES = 'di$dependencies';\n\nexport const serviceRegistry: Map<string, IServiceIdentifier<any>> = new Map();\n\nexport function getServiceDependencies(ctor: any): { id: IServiceIdentifier<any>, index: number, optional: boolean }[] {\n  return ctor[DI_DEPENDENCIES] || [];\n}\n\nexport function createDecorator<T>(id: string): IServiceIdentifier<T> {\n  if (serviceRegistry.has(id)) {\n    return serviceRegistry.get(id)!;\n  }\n\n  const decorator: any = function (target: Function, key: string, index: number): any {\n    if (arguments.length !== 3) {\n      throw new Error('@IServiceName-decorator can only be used to decorate a parameter');\n    }\n\n    storeServiceDependency(decorator, target, index);\n  };\n\n  decorator.toString = () => id;\n\n  serviceRegistry.set(id, decorator);\n  return decorator;\n}\n\nfunction storeServiceDependency(id: Function, target: Function, index: number): void {\n  if ((target as any)[DI_TARGET] === target) {\n    (target as any)[DI_DEPENDENCIES].push({ id, index });\n  } else {\n    (target as any)[DI_DEPENDENCIES] = [{ id, index }];\n    (target as any)[DI_TARGET] = target;\n  }\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IEvent } from 'common/EventEmitter';\nimport { IBuffer, IBufferSet } from 'common/buffer/Types';\nimport { IDecPrivateModes, ICoreMouseEvent, CoreMouseEncoding, ICoreMouseProtocol, CoreMouseEventType, ICharset, IWindowOptions, IModes, IAttributeData, ScrollSource } from 'common/Types';\nimport { createDecorator } from 'common/services/ServiceRegistry';\n\nexport const IBufferService = createDecorator<IBufferService>('BufferService');\nexport interface IBufferService {\n  serviceBrand: undefined;\n\n  readonly cols: number;\n  readonly rows: number;\n  readonly buffer: IBuffer;\n  readonly buffers: IBufferSet;\n  isUserScrolling: boolean;\n  onResize: IEvent<{ cols: number, rows: number }>;\n  onScroll: IEvent<number>;\n  scroll(eraseAttr: IAttributeData, isWrapped?: boolean): void;\n  scrollToBottom(): void;\n  scrollToTop(): void;\n  scrollToLine(line: number): void;\n  scrollLines(disp: number, suppressScrollEvent?: boolean, source?: ScrollSource): void;\n  scrollPages(pageCount: number): void;\n  resize(cols: number, rows: number): void;\n  reset(): void;\n}\n\nexport const ICoreMouseService = createDecorator<ICoreMouseService>('CoreMouseService');\nexport interface ICoreMouseService {\n  activeProtocol: string;\n  activeEncoding: string;\n  areMouseEventsActive: boolean;\n  addProtocol(name: string, protocol: ICoreMouseProtocol): void;\n  addEncoding(name: string, encoding: CoreMouseEncoding): void;\n  reset(): void;\n\n  /**\n   * Triggers a mouse event to be sent.\n   *\n   * Returns true if the event passed all protocol restrictions and a report\n   * was sent, otherwise false. The return value may be used to decide whether\n   * the default event action in the bowser component should be omitted.\n   *\n   * Note: The method will change values of the given event object\n   * to fullfill protocol and encoding restrictions.\n   */\n  triggerMouseEvent(event: ICoreMouseEvent): boolean;\n\n  /**\n   * Event to announce changes in mouse tracking.\n   */\n  onProtocolChange: IEvent<CoreMouseEventType>;\n\n  /**\n   * Human readable version of mouse events.\n   */\n  explainEvents(events: CoreMouseEventType): { [event: string]: boolean };\n}\n\nexport const ICoreService = createDecorator<ICoreService>('CoreService');\nexport interface ICoreService {\n  serviceBrand: undefined;\n\n  /**\n   * Initially the cursor will not be visible until the first time the terminal\n   * is focused.\n   */\n  isCursorInitialized: boolean;\n  isCursorHidden: boolean;\n\n  readonly modes: IModes;\n  readonly decPrivateModes: IDecPrivateModes;\n\n  readonly onData: IEvent<string>;\n  readonly onUserInput: IEvent<void>;\n  readonly onBinary: IEvent<string>;\n\n  reset(): void;\n\n  /**\n   * Triggers the onData event in the public API.\n   * @param data The data that is being emitted.\n   * @param wasFromUser Whether the data originated from the user (as opposed to\n   * resulting from parsing incoming data). When true this will also:\n   * - Scroll to the bottom of the buffer.s\n   * - Fire the `onUserInput` event (so selection can be cleared).\n   */\n  triggerDataEvent(data: string, wasUserInput?: boolean): void;\n\n  /**\n   * Triggers the onBinary event in the public API.\n   * @param data The data that is being emitted.\n   */\n  triggerBinaryEvent(data: string): void;\n}\n\nexport const ICharsetService = createDecorator<ICharsetService>('CharsetService');\nexport interface ICharsetService {\n  serviceBrand: undefined;\n\n  charset: ICharset | undefined;\n  readonly glevel: number;\n\n  reset(): void;\n\n  /**\n   * Set the G level of the terminal.\n   * @param g\n   */\n  setgLevel(g: number): void;\n\n  /**\n   * Set the charset for the given G level of the terminal.\n   * @param g\n   * @param charset\n   */\n  setgCharset(g: number, charset: ICharset | undefined): void;\n}\n\nexport const IDirtyRowService = createDecorator<IDirtyRowService>('DirtyRowService');\nexport interface IDirtyRowService {\n  serviceBrand: undefined;\n\n  readonly start: number;\n  readonly end: number;\n\n  clearRange(): void;\n  markDirty(y: number): void;\n  markRangeDirty(y1: number, y2: number): void;\n  markAllDirty(): void;\n}\n\nexport interface IServiceIdentifier<T> {\n  (...args: any[]): void;\n  type: T;\n}\n\nexport interface IBrandedService {\n  serviceBrand: undefined;\n}\n\ntype GetLeadingNonServiceArgs<Args> =\n  Args extends [...IBrandedService[]] ? []\n    : Args extends [infer A1, ...IBrandedService[]] ? [A1]\n      : Args extends [infer A1, infer A2, ...IBrandedService[]] ? [A1, A2]\n        : Args extends [infer A1, infer A2, infer A3, ...IBrandedService[]] ? [A1, A2, A3]\n          : Args extends [infer A1, infer A2, infer A3, infer A4, ...IBrandedService[]] ? [A1, A2, A3, A4]\n            : Args extends [infer A1, infer A2, infer A3, infer A4, infer A5, ...IBrandedService[]] ? [A1, A2, A3, A4, A5]\n              : Args extends [infer A1, infer A2, infer A3, infer A4, infer A5, infer A6, ...IBrandedService[]] ? [A1, A2, A3, A4, A5, A6]\n                : Args extends [infer A1, infer A2, infer A3, infer A4, infer A5, infer A6, infer A7, ...IBrandedService[]] ? [A1, A2, A3, A4, A5, A6, A7]\n                  : Args extends [infer A1, infer A2, infer A3, infer A4, infer A5, infer A6, infer A7, infer A8, ...IBrandedService[]] ? [A1, A2, A3, A4, A5, A6, A7, A8]\n                    : never;\n\nexport const IInstantiationService = createDecorator<IInstantiationService>('InstantiationService');\nexport interface IInstantiationService {\n  serviceBrand: undefined;\n\n  setService<T>(id: IServiceIdentifier<T>, instance: T): void;\n  getService<T>(id: IServiceIdentifier<T>): T | undefined;\n  createInstance<Ctor extends new (...args: any[]) => any, R extends InstanceType<Ctor>>(t: Ctor, ...args: GetLeadingNonServiceArgs<ConstructorParameters<Ctor>>): R;\n}\n\nexport enum LogLevelEnum {\n  DEBUG = 0,\n  INFO = 1,\n  WARN = 2,\n  ERROR = 3,\n  OFF = 4\n}\n\nexport const ILogService = createDecorator<ILogService>('LogService');\nexport interface ILogService {\n  serviceBrand: undefined;\n\n  logLevel: LogLevelEnum;\n\n  debug(message: any, ...optionalParams: any[]): void;\n  info(message: any, ...optionalParams: any[]): void;\n  warn(message: any, ...optionalParams: any[]): void;\n  error(message: any, ...optionalParams: any[]): void;\n}\n\nexport const IOptionsService = createDecorator<IOptionsService>('OptionsService');\nexport interface IOptionsService {\n  serviceBrand: undefined;\n\n  /**\n   * Read only access to the raw options object, this is an internal-only fast path for accessing\n   * single options without any validation as we trust TypeScript to enforce correct usage\n   * internally.\n   */\n  readonly rawOptions: Readonly<ITerminalOptions>;\n  readonly options: ITerminalOptions;\n\n  readonly onOptionChange: IEvent<string>;\n\n  setOption<T>(key: string, value: T): void;\n  getOption<T>(key: string): T | undefined;\n}\n\nexport type FontWeight = 'normal' | 'bold' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | number;\nexport type LogLevel = 'debug' | 'info' | 'warn' | 'error' | 'off';\n\nexport type RendererType = 'dom' | 'canvas';\n\nexport interface ITerminalOptions {\n  allowProposedApi: boolean;\n  allowTransparency: boolean;\n  altClickMovesCursor: boolean;\n  bellSound: string;\n  bellStyle: 'none' | 'sound' /* | 'visual' | 'both' */;\n  cols: number;\n  convertEol: boolean;\n  cursorBlink: boolean;\n  cursorStyle: 'block' | 'underline' | 'bar';\n  cursorWidth: number;\n  customGlyphs: boolean;\n  disableStdin: boolean;\n  drawBoldTextInBrightColors: boolean;\n  fastScrollModifier: 'alt' | 'ctrl' | 'shift' | undefined;\n  fastScrollSensitivity: number;\n  fontSize: number;\n  fontFamily: string;\n  fontWeight: FontWeight;\n  fontWeightBold: FontWeight;\n  letterSpacing: number;\n  lineHeight: number;\n  linkTooltipHoverDuration: number;\n  logLevel: LogLevel;\n  macOptionIsMeta: boolean;\n  macOptionClickForcesSelection: boolean;\n  minimumContrastRatio: number;\n  rendererType: RendererType;\n  rightClickSelectsWord: boolean;\n  rows: number;\n  screenReaderMode: boolean;\n  scrollback: number;\n  scrollSensitivity: number;\n  tabStopWidth: number;\n  theme: ITheme;\n  windowsMode: boolean;\n  windowOptions: IWindowOptions;\n  wordSeparator: string;\n\n  [key: string]: any;\n  cancelEvents: boolean;\n  termName: string;\n}\n\nexport interface ITheme {\n  foreground?: string;\n  background?: string;\n  cursor?: string;\n  cursorAccent?: string;\n  selection?: string;\n  black?: string;\n  red?: string;\n  green?: string;\n  yellow?: string;\n  blue?: string;\n  magenta?: string;\n  cyan?: string;\n  white?: string;\n  brightBlack?: string;\n  brightRed?: string;\n  brightGreen?: string;\n  brightYellow?: string;\n  brightBlue?: string;\n  brightMagenta?: string;\n  brightCyan?: string;\n  brightWhite?: string;\n}\n\nexport const IUnicodeService = createDecorator<IUnicodeService>('UnicodeService');\nexport interface IUnicodeService {\n  serviceBrand: undefined;\n  /** Register an Unicode version provider. */\n  register(provider: IUnicodeVersionProvider): void;\n  /** Registered Unicode versions. */\n  readonly versions: string[];\n  /** Currently active version. */\n  activeVersion: string;\n  /** Event triggered, when activate version changed. */\n  readonly onChange: IEvent<string>;\n\n  /**\n   * Unicode version dependent\n   */\n  wcwidth(codepoint: number): number;\n  getStringCellWidth(s: string): number;\n}\n\nexport interface IUnicodeVersionProvider {\n  readonly version: string;\n  wcwidth(ucs: number): 0 | 1 | 2;\n}\n","/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\nimport { IUnicodeService, IUnicodeVersionProvider } from 'common/services/Services';\nimport { EventEmitter, IEvent } from 'common/EventEmitter';\nimport { UnicodeV6 } from 'common/input/UnicodeV6';\n\n\nexport class UnicodeService implements IUnicodeService {\n  public serviceBrand: any;\n\n  private _providers: {[key: string]: IUnicodeVersionProvider} = Object.create(null);\n  private _active: string = '';\n  private _activeProvider: IUnicodeVersionProvider;\n  private _onChange = new EventEmitter<string>();\n  public get onChange(): IEvent<string> { return this._onChange.event; }\n\n  constructor() {\n    const defaultProvider = new UnicodeV6();\n    this.register(defaultProvider);\n    this._active = defaultProvider.version;\n    this._activeProvider = defaultProvider;\n  }\n\n  public get versions(): string[] {\n    return Object.keys(this._providers);\n  }\n\n  public get activeVersion(): string {\n    return this._active;\n  }\n\n  public set activeVersion(version: string) {\n    if (!this._providers[version]) {\n      throw new Error(`unknown Unicode version \"${version}\"`);\n    }\n    this._active = version;\n    this._activeProvider = this._providers[version];\n    this._onChange.fire(version);\n  }\n\n  public register(provider: IUnicodeVersionProvider): void {\n    this._providers[provider.version] = provider;\n  }\n\n  /**\n   * Unicode version dependent interface.\n   */\n  public wcwidth(num: number): number {\n    return this._activeProvider.wcwidth(num);\n  }\n\n  public getStringCellWidth(s: string): number {\n    let result = 0;\n    const length = s.length;\n    for (let i = 0; i < length; ++i) {\n      let code = s.charCodeAt(i);\n      // surrogate pair first\n      if (0xD800 <= code && code <= 0xDBFF) {\n        if (++i >= length) {\n          // this should not happen with strings retrieved from\n          // Buffer.translateToString as it converts from UTF-32\n          // and therefore always should contain the second part\n          // for any other string we still have to handle it somehow:\n          // simply treat the lonely surrogate first as a single char (UCS-2 behavior)\n          return result + this.wcwidth(code);\n        }\n        const second = s.charCodeAt(i);\n        // convert surrogate pair to high codepoint only for valid second part (UTF-16)\n        // otherwise treat them independently (UCS-2 behavior)\n        if (0xDC00 <= second && second <= 0xDFFF) {\n          code = (code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n        } else {\n          result += this.wcwidth(second);\n        }\n      }\n      result += this.wcwidth(code);\n    }\n    return result;\n  }\n}\n","/**\n * Copyright (c) 2014 The xterm.js authors. All rights reserved.\n * Copyright (c) 2012-2013, Christopher Jeffrey (MIT License)\n * @license MIT\n *\n * Originally forked from (with the author's permission):\n *   Fabrice Bellard's javascript vt100 for jslinux:\n *   http://bellard.org/jslinux/\n *   Copyright (c) 2011 Fabrice Bellard\n *   The original design remains. The terminal itself\n *   has been extended to include xterm CSI codes, among\n *   other features.\n *\n * Terminal Emulation References:\n *   http://vt100.net/\n *   http://invisible-island.net/xterm/ctlseqs/ctlseqs.txt\n *   http://invisible-island.net/xterm/ctlseqs/ctlseqs.html\n *   http://invisible-island.net/vttest/\n *   http://www.inwap.com/pdp10/ansicode.txt\n *   http://linux.die.net/man/4/console_codes\n *   http://linux.die.net/man/7/urxvt\n */\n\nimport { DEFAULT_ATTR_DATA } from 'common/buffer/BufferLine';\nimport { IBuffer } from 'common/buffer/Types';\nimport { CoreTerminal } from 'common/CoreTerminal';\nimport { EventEmitter, forwardEvent, IEvent } from 'common/EventEmitter';\nimport { ITerminalOptions as IInitializedTerminalOptions } from 'common/services/Services';\nimport { IMarker, ITerminalOptions, ScrollSource } from 'common/Types';\n\nexport class Terminal extends CoreTerminal {\n  // TODO: We should remove options once components adopt optionsService\n  public get options(): IInitializedTerminalOptions { return this.optionsService.options; }\n\n  private _onBell = new EventEmitter<void>();\n  public get onBell(): IEvent<void> { return this._onBell.event; }\n  private _onCursorMove = new EventEmitter<void>();\n  public get onCursorMove(): IEvent<void> { return this._onCursorMove.event; }\n  private _onTitleChange = new EventEmitter<string>();\n  public get onTitleChange(): IEvent<string> { return this._onTitleChange.event; }\n\n  private _onA11yCharEmitter = new EventEmitter<string>();\n  public get onA11yChar(): IEvent<string> { return this._onA11yCharEmitter.event; }\n  private _onA11yTabEmitter = new EventEmitter<number>();\n  public get onA11yTab(): IEvent<number> { return this._onA11yTabEmitter.event; }\n\n  /**\n   * Creates a new `Terminal` object.\n   *\n   * @param options An object containing a set of options, the available options are:\n   *   - `cursorBlink` (boolean): Whether the terminal cursor blinks\n   *   - `cols` (number): The number of columns of the terminal (horizontal size)\n   *   - `rows` (number): The number of rows of the terminal (vertical size)\n   *\n   * @public\n   * @class Xterm Xterm\n   * @alias module:xterm/src/xterm\n   */\n  constructor(\n    options: ITerminalOptions = {}\n  ) {\n    super(options);\n\n    this._setup();\n\n    // Setup InputHandler listeners\n    this.register(this._inputHandler.onRequestBell(() => this.bell()));\n    this.register(this._inputHandler.onRequestReset(() => this.reset()));\n    this.register(forwardEvent(this._inputHandler.onCursorMove, this._onCursorMove));\n    this.register(forwardEvent(this._inputHandler.onTitleChange, this._onTitleChange));\n    this.register(forwardEvent(this._inputHandler.onA11yChar, this._onA11yCharEmitter));\n    this.register(forwardEvent(this._inputHandler.onA11yTab, this._onA11yTabEmitter));\n  }\n\n  public dispose(): void {\n    if (this._isDisposed) {\n      return;\n    }\n    super.dispose();\n    this.write = () => { };\n  }\n\n  /**\n   * Convenience property to active buffer.\n   */\n  public get buffer(): IBuffer {\n    return this.buffers.active;\n  }\n\n  protected _updateOptions(key: string): void {\n    super._updateOptions(key);\n\n    // TODO: These listeners should be owned by individual components\n    switch (key) {\n      case 'tabStopWidth': this.buffers.setupTabStops(); break;\n    }\n  }\n\n  // TODO: Support paste here?\n\n  public get markers(): IMarker[] {\n    return this.buffer.markers;\n  }\n\n  public addMarker(cursorYOffset: number): IMarker | undefined {\n    // Disallow markers on the alt buffer\n    if (this.buffer !== this.buffers.normal) {\n      return;\n    }\n\n    return this.buffer.addMarker(this.buffer.ybase + this.buffer.y + cursorYOffset);\n  }\n\n  public bell(): void {\n    this._onBell.fire();\n  }\n\n  /**\n   * Resizes the terminal.\n   *\n   * @param x The number of columns to resize to.\n   * @param y The number of rows to resize to.\n   */\n  public resize(x: number, y: number): void {\n    if (x === this.cols && y === this.rows) {\n      return;\n    }\n\n    super.resize(x, y);\n  }\n\n  /**\n   * Clear the entire buffer, making the prompt line the new first line.\n   */\n  public clear(): void {\n    if (this.buffer.ybase === 0 && this.buffer.y === 0) {\n      // Don't clear if it's already clear\n      return;\n    }\n    this.buffer.lines.set(0, this.buffer.lines.get(this.buffer.ybase + this.buffer.y)!);\n    this.buffer.lines.length = 1;\n    this.buffer.ydisp = 0;\n    this.buffer.ybase = 0;\n    this.buffer.y = 0;\n    for (let i = 1; i < this.rows; i++) {\n      this.buffer.lines.push(this.buffer.getBlankLine(DEFAULT_ATTR_DATA));\n    }\n    this._onScroll.fire({ position: this.buffer.ydisp, source: ScrollSource.TERMINAL });\n  }\n\n  /**\n   * Reset terminal.\n   * Note: Calling this directly from JS is synchronous but does not clear\n   * input buffers and does not reset the parser, thus the terminal will\n   * continue to apply pending input data.\n   * If you need in band reset (synchronous with input data) consider\n   * using DECSTR (soft reset, CSI ! p) or RIS instead (hard reset, ESC c).\n   */\n  public reset(): void {\n    /**\n     * Since _setup handles a full terminal creation, we have to carry forward\n     * a few things that should not reset.\n     */\n    this.options.rows = this.rows;\n    this.options.cols = this.cols;\n\n    this._setup();\n    super.reset();\n  }\n}\n","/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IEvent } from 'common/EventEmitter';\nimport { BufferNamespaceApi } from 'common/public/BufferNamespaceApi';\nimport { ParserApi } from 'common/public/ParserApi';\nimport { UnicodeApi } from 'common/public/UnicodeApi';\nimport { IBufferNamespace as IBufferNamespaceApi, IMarker, IModes, IParser, ITerminalAddon, IUnicodeHandling, Terminal as ITerminalApi } from 'xterm-headless';\nimport { Terminal as TerminalCore } from 'headless/Terminal';\nimport { AddonManager } from 'common/public/AddonManager';\nimport { ITerminalOptions } from 'common/Types';\n\n/**\n * The set of options that only have an effect when set in the Terminal constructor.\n */\nconst CONSTRUCTOR_ONLY_OPTIONS = ['cols', 'rows'];\n\nexport class Terminal implements ITerminalApi {\n  private _core: TerminalCore;\n  private _addonManager: AddonManager;\n  private _parser: IParser | undefined;\n  private _buffer: BufferNamespaceApi | undefined;\n  private _publicOptions: ITerminalOptions;\n\n  constructor(options?: ITerminalOptions) {\n    this._core = new TerminalCore(options);\n    this._addonManager = new AddonManager();\n\n    this._publicOptions = { ... this._core.options };\n    const getter = (propName: string): any => {\n      return this._core.options[propName];\n    };\n    const setter = (propName: string, value: any): void => {\n      this._checkReadonlyOptions(propName);\n      this._core.options[propName] = value;\n    };\n\n    for (const propName in this._core.options) {\n      Object.defineProperty(this._publicOptions, propName, {\n        get: () => {\n          return this._core.options[propName];\n        },\n        set: (value: any) => {\n          this._checkReadonlyOptions(propName);\n          this._core.options[propName] = value;\n        }\n      });\n      const desc = {\n        get: getter.bind(this, propName),\n        set: setter.bind(this, propName)\n      };\n      Object.defineProperty(this._publicOptions, propName, desc);\n    }\n  }\n\n  private _checkReadonlyOptions(propName: string): void {\n    // Throw an error if any constructor only option is modified\n    // from terminal.options\n    // Modifications from anywhere else are allowed\n    if (CONSTRUCTOR_ONLY_OPTIONS.includes(propName)) {\n      throw new Error(`Option \"${propName}\" can only be set in the constructor`);\n    }\n  }\n\n  private _checkProposedApi(): void {\n    if (!this._core.optionsService.options.allowProposedApi) {\n      throw new Error('You must set the allowProposedApi option to true to use proposed API');\n    }\n  }\n\n  public get onBell(): IEvent<void> { return this._core.onBell; }\n  public get onBinary(): IEvent<string> { return this._core.onBinary; }\n  public get onCursorMove(): IEvent<void> { return this._core.onCursorMove; }\n  public get onData(): IEvent<string> { return this._core.onData; }\n  public get onLineFeed(): IEvent<void> { return this._core.onLineFeed; }\n  public get onResize(): IEvent<{ cols: number, rows: number }> { return this._core.onResize; }\n  public get onScroll(): IEvent<number> { return this._core.onScroll; }\n  public get onTitleChange(): IEvent<string> { return this._core.onTitleChange; }\n\n  public get parser(): IParser {\n    this._checkProposedApi();\n    if (!this._parser) {\n      this._parser = new ParserApi(this._core);\n    }\n    return this._parser;\n  }\n  public get unicode(): IUnicodeHandling {\n    this._checkProposedApi();\n    return new UnicodeApi(this._core);\n  }\n  public get rows(): number { return this._core.rows; }\n  public get cols(): number { return this._core.cols; }\n  public get buffer(): IBufferNamespaceApi {\n    this._checkProposedApi();\n    if (!this._buffer) {\n      this._buffer = new BufferNamespaceApi(this._core);\n    }\n    return this._buffer;\n  }\n  public get markers(): ReadonlyArray<IMarker> {\n    this._checkProposedApi();\n    return this._core.markers;\n  }\n  public get modes(): IModes {\n    const m = this._core.coreService.decPrivateModes;\n    let mouseTrackingMode: 'none' | 'x10' | 'vt200' | 'drag' | 'any' = 'none';\n    switch (this._core.coreMouseService.activeProtocol) {\n      case 'X10': mouseTrackingMode = 'x10'; break;\n      case 'VT200': mouseTrackingMode = 'vt200'; break;\n      case 'DRAG': mouseTrackingMode = 'drag'; break;\n      case 'ANY': mouseTrackingMode = 'any'; break;\n    }\n    return {\n      applicationCursorKeysMode: m.applicationCursorKeys,\n      applicationKeypadMode: m.applicationKeypad,\n      bracketedPasteMode: m.bracketedPasteMode,\n      insertMode: this._core.coreService.modes.insertMode,\n      mouseTrackingMode: mouseTrackingMode,\n      originMode: m.origin,\n      reverseWraparoundMode: m.reverseWraparound,\n      sendFocusMode: m.sendFocus,\n      wraparoundMode: m.wraparound\n    };\n  }\n  public get options(): ITerminalOptions {\n    return this._publicOptions;\n  }\n  public set options(options: ITerminalOptions) {\n    for (const propName in options) {\n      this._publicOptions[propName] = options[propName];\n    }\n  }\n  public resize(columns: number, rows: number): void {\n    this._verifyIntegers(columns, rows);\n    this._core.resize(columns, rows);\n  }\n  public registerMarker(cursorYOffset: number): IMarker | undefined {\n    this._checkProposedApi();\n    this._verifyIntegers(cursorYOffset);\n    return this._core.addMarker(cursorYOffset);\n  }\n  public addMarker(cursorYOffset: number): IMarker | undefined {\n    return this.registerMarker(cursorYOffset);\n  }\n  public dispose(): void {\n    this._addonManager.dispose();\n    this._core.dispose();\n  }\n  public scrollLines(amount: number): void {\n    this._verifyIntegers(amount);\n    this._core.scrollLines(amount);\n  }\n  public scrollPages(pageCount: number): void {\n    this._verifyIntegers(pageCount);\n    this._core.scrollPages(pageCount);\n  }\n  public scrollToTop(): void {\n    this._core.scrollToTop();\n  }\n  public scrollToBottom(): void {\n    this._core.scrollToBottom();\n  }\n  public scrollToLine(line: number): void {\n    this._verifyIntegers(line);\n    this._core.scrollToLine(line);\n  }\n  public clear(): void {\n    this._core.clear();\n  }\n  public write(data: string | Uint8Array, callback?: () => void): void {\n    this._core.write(data, callback);\n  }\n  public writeUtf8(data: Uint8Array, callback?: () => void): void {\n    this._core.write(data, callback);\n  }\n  public writeln(data: string | Uint8Array, callback?: () => void): void {\n    this._core.write(data);\n    this._core.write('\\r\\n', callback);\n  }\n  public getOption(key: 'bellSound' | 'bellStyle' | 'cursorStyle' | 'fontFamily' | 'logLevel' | 'rendererType' | 'termName' | 'wordSeparator'): string;\n  public getOption(key: 'allowTransparency' | 'altClickMovesCursor' | 'cancelEvents' | 'convertEol' | 'cursorBlink' | 'disableStdin' | 'macOptionIsMeta' | 'rightClickSelectsWord' | 'popOnBell' | 'visualBell'): boolean;\n  public getOption(key: 'cols' | 'fontSize' | 'letterSpacing' | 'lineHeight' | 'rows' | 'tabStopWidth' | 'scrollback'): number;\n  public getOption(key: string): any;\n  public getOption(key: any): any {\n    return this._core.optionsService.getOption(key);\n  }\n  public setOption(key: 'bellSound' | 'fontFamily' | 'termName' | 'wordSeparator', value: string): void;\n  public setOption(key: 'fontWeight' | 'fontWeightBold', value: 'normal' | 'bold' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | number): void;\n  public setOption(key: 'logLevel', value: 'debug' | 'info' | 'warn' | 'error' | 'off'): void;\n  public setOption(key: 'bellStyle', value: 'none' | 'visual' | 'sound' | 'both'): void;\n  public setOption(key: 'cursorStyle', value: 'block' | 'underline' | 'bar'): void;\n  public setOption(key: 'allowTransparency' | 'altClickMovesCursor' | 'cancelEvents' | 'convertEol' | 'cursorBlink' | 'disableStdin' | 'macOptionIsMeta' | 'rightClickSelectsWord' | 'popOnBell' | 'visualBell', value: boolean): void;\n  public setOption(key: 'fontSize' | 'letterSpacing' | 'lineHeight' | 'tabStopWidth' | 'scrollback', value: number): void;\n  public setOption(key: 'cols' | 'rows', value: number): void;\n  public setOption(key: string, value: any): void;\n  public setOption(key: any, value: any): void {\n    this._core.optionsService.setOption(key, value);\n  }\n  public reset(): void {\n    this._core.reset();\n  }\n  public loadAddon(addon: ITerminalAddon): void {\n    // TODO: This could cause issues if the addon calls renderer apis\n    return this._addonManager.loadAddon(this as any, addon);\n  }\n\n  private _verifyIntegers(...values: number[]): void {\n    for (const value of values) {\n      if (value === Infinity || isNaN(value) || value % 1 !== 0) {\n        throw new Error('This API only accepts integers');\n      }\n    }\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(614);\n"],"names":["_maxLength","onDeleteEmitter","EventEmitter","onInsertEmitter","onTrimEmitter","this","_array","Array","_startIndex","_length","event","newMaxLength","newArray","i","Math","min","length","_getCyclicIndex","newLength","undefined","get","index","set","value","push","fire","recycle","Error","pop","splice","start","deleteCount","amount","items","countToTrim","trimStart","count","shiftElements","offset","expandListBy","CircularList","clone","val","depth","clonedObject","isArray","key","hasWriteSyncWarnHappened","options","_onBinary","_onData","_onLineFeed","_onResize","_onScroll","_instantiationService","InstantiationService","optionsService","OptionsService","setService","IOptionsService","_bufferService","register","createInstance","BufferService","IBufferService","_logService","LogService","ILogService","coreService","CoreService","scrollToBottom","ICoreService","coreMouseService","CoreMouseService","ICoreMouseService","_dirtyRowService","DirtyRowService","IDirtyRowService","unicodeService","UnicodeService","IUnicodeService","_charsetService","CharsetService","ICharsetService","_inputHandler","InputHandler","forwardEvent","onLineFeed","onResize","onData","onBinary","onOptionChange","_updateOptions","onScroll","position","buffer","ydisp","source","markRangeDirty","scrollTop","scrollBottom","_writeBuffer","WriteBuffer","data","promiseResult","parse","_onScrollApi","ev","cols","rows","buffers","dispose","_isDisposed","_windowsMode","write","callback","writeSync","maxSubsequentCalls","logLevel","LogLevelEnum","WARN","warn","resize","x","y","isNaN","max","MINIMUM_COLS","MINIMUM_ROWS","scroll","eraseAttr","isWrapped","scrollLines","disp","suppressScrollEvent","scrollPages","pageCount","scrollToTop","scrollToLine","line","registerEscHandler","id","registerDcsHandler","registerCsiHandler","registerOscHandler","ident","_setup","rawOptions","windowsMode","_enableWindowsMode","reset","updateWindowsModeWrappedState","bind","final","Disposable","CoreTerminal","_listeners","_disposed","_event","listener","disposable","arg1","arg2","queue","call","from","to","e","WindowsOptionsReportType","GLEVEL","MAX_PARSEBUFFER_LENGTH","paramToWindowOption","n","opts","setWinLines","restoreWin","minimizeWin","setWinPosition","setWinSizePixels","raiseWin","lowerWin","refreshWin","setWinSizeChars","maximizeWin","fullscreenWin","getWinState","getWinPosition","getWinSizePixels","getScreenSizePixels","getCellSizePixels","getWinSizeChars","getScreenSizeChars","getIconTitle","getWinTitle","pushTitle","popTitle","_coreService","_optionsService","_data","Uint32Array","hook","params","put","end","concat","subarray","unhook","success","utf32ToString","triggerDataEvent","C0","ESC","pt","style","cursorStyle","cursorBlink","debug","_coreMouseService","_unicodeService","_parser","EscapeSequenceParser","_parseBuffer","_stringDecoder","StringToUtf32","_utf8Decoder","Utf8ToUtf32","_workCell","CellData","_windowTitle","_iconName","_windowTitleStack","_iconNameStack","_curAttrData","DEFAULT_ATTR_DATA","_eraseAttrDataInternal","_onRequestBell","_onRequestRefreshRows","_onRequestReset","_onRequestSendFocus","_onRequestSyncScrollBar","_onRequestWindowsOptionsReport","_onA11yChar","_onA11yTab","_onCursorMove","_onTitleChange","_onColor","_parseStack","paused","cursorStartX","cursorStartY","decodedLength","_specialColors","_activeBuffer","onBufferActivate","activeBuffer","setCsiHandlerFallback","identifier","identToString","toArray","setEscHandlerFallback","setExecuteHandlerFallback","code","setOscHandlerFallback","action","setDcsHandlerFallback","payload","setPrintHandler","print","insertChars","intermediates","scrollLeft","cursorUp","scrollRight","cursorDown","cursorForward","cursorBackward","cursorNextLine","cursorPrecedingLine","cursorCharAbsolute","cursorPosition","cursorForwardTab","eraseInDisplay","prefix","eraseInLine","insertLines","deleteLines","deleteChars","scrollUp","scrollDown","eraseChars","cursorBackwardTab","charPosAbsolute","hPositionRelative","repeatPrecedingCharacter","sendDeviceAttributesPrimary","sendDeviceAttributesSecondary","linePosAbsolute","vPositionRelative","hVPosition","tabClear","setMode","setModePrivate","resetMode","resetModePrivate","charAttributes","deviceStatus","deviceStatusPrivate","softReset","setCursorStyle","setScrollRegion","saveCursor","windowOptions","restoreCursor","insertColumns","deleteColumns","setExecuteHandler","BEL","bell","LF","lineFeed","VT","FF","CR","carriageReturn","BS","backspace","HT","tab","SO","shiftOut","SI","shiftIn","C1","IND","NEL","nextLine","HTS","tabSet","OscHandler","setTitle","setIconName","setOrReportIndexedColor","setOrReportFgColor","setOrReportBgColor","setOrReportCursorColor","restoreIndexedColor","restoreFgColor","restoreBgColor","restoreCursorColor","reverseIndex","keypadApplicationMode","keypadNumericMode","fullReset","setgLevel","selectDefaultCharset","flag","selectCharset","CHARSETS","screenAlignmentPattern","setErrorHandler","state","error","DECRQSS","_preserveStack","_logSlowResolvingAsync","p","Promise","race","res","rej","setTimeout","catch","err","console","result","wasPaused","DEBUG","split","map","charCodeAt","clearRange","len","decode","substring","chWidth","charset","screenReaderMode","wraparoundMode","decPrivateModes","wraparound","insertMode","modes","curAttr","bufferRow","lines","ybase","markDirty","getWidth","setCellFromCodePoint","fg","bg","extended","pos","wcwidth","ch","String","fromCharCode","stringFromCodePoint","_eraseAttrData","insertCells","getNullCell","NULL_CELL_CODE","NULL_CELL_WIDTH","addCodepointToCell","loadCell","getCode","precedingCodepoint","isCombined","getChars","content","hasContent","DcsHandler","convertEol","reverseWraparound","_restrictCursor","hasWidth","originalX","nextStop","maxCol","origin","_setCursor","_moveCursor","diffToTop","diffToBottom","param","tabs","prevStop","_eraseInBufferLine","clearWrap","replaceCells","_resetBufferLine","fill","j","scrollBackSize","row","scrollBottomRowsOffset","scrollBottomAbsolute","getBlankLine","deleteCells","_is","term","termName","indexOf","applicationCursorKeys","setgCharset","DEFAULT_CHARSET","applicationKeypad","activeProtocol","sendFocus","activeEncoding","isCursorHidden","activateAltBuffer","isCursorInitialized","bracketedPasteMode","activateNormalBuffer","_updateAttrColor","color","mode","c1","c2","c3","AttributeData","fromColorRGB","_extractColor","attr","accu","cSpace","advance","hasSubParams","subparams","getSubParams","underlineColor","_processUnderline","underlineStyle","updateExtended","l","savedX","savedY","savedCurAttrData","savedCharset","isBlinking","bottom","top","second","GET_WIN_SIZE_PIXELS","GET_CELL_SIZE_PIXELS","shift","_savedCharset","slots","idx","spec","exec","parseInt","type","parseColor","_setOrReportSpecialColor","collectAndFlag","scrollRegionHeight","level","cell","yOffset","markAllDirty","_disposables","d","unregister","disposeArray","disposables","array","isNode","navigator","userAgent","platform","isFirefox","includes","isSafari","test","isMac","isIpad","isIphone","isWindows","isLinux","fillFallback","a","b","constructor","bufferService","lastChar","CHAR_DATA_CODE_INDEX","WHITESPACE_CELL_CODE","ExtendedAttrs","toColorRGB","newObj","isInverse","isBold","isUnderline","isBlink","isInvisible","isItalic","isDim","isStrikethrough","getFgColorMode","getBgColorMode","isFgRGB","isBgRGB","isFgPalette","isBgPalette","isFgDefault","isBgDefault","isAttributeDefault","getFgColor","getBgColor","hasExtendedAttrs","isEmpty","getUnderlineColor","getUnderlineColorMode","isUnderlineColorRGB","isUnderlineColorPalette","isUnderlineColorDefault","getUnderlineStyle","MAX_BUFFER_SIZE","_hasScrollback","markers","_nullCell","fromCharData","NULL_CELL_CHAR","_whitespaceCell","WHITESPACE_CELL_CHAR","WHITESPACE_CELL_WIDTH","_cols","_rows","_getCorrectBufferLength","setupTabStops","getWhitespaceCell","BufferLine","maxLength","relativeY","correctBufferLength","scrollback","fillViewportRows","fillAttr","clear","newCols","newRows","nullCell","addToY","amountToTrim","_isReflowEnabled","_reflow","_reflowLarger","_reflowSmaller","toRemove","reflowLargerGetLinesToRemove","newLayoutResult","reflowLargerCreateNewLayout","reflowLargerApplyNewLayout","layout","_reflowLargerAdjustViewport","countRemoved","viewportAdjustments","toInsert","countToInsert","getTrimmedLength","wrappedLines","unshift","absoluteY","trimmedLines","lastLineLength","destLineLengths","reflowSmallerGetNewLineLengths","linesToAdd","newLines","newLine","destLineIndex","destCol","srcLineIndex","srcCol","cellsToCopy","copyCellsFrom","wrappedLinesIndex","getWrappedLineTrimmedLength","setCell","insertEvents","originalLines","originalLinesLength","originalLineIndex","nextToInsertIndex","nextToInsert","countInsertedSoFar","nextI","insertCountEmitted","stringIndexToBufferIndex","lineIndex","stringIndex","trimRight","CHAR_DATA_WIDTH_INDEX","CHAR_DATA_CHAR_INDEX","translateBufferLineToString","startCol","endCol","translateToString","getWrappedRangeForLine","first","last","tabStopWidth","addMarker","marker","Marker","onTrim","onInsert","onDelete","onDispose","_removeMarker","iterator","startIndex","endIndex","startOverscan","endOverscan","BufferStringIterator","Buffer","_buffer","_trimRight","_endIndex","_startOverscan","_endOverscan","_current","hasNext","next","range","Object","freeze","fillCellData","_combined","_extendedAttrs","cp","CHAR_DATA_ATTR_INDEX","getFg","getBg","getCodePoint","getString","combinedData","codePoint","width","eAttrs","keys","copyFrom","el","src","applyInReverse","srcData","srcCombinedKeys","endsInNull","followingLineStartsWithWide","oldCols","bufferAbsoluteY","srcTrimmedTineLength","srcRemainingCells","destRemainingCells","countToRemove","nextToRemoveIndex","nextToRemoveStart","countRemovedSoFar","newLayout","newLayoutLines","newLineLengths","cellsNeeded","reduce","c","srcLine","cellsAvailable","oldTrimmedLength","endsWithWide","lineLength","_onBufferActivate","_normal","_alt","inactiveBuffer","BufferSet","obj","setFromCharData","combined","getAsCharData","DEFAULT_COLOR","DEFAULT_ATTR","_id","_nextId","isDisposed","_onDispose","C","NUL","SOH","STX","ETX","EOT","ENQ","ACK","DLE","DC1","DC2","DC3","DC4","NAK","SYN","ETB","CAN","EM","SUB","FS","GS","RS","US","SP","DEL","PAD","HOP","BPH","NBH","SSA","ESA","HTJ","VTS","PLD","PLU","RI","SS2","SS3","DCS","PU1","PU2","STS","CCH","MW","SPA","EPA","SOS","SGCI","SCI","CSI","ST","OSC","PM","APC","codepoint","_interim","input","target","size","startPos","interim","Uint8Array","byte1","byte2","byte3","byte4","discardInterim","tmp","missing","fourStop","table","BMP_COMBINING","HIGH_COMBINING","version","r","num","ucs","mid","bisearch","UnicodeV6","qmt","queueMicrotask","cb","resolve","then","_action","_callbacks","_pendingData","_bufferOffset","_isSyncWriting","_syncCalls","chunk","_innerWrite","lastTime","startTime","Date","now","slice","RGB_REX","HASH_REX","pad","bits","s","toString","s2","low","toLowerCase","m","base","round","adv","g","PAYLOAD_LIMIT","EMPTY_HANDLERS","_handlers","create","_active","_ident","_handlerFb","_stack","loopPosition","fallThrough","registerHandler","handler","handlerList","handlerIndex","clearHandler","setHandlerFallback","handlerResult","DcsParser","EMPTY_PARAMS","Params","addParam","_handler","_params","_hitLimit","ret","setDefault","add","addMany","codes","TransitionTable","NON_ASCII_PRINTABLE","VT500_TRANSITION_TABLE","blueprint","apply","unused","PRINTABLES","EXECUTABLES","states","_transitions","handlers","handlerPos","transition","chunkPos","initialState","currentState","_collect","_printHandlerFb","_executeHandlerFb","_csiHandlerFb","_escHandlerFb","_errorHandlerFb","_printHandler","_executeHandlers","_csiHandlers","_escHandlers","_oscParser","OscParser","_dcsParser","_errorHandler","_identifier","finalRange","intermediate","finalCode","reverse","join","clearPrintHandler","clearEscHandler","clearExecuteHandler","clearCsiHandler","clearDcsHandler","clearOscHandler","clearErrorHandler","collect","abort","addSubParam","addDigit","handlersEsc","jj","_state","_start","_put","MAX_VALUE","maxSubParamsLength","Int32Array","_subParams","_subParamsLength","_subParamsIdx","Uint16Array","_rejectDigits","_rejectSubDigits","_digitIsSub","fromArray","values","k","newParams","prototype","getSubParamsAll","store","cur","_addons","instance","loadAddon","terminal","loadedAddon","_wrappedAddonDispose","activate","AddonManager","init","getLine","BufferLineApiView","BufferApiView","_line","getCell","startColumn","endColumn","_core","_onBufferChange","normal","_alternate","alt","active","alternate","BufferNamespaceApi","addCsiHandler","addDcsHandler","addEscHandler","addOscHandler","ParserApi","provider","versions","activeVersion","UnicodeApi","isUserScrolling","_cachedBlankLine","topRow","bottomRow","willBufferBeTrimmed","isFull","oldYdisp","scrollAmount","glevel","_charsets","DEFAULT_PROTOCOLS","NONE","events","restrict","X10","button","ctrl","VT200","DRAG","ANY","eventCode","isSGR","S","DEFAULT_ENCODINGS","DEFAULT","col","SGR","_protocols","_encodings","_activeProtocol","_activeEncoding","_onProtocolChange","_lastEvent","addProtocol","addEncoding","name","protocol","encoding","triggerMouseEvent","_compareEvents","report","triggerBinaryEvent","explainEvents","down","up","drag","move","wheel","e1","e2","DEFAULT_MODES","DEFAULT_DEC_PRIVATE_MODES","_onUserInput","_scrollToBottom","wasUserInput","disableStdin","_end","y1","y2","temp","_entries","Map","entries","service","forEach","has","ServiceCollection","_services","IInstantiationService","getService","ctor","serviceDependencies","getServiceDependencies","sort","serviceArgs","dependency","firstServiceArgPos","args","optionsKeyToLogLevel","info","INFO","ERROR","off","OFF","_updateLogLevel","_evalLazyOptionalParams","optionalParams","_log","message","log","DEFAULT_BELL_SOUND","DEFAULT_OPTIONS","cursorWidth","customGlyphs","bellSound","bellStyle","drawBoldTextInBrightColors","fastScrollModifier","fastScrollSensitivity","fontFamily","fontSize","fontWeight","fontWeightBold","lineHeight","linkTooltipHoverDuration","letterSpacing","scrollSensitivity","macOptionIsMeta","macOptionClickForcesSelection","minimumContrastRatio","allowProposedApi","allowTransparency","theme","rightClickSelectsWord","rendererType","wordSeparator","altClickMovesCursor","cancelEvents","FONT_WEIGHT_OPTIONS","_onOptionChange","defaultOptions","newValue","_sanitizeAndValidateOption","_setupOptions","getter","propName","setter","desc","defineProperty","setOption","floor","getOption","storeServiceDependency","serviceRegistry","decorator","arguments","createDecorator","_providers","_onChange","defaultProvider","_activeProvider","getStringCellWidth","_onBell","_onA11yCharEmitter","_onA11yTabEmitter","onRequestBell","onRequestReset","onCursorMove","onTitleChange","onA11yChar","onA11yTab","cursorYOffset","Terminal","CONSTRUCTOR_ONLY_OPTIONS","_addonManager","_publicOptions","_checkReadonlyOptions","_checkProposedApi","onBell","mouseTrackingMode","applicationCursorKeysMode","applicationKeypadMode","originMode","reverseWraparoundMode","sendFocusMode","columns","_verifyIntegers","registerMarker","writeUtf8","writeln","addon","Infinity","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__"],"sourceRoot":""}